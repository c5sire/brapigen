---
swagger: "2.0"
info:
  description: |-
    The Breeding API (BrAPI) is a Standardized RESTful Web Service API Specification for communicating Plant Breeding Data. BrAPI allows for easy data sharing between databases and tools involved in plant breeding.

    <strong>General Reference Documentation</strong>
    <a href="https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/URL_Structure.md">URL Structure</a>
    <a href="https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Response_Structure.md">Response Structure</a>
    <a href="https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Date_Time_Encoding.md">Date/Time Encoding</a>
    <a href="https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Location_Encoding.md">Location Encoding</a>
    <a href="https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Error_Handling.md">Error Handling</a>
    <a href="https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Search_Services.md">Search Services</a>
    <a href="https://github.com/plantbreeding/API/blob/master/Specification/GeneralInfo/Asychronous_Processing.md">Asynchronous Processing</a>
  version: "1.2"
  title: BrAPI
host: test-server.brapi.org
basePath: /brapi/v1
tags:
- name: Calls
  description: Check the available calls on a server
  externalDocs:
    description: Docs
    url: https://wiki.brapi.org/
- name: Crops
  description: Information about Crops
  externalDocs:
    description: Docs
    url: https://wiki.brapi.org/
- name: Programs
  description: Information about Programs
  externalDocs:
    description: Docs
    url: https://wiki.brapi.org/
- name: Locations
  description: Information about Locations
  externalDocs:
    description: Docs
    url: https://wiki.brapi.org/
- name: Trials
  description: Information about Trials
  externalDocs:
    description: Docs
    url: https://wiki.brapi.org/
- name: Studies
  description: Information about Studies
  externalDocs:
    description: Docs
    url: https://wiki.brapi.org/
- name: Observations
  description: Information about Observations
  externalDocs:
    description: Docs
    url: https://wiki.brapi.org/
- name: Observation Variables
  description: API to retrieve list and details of observation variables. An observation variable is composed by the unique combination of one Trait, one Method and one Scale.
  externalDocs:
    description: github
    url: https://github.com/plantbreeding/API/tree/master/Specification/ObservationVariables
- name: Phenotypes
  description: Information about Phenotypes
  externalDocs:
    description: Docs
    url: https://wiki.brapi.org/
- name: Germplasm
  description: Information about Germplasm
  externalDocs:
    description: Docs
    url: https://wiki.brapi.org/
- name: Germplasm Attributes
  description: Information about Germplasm Attributes
  externalDocs:
    description: Docs
    url: https://wiki.brapi.org/
- name: Markers
  description: Information about Markers
  externalDocs:
    description: Docs
    url: https://wiki.brapi.org/
- name: Marker Profiles
  description: Information about Marker Profiles
  externalDocs:
    description: Docs
    url: https://wiki.brapi.org/
- name: Genome Maps
  description: Information about Genome Maps
  externalDocs:
    description: Docs
    url: https://wiki.brapi.org/
- name: Samples
  description: Information about Samples
  externalDocs:
    description: Docs
    url: https://wiki.brapi.org/
- name: Vendor Samples
  description: |-
    This interface is specific to facilities that performs an external analysis, such as genotyping facilities. The interface should be implemented by that facility's server. The breeding database is the client of this interface.
    Note that to use these calls, you likely have to use the authentication call prior to connecting (see Authentication best practices).
  externalDocs:
    description: Docs
    url: https://wiki.brapi.org/
- name: Search Services
  description: The available Search Services for finding data
  externalDocs:
    description: Docs
    url: https://wiki.brapi.org/
- name: Authentication
  description: Authenticacte your requests
  externalDocs:
    description: Docs
    url: https://wiki.brapi.org/
- name: Deprecated
  description: Deprecated Calls
  externalDocs:
    description: Docs
    url: https://wiki.brapi.org/
paths:
  /allelematrices:
    get:
      tags:
      - Marker Profiles
      summary: Matrices through GET
      description: |-
        <strong>Status</strong>: Proposed
        <strong>Implemented by</strong>: GOBII
        <strong>Used by</strong>: Flapjack
        </br>
        This resource is used for reading and writing genomic matrices:
        </br>
        GET provides a list of available matrices, optionally filtered by study;
        POST will provide a means for adding new matrices (content TBD).
      produces:
      - application/json
      parameters:
      - name: studyDbId
        in: query
        description: restricts the list of matrices to a specific study.
        required: true
        type: string
      - name: pageSize
        in: query
        description: The size of the pages to be returned. Default is `1000`.
        required: false
        type: integer
      - name: page
        in: query
        description: Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.
        required: false
        type: integer
      responses:
        200:
          description: OK
          examples:
            application/json:
              metadata:
                datafiles: []
                pagination:
                  currentPage: 0
                  pageSize: 1000
                  totalCount: 2
                  totalPages: 1
                status: []
              result:
                data:
                - description: a test dataset
                  lastUpdated: 2017-06-12
                  matrixDbId: "27"
                  name: testDs1
                  studyDbId: abc123
                - description: a second test dataset
                  lastUpdated: 2017-06-12
                  matrixDbId: "28"
                  name: testDs2
                  studyDbId: abc123
          headers: {}
          schema:
            type: object
            properties:
              metadata:
                $ref: '#/definitions/metadata'
              result:
                type: array
                items:
                  $ref: '#/definitions/alleleMatrixDetails'
            title: alleleMatrixDetailsResponse
  /allelematrices-search:
    get:
      tags:
      - Marker Profiles
      summary: Scores through GET
      description: "Status: ACCEPTED.\n\nImplemented by: Germinate (POST only), Cassavabase\n\
        \nUsed by: Flapjack (POST only)\n\nSee <a href=\"#introduction/search-services\"\
        >Search Services</a> for additional implementation details.\n\nThis uses a\
        \ more efficient data structure and pagination for large number of markers.\n\
        \nSee Search Services for additional implementation details.\n</br>\nThis\
        \ uses a more efficient data structure and pagination for large number of\
        \ markers. \n</br>\nUse GET when parameter size is less than 2K bytes.\nThis\
        \ method may support asynchronous processing."
      produces:
      - application/json
      parameters:
      - name: markerprofileDbId
        in: query
        description: The markerprofile db ids. Not Required if 'markerDbId' or 'matrixDbId' is present.
        required: false
        type: array
        items:
          type: string
        collectionFormat: multi
      - name: markerDbId
        in: query
        description: ids of the markers. if none are specified, results are returned for all markers in the database. Not Required if 'markerprofileDbId' or 'matrixDbId' is present.
        required: false
        type: array
        items:
          type: string
        collectionFormat: multi
      - name: matrixDbId
        in: query
        description: ""
        required: false
        type: array
        items:
          type: string
        collectionFormat: multi
      - name: format
        in: query
        description: format for the datafile to be downloaded. tsv and csv currently supported; flapjack may be supported.
        required: false
        type: string
      - name: expandHomozygotes
        in: query
        description: Should homozygotes NOT be collapsed into a single occurrence?
        required: false
        type: boolean
      - name: unknownString
        in: query
        description: The string to use as a representation for missing data or the reserved word "empty_string".
        required: false
        type: string
      - name: sepPhased
        in: query
        description: The string to use as a separator for phased allele calls or the reserved word "empty_string".
        required: false
        type: string
      - name: sepUnphased
        in: query
        description: The string to use as a separator for unphased allele calls or the reserved word "empty_string".
        required: false
        type: string
      - name: pageSize
        in: query
        description: The size of the pages to be returned. Default is `1000`.
        required: false
        type: integer
      - name: page
        in: query
        description: Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.
        required: false
        type: integer
      responses:
        200:
          description: OK
          examples:
            application/json:
              metadata:
                datafiles: []
                pagination:
                  currentPage: 0
                  pageSize: 1000
                  totalCount: 4
                  totalPages: 1
                status: []
              result:
                data:
                - - "1"
                  - "1"
                  - A/B
                - - "1"
                  - "2"
                  - B
                - - "2"
                  - "1"
                  - A
                - - "2"
                  - "2"
                  - A/B
          headers: {}
          schema:
            type: object
            properties:
              metadata:
                $ref: '#/definitions/metadata'
              result:
                $ref: '#/definitions/alleleMatrixValues'
            title: alleleMatrixValuesResponse
    post:
      tags:
      - Marker Profiles
      summary: Scores through POST
      description: |-
        Status: ACCEPTED.

        Implemented by: Germinate (POST only), Cassavabase

        Used by: Flapjack (POST only)

        See <a href="#introduction/search-services">Search Services</a> for additional implementation details.

        This uses a more efficient data structure and pagination for large number of markers.

        Use POST when parameter size is greater than 2K bytes.

        - If no format is specified, this call returns the data in JSON form.

        - If a format (other than JSON) is specified and the server supports this format, it will return the link to the exported data file in the "datafiles" field of the "metadata".

        - If more than one format is requested at a time, the server will throw a "501 Not Implemented" error.

        The format of the tsv response can be found on GitHub (https://github.com/plantbreeding/Documentation/wiki/BrAPI-TSV-Expected-Formats)
      produces:
      - application/json
      parameters:
      - in: body
        name: markerprofileDbId
        description: The markerprofile db ids. Not Required if 'markerDbId' or 'matrixDbId' is present.
        required: true
        schema:
          $ref: '#/definitions/alleleMatrixSearchRequest'
      responses:
        200:
          description: OK
          examples:
            application/json:
              metadata:
                datafiles: []
                pagination:
                  currentPage: 0
                  pageSize: 0
                  totalCount: 0
                  totalPages: 0
                status: []
              result:
                data:
                - - "1"
                  - "1"
                  - A/B
                - - "1"
                  - "2"
                  - B
                - - "2"
                  - "1"
                  - A
                - - "2"
                  - "2"
                  - A/B
            application/tsv:
              metadata:
                datafiles:
                - https://my-fancy-server/files/allelematrix-1234.tsv
                pagination:
                  currentPage: 0
                  pageSize: 0
                  totalCount: 0
                  totalPages: 0
                status: []
              result:
                data: []
          headers: {}
          schema:
            type: object
            properties:
              metadata:
                $ref: '#/definitions/metadata'
              result:
                $ref: '#/definitions/alleleMatrixValues'
            title: alleleMatrixValuesResponse
  /allelematrix-search:
    get:
      tags:
      - Marker Profiles
      - Deprecated
      summary: Scores through GET
      description: "Status: ACCEPTED.\n\nImplemented by: Germinate (POST only), Cassavabase\n\
        \nUsed by: Flapjack (POST only)\n\nSee <a href=\"#introduction/search-services\"\
        >Search Services</a> for additional implementation details.\n\nThis uses a\
        \ more efficient data structure and pagination for large number of markers.\n\
        \nSee Search Services for additional implementation details.\n</br>\nThis\
        \ uses a more efficient data structure and pagination for large number of\
        \ markers. \n</br>\nUse GET when parameter size is less than 2K bytes.\nThis\
        \ method may support asynchronous processing."
      produces:
      - application/json
      parameters:
      - name: markerprofileDbId
        in: query
        description: The markerprofile db ids. Not Required if 'markerDbId' or 'matrixDbId' is present.
        required: false
        type: array
        items:
          type: string
        collectionFormat: multi
      - name: markerDbId
        in: query
        description: ids of the markers. if none are specified, results are returned for all markers in the database. Not Required if 'markerprofileDbId' or 'matrixDbId' is present.
        required: false
        type: array
        items:
          type: string
        collectionFormat: multi
      - name: matrixDbId
        in: query
        description: ""
        required: false
        type: array
        items:
          type: string
        collectionFormat: multi
      - name: format
        in: query
        description: format for the datafile to be downloaded. tsv and csv currently supported; flapjack may be supported.
        required: false
        type: string
      - name: expandHomozygotes
        in: query
        description: Should homozygotes NOT be collapsed into a single occurrence?
        required: false
        type: boolean
      - name: unknownString
        in: query
        description: The string to use as a representation for missing data or the reserved word "empty_string".
        required: false
        type: string
      - name: sepPhased
        in: query
        description: The string to use as a separator for phased allele calls or the reserved word "empty_string".
        required: false
        type: string
      - name: sepUnphased
        in: query
        description: The string to use as a separator for unphased allele calls or the reserved word "empty_string".
        required: false
        type: string
      - name: pageSize
        in: query
        description: The size of the pages to be returned. Default is `1000`.
        required: false
        type: integer
      - name: page
        in: query
        description: Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.
        required: false
        type: integer
      responses:
        200:
          description: OK
          examples:
            application/json:
              metadata:
                datafiles: []
                pagination:
                  currentPage: 0
                  pageSize: 1000
                  totalCount: 4
                  totalPages: 1
                status: []
              result:
                data:
                - - "1"
                  - "1"
                  - A/B
                - - "1"
                  - "2"
                  - B
                - - "2"
                  - "1"
                  - A
                - - "2"
                  - "2"
                  - A/B
          headers: {}
          schema:
            type: object
            properties:
              metadata:
                $ref: '#/definitions/metadata'
              result:
                $ref: '#/definitions/alleleMatrixValues'
            title: alleleMatrixValuesResponse
      deprecated: true
    post:
      tags:
      - Marker Profiles
      - Deprecated
      summary: Scores through POST
      description: |-
        Status: ACCEPTED.

        Implemented by: Germinate (POST only), Cassavabase

        Used by: Flapjack (POST only)

        See <a href="#introduction/search-services">Search Services</a> for additional implementation details.

        This uses a more efficient data structure and pagination for large number of markers.

        Use POST when parameter size is greater than 2K bytes.

        - If no format is specified, this call returns the data in JSON form.

        - If a format (other than JSON) is specified and the server supports this format, it will return the link to the exported data file in the "datafiles" field of the "metadata".

        - If more than one format is requested at a time, the server will throw a "501 Not Implemented" error.

        The format of the tsv response can be found on GitHub (https://github.com/plantbreeding/Documentation/wiki/BrAPI-TSV-Expected-Formats)
      produces:
      - application/json
      parameters:
      - in: body
        name: markerprofileDbId
        description: The markerprofile db ids. Not Required if 'markerDbId' or 'matrixDbId' is present.
        required: true
        schema:
          $ref: '#/definitions/alleleMatrixSearchRequest'
      responses:
        200:
          description: OK
          examples:
            application/json:
              metadata:
                datafiles: []
                pagination:
                  currentPage: 0
                  pageSize: 0
                  totalCount: 0
                  totalPages: 0
                status: []
              result:
                data:
                - - "1"
                  - "1"
                  - A/B
                - - "1"
                  - "2"
                  - B
                - - "2"
                  - "1"
                  - A
                - - "2"
                  - "2"
                  - A/B
            application/tsv:
              metadata:
                datafiles:
                - https://my-fancy-server/files/allelematrix-1234.tsv
                pagination:
                  currentPage: 0
                  pageSize: 0
                  totalCount: 0
                  totalPages: 0
                status: []
              result:
                data: []
          headers: {}
          schema:
            type: object
            properties:
              metadata:
                $ref: '#/definitions/metadata'
              result:
                $ref: '#/definitions/alleleMatrixValues'
            title: alleleMatrixValuesResponse
      deprecated: true
  /attributes:
    get:
      tags:
      - Germplasm Attributes
      summary: Attributes by attributeCategoryDbId
      description: " List available attributes.\n<a href=\"https://test-server.brapi.org/brapi/v1/attributes\"\
        > test-server.brapi.org/brapi/v1/attributes</a> "
      produces:
      - application/json
      parameters:
      - name: attributeCategoryDbId
        in: query
        description: filter for kind of attributes
        required: false
        type: string
      - name: pageSize
        in: query
        description: The size of the pages to be returned. Default is `1000`.
        required: false
        type: integer
      - name: page
        in: query
        description: Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.
        required: false
        type: integer
      responses:
        200:
          description: OK
          examples:
            application/json:
              metadata:
                datafiles: []
                pagination:
                  currentPage: 0
                  pageSize: 1000
                  totalCount: 1
                  totalPages: 1
                status: []
              result:
                data:
                - attributeCategoryDbId: "1"
                  code: RHT
                  datatype: Categorical
                  description: Allele of marker 11_4769, diagnostic for allele b of reduced-height gene Rht-B1
                  name: Rht-B1b
                  uri: http://www.cropontology.org/rdf/CO_321:0000020
                  values:
                  - Present
                  - Absent
                  - Heterozygous
          headers: {}
          schema:
            type: object
            properties:
              metadata:
                $ref: '#/definitions/metadata'
              result:
                $ref: '#/definitions/germplasmAttributeDefsResponse_result'
            title: germplasmAttributeDefsResponse
  /attributes/categories:
    get:
      tags:
      - Germplasm Attributes
      summary: Germplasm attribute categories
      description: |2-
         Scope: OTHER. Status: ACCEPTED.
        Implementation target date: PAG2016
        List all available attribute categories.
        <a href="https://test-server.brapi.org/brapi/v1/attributes"> test-server.brapi.org/brapi/v1/attributes/categories</a>
      parameters:
      - name: pageSize
        in: query
        description: The size of the pages to be returned. Default is `1000`.
        required: false
        type: integer
      - name: page
        in: query
        description: Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.
        required: false
        type: integer
      responses:
        200:
          description: OK
          examples:
            application/json:
              metadata:
                datafiles: []
                pagination:
                  currentPage: 1
                  pageSize: 10
                  totalCount: 2
                  totalPages: 1
                status: []
              result:
                data:
                - attributeCategoryDbId: "1"
                  name: Morphological
                - attributeCategoryDbId: "2"
                  name: Agronomic
          headers: {}
          schema:
            type: object
            properties:
              metadata:
                $ref: '#/definitions/metadata'
              result:
                $ref: '#/definitions/germplasmAttributeCategoriesResponse_result'
            title: germplasmAttributeCategoriesResponse
  /breedingmethods:
    get:
      tags:
      - Germplasm
      summary: GET List of Breeding Methods
      description: |2-
         Scope: Germplasm
        Get the list of germplasm breeding methods available in a system.
        <a>example.com/brapi/v1/breedingmethods</a>
      produces:
      - application/json
      parameters:
      - name: pageSize
        in: query
        description: The size of the pages to be returned. Default is `1000`.
        required: false
        type: integer
      - name: page
        in: query
        description: Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.
        required: false
        type: integer
      responses:
        200:
          description: OK
          examples:
            application/json:
              metadata:
                datafiles: []
                pagination:
                  currentPage: 0
                  pageSize: 1000
                  totalCount: 2
                  totalPages: 1
                status: []
              result:
                data:
                - abbreviation: MBCR
                  breedingMethodDbId: BM987
                  description: Backcross to recover a specific gene. The coding in the genealogical table records which parent was used as the male in each cycle. Each entity kept separate.
                  name: Male Backcross
                - abbreviation: DSP
                  breedingMethodDbId: BM324
                  description: Derivation through selection of a single plant, inflorescence, fruit or seed from a population
                  name: Single plant selection
          headers: {}
          schema:
            type: object
            properties:
              metadata:
                $ref: '#/definitions/metadata'
              result:
                $ref: '#/definitions/breedingMethodsResponse_result'
            title: breedingMethodsResponse
  /breedingmethods/{breedingMethodDbId}:
    get:
      tags:
      - Germplasm
      summary: GET specific breeding method details
      description: |2-


        <a>example.com/brapi/v1/breedingmethods/{breedingMethodDbId}</a>
      produces:
      - application/json
      parameters:
      - name: breedingMethodDbId
        in: path
        description: Internal database identifier for a breeding method
        required: true
        type: string
      responses:
        200:
          description: OK
          examples:
            application/json:
              metadata:
                datafiles: []
                pagination:
                  currentPage: 0
                  pageSize: 0
                  totalCount: 0
                  totalPages: 0
                status: []
              result:
                abbreviation: MBCR
                breedingMethodDbId: BM987
                description: Backcross to recover a specific gene. The coding in the genealogical table records which parent was used as the male in each cycle. Each entity kept separate.
                name: Male Backcross
          headers: {}
          schema:
            type: object
            properties:
              metadata:
                $ref: '#/definitions/metadata'
              result:
                $ref: '#/definitions/breedingMethod'
            title: breedingMethodResponse
  /calls:
    get:
      tags:
      - Calls
      summary: Call search
      description: "<strong>Implementation Notes</strong>\nHaving a consistent structure\
        \ for the path string of each call is very important for teams to be able\
        \ to connect and find errors. Read more on <a href=\"https://github.com/plantbreeding/API/issues/144\"\
        >Github</a>.\nHere are the rules for the path of each call that should be\
        \ returned\n<ul>       \n  <li>Every word in the call path should match the\
        \ documentation exactly, both in spelling and capitalization. Note that path\
        \ strings are all lower case, but path parameters are camel case.</li>   \
        \     \n  <li>Each path should start relative to '/' and therefore should\
        \ not include '/'</li>\n  <li>No leading or trailing slashes ('/') </li>\n\
        \  <li>Path parameters are wrapped in curly braces ('{}'). The name of the\
        \ path parameter should be spelled exactly as it is specified in the documentation.</li>\
        \        \n</ul>\n<table>\n  <tr>\n    <th>Examples</th>\n  </tr>\n  <tr>\n\
        \    <td><strong>GOOD</strong></td>\n    <td>\"call\": \"germplasm/{germplasmDbId}/markerprofiles\"\
        </td>\n  </tr> \n  <tr>\n    <td>BAD</td>\n    <td>\"call\": \"germplasm/{<strong>id</strong>}/markerprofiles\"\
        </td>\n  </tr> \n  <tr>\n    <td>BAD</td>\n    <td>\"call\": \"germplasm/{germplasmDbId}/marker<strong>P</strong>rofiles\"\
        </td>\n  </tr>\n  <tr>\n    <td>BAD</td>\n    <td>\"call\": \"germplasm/{germplasm<strong>dbid</strong>}/markerprofiles\"\
        </td>\n  </tr> \n  <tr>\n    <td>BAD</td>\n    <td>\"call\": \"<strong>brapi/v1</strong>/germplasm/{germplasmDbId}/markerprofiles\"\
        </td>\n  </tr>\n  <tr>\n    <td>BAD</td>\n    <td>\"call\": \"<strong>/g</strong>ermplasm/{germplasmDbId}/markerprofile<strong>s/</strong>\"\
        </td>\n  </tr> \n  <tr>\n    <td>BAD</td>\n    <td>\"call\": \"germplasm/<strong>&lt</strong>germplasmDbId<strong>&gt</strong>/markerprofiles\"\
        </td>\n  </tr> \n</table>\n\n<a href=\"https://test-server.brapi.org/brapi/v1/calls\"\
        > test-server.brapi.org/brapi/v1/calls</a>"
      produces:
      - application/json
      parameters:
      - name: datatype
        in: query
        description: 'The data format supported by the call. Example: `json`'
        required: false
        type: string
      - name: pageSize
        in: query
        description: The size of the pages to be returned. Default is `1000`.
        required: false
        type: integer
      - name: page
        in: query
        description: Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.
        required: false
        type: integer
      responses:
        200:
          description: OK
          examples:
            application/json:
              metadata:
                datafiles: []
                pagination:
                  currentPage: 0
                  pageSize: 1000
                  totalCount: 8
                  totalPages: 1
              result:
                data:
                - call: token
                  datatypes:
                  - json
                  methods:
                  - POST
                  - DELETE
                  versions:
                  - "1.0"
                  - "1.1"
                - call: calls
                  datatypes:
                  - json
                  methods:
                  - GET
                  versions:
                  - "1.0"
                  - "1.1"
                  - "1.2"
                - call: allelematrix
                  datatypes:
                  - json
                  - tsv
                  methods:
                  - GET
                  - POST
                  versions:
                  - "1.0"
                - call: observationLevels
                  datatypes:
                  - json
                  methods:
                  - GET
                  versions:
                  - "1.0"
                  - "1.1"
                  - "1.2"
                - call: germplasm-search
                  datatypes:
                  - json
                  methods:
                  - GET
                  - POST
                  versions:
                  - "1.0"
                  - "1.1"
                  - "1.2"
                - call: germplasm/{germplasmDbId}
                  datatypes:
                  - json
                  methods:
                  - GET
                  versions:
                  - "1.0"
                  - "1.1"
                  - "1.2"
                - call: germplasm/{germplasmDbId}/pedigree
                  datatypes:
                  - json
                  methods:
                  - GET
                  versions:
                  - "1.1"
                  - "1.2"
                - call: germplasm/{germplasmDbId}/markerprofiles
                  datatypes:
                  - json
                  methods:
                  - GET
                  versions:
                  - "1.1"
                  - "1.2"
          headers: {}
          schema:
            type: object
            properties:
              metadata:
                $ref: '#/definitions/metadata'
              result:
                $ref: '#/definitions/callsResponse_result'
            title: callsResponse
  /commoncropnames:
    get:
      tags:
      - Crops
      summary: List supported crops
      description: "List the common crop names for the crops available in a database\
        \ server. \n\nThis call is **required** for multi-crop systems where data\
        \ from multiple crops may be stored in the same database server. A distinct\
        \ database server is defined by everything in the URL before \"/brapi/v1\"\
        , including host name and base path.  \n\nThis call is recommended for single\
        \ crop systems to be compatible with multi-crop clients. For a single crop\
        \ system the response should contain an array with exactly 1 element. \n\n\
        The common crop name can be used as a search parameter for Programs, Studies,\
        \ and Germplasm.\n\n<a href=\"https://test-server.brapi.org/brapi/v1/commonCropNames\"\
        > test-server.brapi.org/brapi/v1/commonCropNames</a>"
      produces:
      - application/json
      parameters:
      - name: pageSize
        in: query
        description: The size of the pages to be returned. Default is `1000`.
        required: false
        type: integer
      - name: page
        in: query
        description: Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.
        required: false
        type: integer
      responses:
        200:
          description: OK
          examples:
            application/json:
              metadata:
                datafiles: []
                pagination:
                  currentPage: 0
                  pageSize: 1000
                  totalCount: 3
                  totalPages: 1
                status: []
              result:
                data:
                - maize
                - wheat
                - rice
                - potato
          headers: {}
          schema:
            type: object
            properties:
              metadata:
                $ref: '#/definitions/metadata'
              result:
                $ref: '#/definitions/commonCropNamesResponse_result'
            title: commonCropNamesResponse
  /crops:
    get:
      tags:
      - Crops
      - Deprecated
      summary: List supported crops
      description: |-
        For multi crop systems this is a useful call to list all the supported crops.

        <a href="https://test-server.brapi.org/brapi/v1/crops"> test-server.brapi.org/brapi/v1/crops</a>
      produces:
      - application/json
      parameters:
      - name: pageSize
        in: query
        description: The size of the pages to be returned. Default is `1000`.
        required: false
        type: integer
      - name: page
        in: query
        description: Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.
        required: false
        type: integer
      responses:
        200:
          description: OK
          examples:
            application/json:
              metadata:
                datafiles: []
                pagination:
                  currentPage: 0
                  pageSize: 1000
                  totalCount: 3
                  totalPages: 1
                status: []
              result:
                data:
                - maize
                - wheat
                - rice
          headers: {}
          schema:
            type: object
            properties:
              metadata:
                $ref: '#/definitions/metadata'
              result:
                $ref: '#/definitions/commonCropNamesResponse_result'
            title: cropsResponse
      deprecated: true
  /germplasm-search:
    get:
      tags:
      - Germplasm
      - Search Services
      summary: Germplasm search through GET
      description: " Implemented by: GnpIS, Germinate (GET only)\nSee <a href=\"#introduction/search-services\"\
        >Search Services</a> for additional implementation details.\nNotes: The germplasm\
        \ and germplasm MCPD calls were merged.  The MCPD fields are optional and\
        \ indicated as such with the [MCPD] prefix in the description field of the\
        \ \"Response data types\" table. Please use the \"features\" hash of the \"\
        calls\" call to communicate with clients as to whether MCPD is supported by\
        \ your implementation.\nAddresses these needs: 1. General germplasm search\
        \ mechanism that accepts POST for complex queries 2. possibility to search\
        \ germplasm by more parameters than those allowed by the existing germplasm\
        \ search 3. possibility to get MCPD details by PUID rather than dbId\nUse\
        \ GET when parameter size is less than 2K bytes. <a href=\"https://test-server.brapi.org/brapi/v1/germplasm\"\
        > test-server.brapi.org/brapi/v1/germplasm-search</a> "
      produces:
      - application/json
      parameters:
      - name: germplasmPUI
        in: query
        description: Permanent unique identifier (DOI, URI, etc.)
        required: false
        type: string
      - name: germplasmDbId
        in: query
        description: Internal database identifier
        required: false
        type: string
      - name: germplasmName
        in: query
        description: Name of the germplasm
        required: false
        type: string
      - name: commonCropName
        in: query
        description: The common crop name related to this germplasm
        required: false
        type: string
      - name: pageSize
        in: query
        description: The size of the pages to be returned. Default is `1000`.
        required: false
        type: integer
      - name: page
        in: query
        description: Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.
        required: false
        type: integer
      responses:
        200:
          description: OK
          examples:
            application/json:
              metadata:
                datafiles: []
                pagination:
                  currentPage: 0
                  pageSize: 1000
                  totalCount: 2
                  totalPages: 1
                status: []
              result:
                data:
                - accessionNumber: ITC0609
                  acquisitionDate: 1947-01-31
                  biologicalStatusOfAccessionCode: 412
                  commonCropName: banana
                  countryOfOriginCode: UNK
                  defaultDisplayName: Pahang
                  donors:
                  - donorAccessionNumber: ""
                    donorInstituteCode: ""
                    germplasmPUI: ""
                  genus: Musa
                  germplasmDbId: 01BEL084609
                  germplasmName: Pahang
                  germplasmPUI: http://www.crop-diversity.org/mgis/accession/01BEL084609
                  germplasmSeedSource: Female GID:4/Male GID:4
                  instituteCode: 01BEL084
                  instituteName: ITC
                  pedigree: TOBA97/SW90.1057
                  species: acuminata
                  speciesAuthority: ""
                  subtaxa: sp malaccensis var pahang
                  subtaxaAuthority: ""
                  synonyms: []
                  taxonIds:
                  - sourceName: ncbiTaxon
                    taxonId: http://purl.obolibrary.org/obo/NCBITaxon_4641
                  - sourceName: ciradTaxon
                    taxonId: 23-E
                  typeOfGermplasmStorageCode:
                  - 10
                - accessionNumber: ITC0685
                  acquisitionDate: 1977-01-31
                  biologicalStatusOfAccessionCode: 412
                  commonCropName: banana
                  countryOfOriginCode: UNK
                  defaultDisplayName: Pah
                  donors:
                  - donorAccessionNumber: ""
                    donorInstituteCode: ""
                    germplasmPUI: ""
                  genus: Musa
                  germplasmDbId: 03REL084609
                  germplasmName: Pah
                  germplasmPUI: doi:10.15454/328757862534E12
                  germplasmSeedSource: Female GID:4/Male GID:4
                  instituteCode: 01BEL084
                  instituteName: ITC
                  pedigree: TOBA97/SW90.1057
                  species: acuminata
                  speciesAuthority: ""
                  subtaxa: sp malaccensis var pah
                  subtaxaAuthority: ""
                  synonyms: []
                  taxonIds:
                  - sourceName: ncbiTaxon
                    taxonId: http://purl.obolibrary.org/obo/NCBITaxon_4641
                  - sourceName: ciradTaxon
                    taxonId: 23-E
                  typeOfGermplasmStorageCode:
                  - 10
          headers: {}
          schema:
            type: object
            properties:
              metadata:
                $ref: '#/definitions/metadata'
              result:
                $ref: '#/definitions/germplasmResponse_result'
            title: germplasmResponse
    post:
      tags:
      - Germplasm
      - Search Services
      summary: Germplasm search through POST
      description: " Implemented by: GnpIS, Germinate (GET only)\nSee <a href=\"#introduction/search-services\"\
        >Search Services</a> for additional implementation details.\nNotes: The germplasm\
        \ and germplasm MCPD calls were merged.  The MCPD fields are optional and\
        \ indicated as such with the [MCPD] prefix in the description field of the\
        \ \"Response data types\" table. Please use the \"features\" hash of the \"\
        calls\" call to communicate with clients as to whether MCPD is supported by\
        \ your implementation.\nAddresses these needs: 1. General germplasm search\
        \ mechanism that accepts POST for complex queries 2. possibility to search\
        \ germplasm by more parameters than those allowed by the existing germplasm\
        \ search 3. possibility to get MCPD details by PUID rather than dbId\nUse\
        \ POST for large queries (>2K bytes). "
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        required: false
        schema:
          $ref: '#/definitions/germplasmSearchRequest'
      responses:
        200:
          description: OK
          examples:
            application/json:
              metadata:
                datafiles: []
                pagination:
                  currentPage: 1
                  pageSize: 100
                  totalCount: 102
                  totalPages: 2
                status: []
              result:
                data:
                - accessionNumber: ITC0609
                  acquisitionDate: 1947-01-31
                  biologicalStatusOfAccessionCode: 412
                  commonCropName: banana
                  countryOfOriginCode: UNK
                  defaultDisplayName: Pahang
                  donors:
                  - donorAccessionNumber: ""
                    donorInstituteCode: ""
                    germplasmPUI: ""
                  genus: Musa
                  germplasmDbId: 01BEL084609
                  germplasmName: Pahang
                  germplasmPUI: http://www.crop-diversity.org/mgis/accession/01BEL084609
                  germplasmSeedSource: Female GID:4/Male GID:4
                  instituteCode: 01BEL084
                  instituteName: ITC
                  pedigree: TOBA97/SW90.1057
                  species: acuminata
                  speciesAuthority: ""
                  subtaxa: sp malaccensis var pahang
                  subtaxaAuthority: ""
                  synonyms: []
                  taxonIds:
                  - sourceName: ncbiTaxon
                    taxonId: http://purl.obolibrary.org/obo/NCBITaxon_4641
                  - sourceName: ciradTaxon
                    taxonId: 23-E
                  typeOfGermplasmStorageCode:
                  - 10
                - accessionNumber: ITC0685
                  acquisitionDate: 1977-01-31
                  biologicalStatusOfAccessionCode: 412
                  commonCropName: banana
                  countryOfOriginCode: UNK
                  defaultDisplayName: Pah
                  donors:
                  - donorAccessionNumber: ""
                    donorInstituteCode: ""
                    germplasmPUI: ""
                  genus: Musa
                  germplasmDbId: 03REL084609
                  germplasmName: Pah
                  germplasmPUI: doi:10.15454/328757862534E12
                  germplasmSeedSource: Female GID:4/Male GID:4
                  instituteCode: 01BEL084
                  instituteName: ITC
                  pedigree: TOBA97/SW90.1057
                  species: acuminata
                  speciesAuthority: ""
                  subtaxa: sp malaccensis var pah
                  subtaxaAuthority: ""
                  synonyms: []
                  taxonIds:
                  - sourceName: ncbiTaxon
                    taxonId: http://purl.obolibrary.org/obo/NCBITaxon_4641
                  - sourceName: ciradTaxon
                    taxonId: 23-E
                  typeOfGermplasmStorageCode:
                  - 10
          headers: {}
          schema:
            type: object
            properties:
              metadata:
                $ref: '#/definitions/metadata'
              result:
                $ref: '#/definitions/germplasmResponse_result'
            title: germplasmResponse
  /germplasm/{germplasmDbId}:
    get:
      tags:
      - Germplasm
      summary: Germplasm search by germplasmDbId
      description: " Scope: CORE. Status: ACCEPTED.\nImplementation target date: PAG2016\n\
        Implemented by: Tripal Brapi module, Germinate, Cassavabase\nNote: Germplasm\
        \ Details by germplasmDbId was merged with Germplasm Multi Crop Passport Data.\
        \ The MCPD fields are optional and marked with the prefix [MCPD].\n<a href=\"\
        https://test-server.brapi.org/brapi/v1/germplasm\"> test-server.brapi.org/brapi/v1/germplasm/{germplasmDbId}</a> "
      produces:
      - application/json
      parameters:
      - name: germplasmDbId
        in: path
        description: The internal id of the germplasm
        required: true
        type: string
      responses:
        200:
          description: OK
          examples:
            application/json:
              metadata:
                datafiles: []
                pagination:
                  currentPage: 0
                  pageSize: 0
                  totalCount: 0
                  totalPages: 0
                status: []
              result:
                accessionNumber: ITC0609
                acquisitionDate: 1947-01-31
                biologicalStatusOfAccessionCode: 412
                commonCropName: banana
                countryOfOriginCode: UNK
                defaultDisplayName: Pahang
                donors:
                - donorAccessionNumber: ""
                  donorGermplasmPUI: ""
                  donorInstituteCode: ""
                genus: Musa
                germplasmDbId: 01BEL084609
                germplasmName: Pahang
                germplasmPUI: http://www.crop-diversity.org/mgis/accession/01BEL084609
                instituteCode: 01BEL084
                instituteName: ITC
                pedigree: TOBA97/SW90.1057
                seedSource: ITC0609-2016-77
                species: acuminata
                speciesAuthority: ""
                subtaxa: sp malaccensis var pahang
                subtaxaAuthority: ""
                synonyms: []
                taxonIds:
                - sourceName: ncbiTaxon
                  taxonId: http://purl.obolibrary.org/obo/NCBITaxon_4641
                - sourceName: ciradTaxon
                  taxonId: 23-E
                typeOfGermplasmStorageCode:
                - 10
          headers: {}
          schema:
            type: object
            properties:
              metadata:
                $ref: '#/definitions/metadata'
              result:
                $ref: '#/definitions/germplasm'
            title: germplasmResponse
  /germplasm/{germplasmDbId}/attributes:
    get:
      tags:
      - Germplasm Attributes
      - Germplasm
      summary: Germplasm attribute values
      description: |-
        Values for all attributes by default.

        <a href="https://test-server.brapi.org/brapi/v1/germplasm"> test-server.brapi.org/brapi/v1/germplasm/{germplasmDbId}/attributes</a>
      produces:
      - application/json
      parameters:
      - name: germplasmDbId
        in: path
        description: The germplasm characterized
        required: true
        type: string
      - name: attributeDbIds
        in: query
        description: Restrict the response to only the listed attributeDbIds.
        required: false
        type: array
        items:
          type: string
        collectionFormat: multi
      - name: attributeList
        in: query
        description: '**Deprecated** Use "attributeDbIds" instead'
        required: false
        type: array
        items:
          type: string
        collectionFormat: multi
      - name: pageSize
        in: query
        description: The size of the pages to be returned. Default is `1000`.
        required: false
        type: integer
      - name: page
        in: query
        description: Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.
        required: false
        type: integer
      responses:
        200:
          description: OK
          examples:
            application/json:
              metadata:
                datafiles: []
                pagination:
                  currentPage: 0
                  pageSize: 1000
                  totalCount: 1
                  totalPages: 1
                status: []
              result:
                data:
                - attributeCode: RHT
                  attributeDbId: "1"
                  attributeName: Rht-B1b
                  determinedDate: 2007-05-28
                  value: Present
                germplasmDbId: 01BEL084609
          headers: {}
          schema:
            type: object
            properties:
              metadata:
                $ref: '#/definitions/metadata'
              result:
                $ref: '#/definitions/germplasmAttributeList'
            title: germplasmAttributeListResponse
  /germplasm/{germplasmDbId}/markerprofiles:
    get:
      tags:
      - Germplasm
      summary: Markerprofiles by germplasmDbId
      description: " Retrieve the markerProfileDbIds for a given Germplasm ID\nScope:\
        \ GENOTYPING.\nStatus: ACCEPTED.\nImplementation target date: PAG2016\nImplemented\
        \ by: Germinate, Cassavabase\n<a href=\"https://test-server.brapi.org/brapi/v1/germplasm\"\
        > test-server.brapi.org/brapi/v1/germplasm/{germplasmDbId}/markerprofiles</a> "
      parameters:
      - name: germplasmDbId
        in: path
        description: the internal id of the germplasm
        required: true
        type: string
      responses:
        200:
          description: OK
          examples:
            application/json:
              metadata:
                datafiles: []
                pagination:
                  currentPage: 0
                  pageSize: 0
                  totalCount: 0
                  totalPages: 0
                status:
                - code: ""
                  message: ""
              result:
                germplasmDbId: 01BEL084609
                markerprofileDbIds:
                - "3939"
                - "4484"
                - "3993"
          headers: {}
          schema:
            type: object
            properties:
              metadata:
                $ref: '#/definitions/metadata'
              result:
                $ref: '#/definitions/germplasmMarkerprofilesList'
            title: germplasmMarkerprofilesListResponse
  /germplasm/{germplasmDbId}/pedigree:
    get:
      tags:
      - Germplasm
      summary: Germplasm pedigree by id
      description: "\nScope: CORE. Status: ACCEPTED.\nImplementation target date:\
        \ PAG2016\nImplemented by: Germinate, Tripal Brapi Module, Cassavabase (without\
        \ notation option)\n(http://wheat.pw.usda.gov/ggpages/gopher/administration/Template%20for%20Germplasm%20records.html)\
        \ or [Lamacraft] (http://link.springer.com/article/10.1007%2FBF00021556).\n\
        <a href=\"https://test-server.brapi.org/brapi/v1/germplasm\"> test-server.brapi.org/brapi/v1/germplasm/{germplasmDbId}/pedigree</a> "
      parameters:
      - name: germplasmDbId
        in: path
        description: the internal id of the germplasm
        required: true
        type: string
      - name: notation
        in: query
        description: text representation of the pedigree
        required: false
        type: string
      - name: includeSiblings
        in: query
        description: include array of siblings in response
        required: false
        type: boolean
      responses:
        200:
          description: OK
          examples:
            application/json:
              metadata:
                datafiles: []
                pagination:
                  currentPage: 0
                  pageSize: 0
                  totalCount: 0
                  totalPages: 0
                status: []
              result:
                crossingPlan: OPEN_POLLINATION
                crossingYear: "2018"
                defaultDisplayName: Pahang 1
                familyCode: Cree_x_Bonanza_2018
                germplasmDbId: 01BEL084609
                parent1DbId: "166"
                parent1Name: Cree
                parent1Type: FEMALE
                parent2DbId: "143"
                parent2Name: Bonanza
                parent2Type: MALE
                pedigree: Cree / Bonanza
                siblings:
                - defaultDisplayName: Pahang 2
                  germplasmDbId: "383"
                - defaultDisplayName: Pahang 3
                  germplasmDbId: "384"
          headers: {}
          schema:
            type: object
            properties:
              metadata:
                $ref: '#/definitions/metadata'
              result:
                $ref: '#/definitions/pedigree'
            title: pedigreeResponse
  /germplasm/{germplasmDbId}/progeny:
    get:
      tags:
      - Germplasm
      summary: Germplasm pedigree by id
      description: " Scope: Germplasm\nGet the germplasmDbIds for all the Progeny\
        \ of a particular germplasm.\n<a href=\"https://test-server.brapi.org/brapi/v1/germplasm\"\
        > test-server.brapi.org/brapi/v1/germplasm/{germplasmDbId}/progeny</a> "
      parameters:
      - name: germplasmDbId
        in: path
        description: the internal id of the germplasm
        required: true
        type: string
      responses:
        200:
          description: OK
          examples:
            application/json:
              metadata:
                datafiles: []
                pagination:
                  currentPage: 0
                  pageSize: 0
                  totalCount: 0
                  totalPages: 0
                status: []
              result:
                defaultDisplayName: Pahang
                germplasmDbId: "382"
                progeny:
                - defaultDisplayName: Child 1
                  germplasmDbId: "402"
                  parentType: FEMALE
                - defaultDisplayName: Child 2
                  germplasmDbId: "403"
                  parentType: MALE
                - defaultDisplayName: Pahang Selfed
                  germplasmDbId: "405"
                  parentType: SELF
          headers: {}
          schema:
            type: object
            properties:
              metadata:
                $ref: '#/definitions/metadata'
              result:
                $ref: '#/definitions/progeny'
            title: progenyResponse
  /locations:
    get:
      tags:
      - Locations
      description: "\nImplemented by: Germinate\nGet a list of locations.\n* The `countryCode`\
        \ is as per [ISO_3166-1_alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3)\
        \ spec.\n* `altitude` is in meters.\n**Note**: Consider revising to describe\
        \ polygon lat/lan points and check if adopting http://geojson.org/ is worth\
        \ doing for v1. "
      produces:
      - application/json
      parameters:
      - name: locationType
        in: query
        description: Filter by location type specified.
        required: false
        type: string
      - name: pageSize
        in: query
        description: The size of the pages to be returned. Default is `1000`.
        required: false
        type: integer
      - name: page
        in: query
        description: Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.
        required: false
        type: integer
      responses:
        200:
          description: OK
          examples:
            application/json:
              metadata:
                datafiles: []
                pagination:
                  currentPage: 0
                  pageSize: 1000
                  totalCount: 2
                  totalPages: 1
                status: []
              result:
                data:
                - abbreviation: IB
                  additionalInfo:
                    annualMeanRain: value
                    soilDescription: "23"
                  altitude: 12
                  countryCode: NGA
                  countryName: Nigeria
                  instituteAddress: route foo, Clermont Ferrand, France
                  instituteName: INRA - GDEC
                  latitude: -21.5
                  locationDbId: abc123
                  locationType: Breeding Location
                  longitude: 165.5
                  name: Ibadan
                - abbreviation: GO
                  additionalInfo:
                    name1: value1
                    name2: value2
                  altitude: 10
                  countryCode: IND
                  countryName: India
                  latitude: 28.36
                  locationDbId: def456
                  locationType: Storage Location
                  longitude: 77.12
                  name: Goa
          headers: {}
          schema:
            type: object
            properties:
              metadata:
                $ref: '#/definitions/metadata'
              result:
                $ref: '#/definitions/locationsResponse_result'
            title: locationsResponse
  /locations/{locationDbId}:
    get:
      tags:
      - Locations
      summary: The internal DB id for a location
      description: " <strong>Implemented by:</strong>  GnpIS\nGet details for a location.\n\
        * The `countryCode` is as per [ISO_3166-1_alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3)\
        \ spec.\n* `altitude` is in meters. "
      parameters:
      - name: locationDbId
        in: path
        description: The internal DB id for a location
        required: true
        type: string
      responses:
        200:
          description: OK
          examples:
            application/json:
              metadata:
                datafiles: []
                pagination:
                  currentPage: 0
                  pageSize: 0
                  totalCount: 0
                  totalPages: 0
                status: []
              result:
                abbreviation: IB
                abreviation: IB -- DEPRECATED -- see abbreviation
                additionalInfo:
                  annualMeanRain: value
                  soilDescription: "23"
                altitude: 12
                countryCode: NGA
                countryName: Nigeria
                instituteAddress: road foo, nigeria
                instituteName: INRA - GDEC
                latitude: -21.5
                locationDbId: abc123
                locationType: Breeding Location
                longitude: 165.5
                name: Ibadan
          headers: {}
          schema:
            type: object
            properties:
              metadata:
                $ref: '#/definitions/metadata'
              result:
                $ref: '#/definitions/location'
            title: locationResponse
  /maps:
    get:
      tags:
      - Genome Maps
      summary: Get list of maps
      description: |-
        Get list of maps <br>
        <strong>Status:</strong> ACCEPTED <strong>Implemented by:</strong> Germinate, Cassavabase <strong>Used by:</strong> Flapjack do we need list of parents and specify mapping population?
      produces:
      - application/json
      parameters:
      - name: species
        in: query
        description: Species name
        required: false
        type: string
      - name: type
        in: query
        description: Type of map
        required: false
        type: string
      - name: pageSize
        in: query
        description: The size of the pages to be returned. Default is `1000`.
        required: false
        type: integer
      - name: page
        in: query
        description: Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.
        required: false
        type: integer
      responses:
        200:
          description: OK
          examples:
            application/json:
              metadata:
                datafiles: []
                pagination:
                  currentPage: 0
                  pageSize: 1000
                  totalCount: 2
                  totalPages: 1
                status: []
              result:
                data:
                - comments: This map contains ...
                  linkageGroupCount: 7
                  mapDbId: abc123
                  markerCount: 1000
                  name: Some Map
                  publishedDate: 2008-04-16
                  species: Some species
                  type: Genetic
                  unit: cM
                - comments: this is blah blah
                  linkageGroupCount: 7
                  mapDbId: def234
                  markerCount: 1501
                  name: Some Other map
                  publishedDate: 2009-01-12
                  species: Some Species
                  type: Genetic
                  unit: cM
          headers: {}
          schema:
            type: object
            properties:
              metadata:
                $ref: '#/definitions/metadata'
              result:
                $ref: '#/definitions/genomeMapsResponse_result'
            title: genomeMapsResponse
  /maps/{mapDbId}:
    get:
      tags:
      - Genome Maps
      summary: Get map details
      description: |-
        Provides the number of markers on each linkageGroup and the max position on the linkageGroup <br>
        <strong>Status:</strong> ACCEPTED <strong>Implemented by:</strong> Germinate, Cassavabase <strong>Used by:</strong> Flapjack
      produces:
      - application/json
      parameters:
      - name: mapDbId
        in: path
        description: The internal db id of a selected map
        required: true
        type: string
      - name: pageSize
        in: query
        description: The size of the pages to be returned. Default is `1000`.
        required: false
        type: integer
      - name: page
        in: query
        description: Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.
        required: false
        type: integer
      responses:
        200:
          description: OK
          examples:
            application/json:
              metadata:
                datafiles: []
                pagination:
                  currentPage: 0
                  pageSize: 1000
                  totalCount: 2
                  totalPages: 1
                status: []
              result:
                data:
                - linkageGroupName: "1"
                  markerCount: 100000
                  maxPosition: 10000000
                - linkageGroupName: "2"
                  markerCount: 1247
                  maxPosition: 12347889
                linkageGroups:
                - DEPRECATED - Replaced by 'data' in v1.1
                mapDbId: abc123
                name: Some map
                type: Genetic
                unit: cM
          headers: {}
          schema:
            type: object
            properties:
              metadata:
                $ref: '#/definitions/metadata'
              result:
                $ref: '#/definitions/mapDetails'
            title: mapDetailsResponse
  /maps/{mapDbId}/positions:
    get:
      tags:
      - Genome Maps
      summary: Get map data
      description: |-
        markers ordered by linkageGroup and position <br>
        <strong>Status:</strong> ACCEPTED. <strong>Implemented by:</strong> Germinate, Cassavabase <strong>Used by:</strong> Flapjack
      produces:
      - application/json
      parameters:
      - name: mapDbId
        in: path
        description: unique id of the map
        required: true
        type: string
      - name: linkageGroupId
        in: query
        description: <strong>Deprecated</strong> Use linkageGroupName instead
        required: false
        type: string
      - name: linkageGroupName
        in: query
        description: The chromosome identifier or the generic linkage group identifier if the chromosome is not applicable.
        required: false
        type: string
      - name: pageSize
        in: query
        description: The size of the pages to be returned. Default is `1000`.
        required: false
        type: integer
      - name: page
        in: query
        description: Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.
        required: false
        type: integer
      responses:
        200:
          description: OK
          examples:
            application/json:
              metadata:
                datafiles: []
                pagination:
                  currentPage: 0
                  pageSize: 1000
                  totalCount: 2
                  totalPages: 1
                status: []
              result:
                data:
                - linkageGroupName: 1A
                  location: "1000"
                  markerDbId: "1"
                  markerName: marker1
                - linkageGroupName: 1A
                  location: "1001"
                  markerDbId: "2"
                  markerName: marker2
          headers: {}
          schema:
            type: object
            properties:
              metadata:
                $ref: '#/definitions/metadata'
              result:
                $ref: '#/definitions/markersResponse_result'
            title: markersResponse
  /maps/{mapDbId}/positions/{linkageGroupName}:
    get:
      tags:
      - Genome Maps
      summary: Get map data by range on linkageGroup
      description: markers ordered by linkageGroup and position
      produces:
      - application/json
      parameters:
      - name: mapDbId
        in: path
        description: unique id of the map
        required: true
        type: string
      - name: linkageGroupName
        in: path
        description: The chromosome identifier or the generic linkage group identifier if the chromosome is not applicable.
        required: true
        type: string
      - name: min
        in: query
        description: minimum position on linkage group
        required: false
        type: integer
      - name: max
        in: query
        description: maximum position on linkage group
        required: false
        type: integer
      - name: pageSize
        in: query
        description: The size of the pages to be returned. Default is `1000`.
        required: false
        type: integer
      - name: page
        in: query
        description: Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.
        required: false
        type: integer
      responses:
        200:
          description: OK
          examples:
            application/json:
              metadata:
                datafiles: []
                pagination:
                  currentPage: 0
                  pageSize: 1000
                  totalCount: 2
                  totalPages: 1
                status: []
              result:
                data:
                - location: "1000"
                  markerDbId: "1"
                  markerName: marker1
                - location: "1001"
                  markerDbId: "2"
                  markerName: marker2
          headers: {}
          schema:
            type: object
            properties:
              metadata:
                $ref: '#/definitions/metadata'
              result:
                $ref: '#/definitions/markersResponse_1_result'
            title: markersResponse
  /markerprofiles:
    get:
      tags:
      - Marker Profiles
      summary: Retrieve Markerprofile Ids
      description: |-
        <strong>Scope</strong>: GENOTYPING.
        <strong>Status</strong>: ACCEPTED.
        <strong>Implemented by</strong>: Germinate
        <strong>Used by</strong>: Flapjack
        </br>
        For the requested Germplasm Id and/or Extract Id, returns the Markerprofile Id and number of non-missing allele calls (marker/allele pairs).
      produces:
      - application/json
      parameters:
      - name: germplasmDbId
        in: query
        description: The server's internal ids for the Germplasm IDs, as returned by the <strong>Find markerprofile by Germplasm</strong> service.
        required: false
        type: string
      - name: studyDbId
        in: query
        description: The server's internal id for the StudyDbId
        required: false
        type: string
      - name: sampleDbId
        in: query
        description: The server's internal id for the SampleDbId
        required: false
        type: string
      - name: extractDbId
        in: query
        description: The server's internal id for the ExtractDbId
        required: false
        type: string
      - name: pageSize
        in: query
        description: The number of allele call results (marker/allele pairs) to be returned in the response. If multiple experiments are requested, some responses will contain the last results from one experiment followed by the first results from the next.
        required: false
        type: integer
      - name: page
        in: query
        description: Required if `pageSize` is given; and requires that `pageSize` be given. The page indexing starts at 0 (the first page is 'page'=0)
        required: false
        type: integer
      responses:
        200:
          description: OK
          examples:
            application/json:
              metadata:
                datafiles: []
                pagination:
                  currentPage: 0
                  pageSize: 1000
                  totalCount: 2
                  totalPages: 1
                status: []
              result:
                data:
                - analysisMethod: GoldenGate
                  extractDbId: "3939"
                  germplasmDbId: 01BEL084609S
                  markerprofileDbId: "993"
                  resultCount: 1470
                  sampleDbId: "3937"
                  uniqueDisplayName: MyFancyGermplasm
                - analysisMethod: GBS
                  extractDbId: "3939"
                  germplasmDbId: "2374"
                  markerprofileDbId: "994"
                  resultCount: 1470
                  sampleDbId: "1234"
                  uniqueDisplayName: Germplasm2
          headers: {}
          schema:
            type: object
            properties:
              metadata:
                $ref: '#/definitions/metadata'
              result:
                $ref: '#/definitions/markerProfileDescriptionsResponse_result'
            title: markerProfileDescriptionsResponse
  /markerprofiles/{markerprofileDbId}:
    get:
      tags:
      - Marker Profiles
      summary: Alleles By Markerprofile Id
      description: "<strong>Scope</strong>:GENOTYPING.\n<strong>Status</strong>: ACCEPTED.\n\
        <strong>Implemented by</strong>: Germinate, Cassavabase\n</br>\nFor the requested\
        \ markerprofile ID, returns the allele call for each marker. \n[Example](http://malt.pw.usda.gov/t3/wheatplus/markerprofiles/1784_99/count?analysisMethod=GoldenGate)\n\
        </br>\n<strong>Allele encodings</strong>\n\n- Unknown data will by default\
        \ be encoded by \"N\"\n- Homozygotes are returned as a single occurance, e.g.\
        \ AA -> A, GG -> G\n- Phased heterozygotes are by default separated by a pipe\
        \ (\"|\") and unphased heterozygotes are by default separated by a forward\
        \ slash (\"/\")\n- Dominant markers such as DArTs: 1 for present, 0 for absent\n\
        \n<strong>Parameters</strong>\n- If the user would like to use an empty string\
        \ (\"\") for any of the parameters, the value should be set to the reserved\
        \ word \"empty_string\", e.g. sepUnphased=empty_string.\n\n<strong>Open issue:</strong>\n\
        The pages of data will need to be sorted sensibly in order for the\nrequested\
        \ page to be delivered consistently.  By map or genome position?\nAlphabetically?'"
      parameters:
      - name: markerprofileDbId
        in: path
        description: The server's internal id for the markerprofile
        required: true
        type: string
      - name: expandHomozygotes
        in: query
        description: Should homozygotes NOT be collapsed into a single orrucance?
        required: false
        type: boolean
      - name: unknownString
        in: query
        description: The string to use as a representation for missing data or the reserved word "empty_string".
        required: false
        type: string
      - name: sepPhased
        in: query
        description: The string to use as a separator for phased allele calls or the reserved word "empty_string".
        required: false
        type: string
      - name: sepUnphased
        in: query
        description: The string to use as a separator for unphased allele calls or the reserved word "empty_string".
        required: false
        type: string
      - name: pageSize
        in: query
        description: The number of allele call results (marker/allele pairs) to be returned in the response. If multiple experiments are requested, some responses will contain the last results from one experiment followed by the first results from the next.
        required: false
        type: integer
      - name: page
        in: query
        description: Required if `pageSize` is given; and requires that `pageSize` be given. The page indexing starts at 0 (the first page is 'page'=0)
        required: false
        type: integer
      responses:
        200:
          description: OK
          examples:
            application/json:
              metadata:
                datafiles: []
                pagination:
                  currentPage: 0
                  pageSize: 22
                  totalCount: 22
                  totalPages: 1
                status: []
              result:
                analysisMethod: GBS
                data:
                - marker1-1: "1"
                - marker1-2: "0"
                - marker1-3: "0"
                - marker1-4: "0"
                - marker1-5: "0"
                - marker1-6: "1"
                - marker1-7: "0"
                - marker1-8: "0"
                - marker1-9: "0"
                - marker1-10: "1"
                - marker1-11: "0"
                - marker2-1: "0"
                - marker2-2: "1"
                - marker2-3: "1"
                - marker2-4: "1"
                - marker2-5: "0"
                - marker3-1: "1"
                - marker3-2: "1"
                - marker3-3: "0"
                - marker3-4: "0"
                - marker3-5: "0"
                - marker3-6: "0"
                extractDbId: extract1
                germplasmDbId: "1"
                markerprofileDbId: "993"
                uniqueDisplayName: My Fancy Germplasm
          headers: {}
          schema:
            type: object
            properties:
              metadata:
                $ref: '#/definitions/metadata'
              result:
                $ref: '#/definitions/markerProfile'
            title: markerProfilesResponse
  /markers:
    get:
      tags:
      - Markers
      - Deprecated
      summary: Markers Search (/markers)
      description: " Scope: CORE.  Status: ACCEPTED.\nImplemented by: Germinate\n\
        See <a href=\"#introduction/search-services\">Search Services</a> for additional\
        \ implementation details.\nOther service requests use the servers internal\
        \ `markerDbId`. This service returns marker records that provide the markerDbId.\
        \ For the requested name or synonym, returns an array (possibly empty) of\
        \ marker records that match the search criteria. - If there is none, an empty\
        \ array is returned. - If there is one or more than one match, returns an\
        \ array of all marker records that match the search criteria. "
      produces:
      - application/json
      parameters:
      - name: name
        in: query
        description: The name or synonym.
        required: false
        type: string
      - name: matchMethod
        in: query
        description: |-
          Possible values are 'case_insensitive', 'exact'
          (case sensitive), 'wildcard' (which is case insensitive). Wildcard uses both '*' and '%' for any number of characters
          and '?' for one character matching. Default is exact.
        required: false
        type: string
      - name: include
        in: query
        description: Whether to include synonyms in the output.
        required: false
        type: string
      - name: type
        in: query
        description: The type of the marker.
        required: false
        type: string
      - name: pageSize
        in: query
        description: The size of the pages to be returned. Default is `1000`.
        required: false
        type: integer
      - name: page
        in: query
        description: Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.
        required: false
        type: integer
      responses:
        200:
          description: OK
          examples:
            application/json:
              metadata:
                data:
                - analysisMethods:
                  - illumina
                  - kasp
                  defaultDisplayName: 11_10002
                  markerDbId: "1185"
                  refAlt:
                  - A
                  - T
                  synonyms:
                  - i_11_10002
                  - POPA1_0002
                  type: SNP
                - analysisMethods:
                  - illumina
                  - kasp
                  defaultDisplayName: 11_11159
                  markerDbId: "1186"
                  refAlt:
                  - A
                  - T
                  synonyms:
                  - i_11_11159
                  - POPA1_1159
                  type: SNP
                datafiles: []
                pagination:
                  currentPage: 0
                  pageSize: 1000
                  totalCount: 2
                  totalPages: 1
                status: []
          headers: {}
          schema:
            type: object
            properties:
              metadata:
                $ref: '#/definitions/metadata'
              result:
                $ref: '#/definitions/markersResponse_2_result'
            title: markersResponse
      deprecated: true
  /markers-search:
    get:
      tags:
      - Markers
      summary: Markers Search (GET)
      description: " Scope: CORE.  Status: ACCEPTED.\nImplemented by: Germinate\n\
        See <a href=\"#introduction/search-services\">Search Services</a> for additional\
        \ implementation details.\nOther service requests use the servers internal\
        \ `markerDbId`. This service returns marker records that provide the markerDbId.\
        \ For the requested name or synonym, returns an array (possibly empty) of\
        \ marker records that match the search criteria. - If there is none, an empty\
        \ array is returned. - If there is one or more than one match, returns an\
        \ array of all marker records that match the search criteria. "
      produces:
      - application/json
      parameters:
      - name: markerDbIds
        in: query
        description: The database IDs of the markers to search for
        required: false
        type: array
        items:
          type: string
        collectionFormat: multi
      - name: name
        in: query
        description: 'The search pattern for a marker name or synonym. Examples: "11_10002"
          "11_1%" "11_1*" "11_10?02"'
        required: false
        type: string
      - name: matchMethod
        in: query
        description: |-
          Possible values are 'case_insensitive', 'exact'
          (case sensitive), 'wildcard' (which is case insensitive). Wildcard uses both '*' and '%' for any number of characters
          and '?' for one character matching. Default is exact.
        required: false
        type: string
      - name: includeSynonyms
        in: query
        description: Whether to include synonyms in the output.
        required: false
        type: boolean
      - name: type
        in: query
        description: The type of the marker.
        required: false
        type: string
      - name: pageSize
        in: query
        description: The size of the pages to be returned. Default is `1000`.
        required: false
        type: integer
      - name: page
        in: query
        description: Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.
        required: false
        type: integer
      responses:
        200:
          description: OK
          examples:
            application/json:
              metadata:
                datafiles: []
                pagination:
                  currentPage: 0
                  pageSize: 1000
                  totalCount: 2
                  totalPages: 1
                status: []
              result:
                data:
                - analysisMethods:
                  - illumina
                  - kasp
                  defaultDisplayName: 11_10002
                  markerDbId: "1185"
                  refAlt:
                  - A
                  - T
                  synonyms:
                  - i_11_10002
                  - POPA1_0002
                  type: SNP
                - analysisMethods:
                  - illumina
                  - kasp
                  defaultDisplayName: 11_11159
                  markerDbId: "1186"
                  refAlt:
                  - A
                  - T
                  synonyms:
                  - i_11_11159
                  - POPA1_1159
                  type: SNP
          headers: {}
          schema:
            type: object
            properties:
              metadata:
                $ref: '#/definitions/metadata'
              result:
                $ref: '#/definitions/markersResponse_2_result'
            title: markersResponse
    post:
      tags:
      - Markers
      summary: Markers Search (POST)
      description: " Scope: CORE.  Status: ACCEPTED.\nImplemented by: Germinate\n\
        See <a href=\"#introduction/search-services\">Search Services</a> for additional\
        \ implementation details.\nOther service requests use the servers internal\
        \ `markerDbId`. This service returns marker records that provide the markerDbId.\
        \ For the requested name or synonym, returns an array (possibly empty) of\
        \ marker records that match the search criteria. - If there is none, an empty\
        \ array is returned. - If there is one or more than one match, returns an\
        \ array of all marker records that match the search criteria. "
      produces:
      - application/json
      parameters:
      - in: body
        name: markerDbIds
        description: The database IDs of the markers to search for
        required: false
        schema:
          $ref: '#/definitions/markersSearchRequest'
      responses:
        200:
          description: OK
          examples:
            application/json:
              metadata:
                datafiles: []
                pagination:
                  currentPage: 0
                  pageSize: 1000
                  totalCount: 2
                  totalPages: 1
                status: []
              result:
                data:
                - analysisMethods:
                  - illumina
                  - kasp
                  defaultDisplayName: 11_10002
                  markerDbId: "1185"
                  refAlt:
                  - A
                  - T
                  synonyms:
                  - i_11_10002
                  - POPA1_0002
                  type: SNP
                - analysisMethods:
                  - illumina
                  - kasp
                  defaultDisplayName: 11_11159
                  markerDbId: "1186"
                  refAlt:
                  - A
                  - T
                  synonyms:
                  - i_11_11159
                  - POPA1_1159
                  type: SNP
          headers: {}
          schema:
            type: object
            properties:
              metadata:
                $ref: '#/definitions/metadata'
              result:
                $ref: '#/definitions/markersResponse_2_result'
            title: markersResponse
  /markers/{markerDbId}:
    get:
      tags:
      - Markers
      summary: Marker Details by id
      description: "<strong>Status</strong>: ACCEPTED \n<strong>Implemented By</strong>:"
      parameters:
      - name: markerDbId
        in: path
        description: the internal id of the marker
        required: true
        type: string
      responses:
        200:
          description: OK
          examples:
            application/json:
              metadata:
                datafiles: []
                pagination:
                  currentPage: 0
                  pageSize: 0
                  totalCount: 0
                  totalPages: 0
                status: []
              result:
                analysisMethods:
                - illumina
                - kasp
                defaultDisplayName: 11_10002
                markerDbId: "1185"
                refAlt:
                - A
                - T
                synonyms:
                - i_11_10002
                - POPA1_0002
                type: SNP
          headers: {}
          schema:
            type: object
            properties:
              metadata:
                $ref: '#/definitions/metadata'
              result:
                $ref: '#/definitions/marker'
            title: markerResponse
  /observationLevels:
    get:
      tags:
      - Observations
      - Deprecated
      summary: <strong>Deprecated</strong> List observation levels
      description: ' Call to retrieve the list of supported observation levels. Observation
        levels indicate the granularity level at which the measurements are taken.
        The values are used to supply the `observationLevel` parameter in the observation
        unit details call. '
      produces:
      - application/json
      parameters:
      - name: pageSize
        in: query
        description: The size of the pages to be returned. Default is `1000`.
        required: false
        type: integer
      - name: page
        in: query
        description: Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.
        required: false
        type: integer
      responses:
        200:
          description: OK
          examples:
            application/json:
              metadata:
                datafiles: []
                pagination:
                  currentPage: 0
                  pageSize: 1000
                  totalCount: 2
                  totalPages: 1
                status: []
              result:
                data:
                - plant
                - plot
          headers: {}
          schema:
            type: object
            properties:
              metadata:
                $ref: '#/definitions/metadata'
              result:
                $ref: '#/definitions/observationLevelsResponse_result'
            title: observationLevelsResponse
      deprecated: true
  /observationlevels:
    get:
      tags:
      - Observations
      summary: Get Observation Levels
      description: |2-
         Call to retrieve the list of supported observation levels. Observation levels indicate the granularity level at which the measurements are taken. The values are used to supply the `observationLevel` parameter in the observation unit details call.
        <a href="https://test-server.brapi.org/brapi/v1/observationlevels"> test-server.brapi.org/brapi/v1/observationlevels</a>
      produces:
      - application/json
      parameters:
      - name: pageSize
        in: query
        description: The size of the pages to be returned. Default is `1000`.
        required: false
        type: integer
      - name: page
        in: query
        description: Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.
        required: false
        type: integer
      responses:
        200:
          description: OK
          examples:
            application/json:
              metadata:
                datafiles: []
                pagination:
                  currentPage: 0
                  pageSize: 1000
                  totalCount: 2
                  totalPages: 1
                status: []
              result:
                data:
                - plant
                - plot
          headers: {}
          schema:
            type: object
            properties:
              metadata:
                $ref: '#/definitions/metadata'
              result:
                $ref: '#/definitions/observationLevelsResponse_result'
            title: observationLevelsResponse
  /ontologies:
    get:
      tags:
      - Observation Variables
      summary: Variable ontology list
      description: "Call to retrieve a list of observation variable ontologies available\
        \ in the system. <br>\n<strong>Scope:</strong> CORE. \n<strong>Status:</strong>\
        \ ACCEPTED."
      produces:
      - application/json
      parameters:
      - name: pageSize
        in: query
        description: The size of the pages to be returned. Default is `1000`.
        required: false
        type: integer
      - name: page
        in: query
        description: Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.
        required: false
        type: integer
      responses:
        200:
          description: OK
          examples:
            application/json:
              metadata:
                datafiles: []
                pagination:
                  currentPage: 0
                  pageSize: 1000
                  totalCount: 2
                  totalPages: 1
                status: []
              result:
                data:
                - authors: J. Snow, H. Peterson
                  copyright: 2016, INRA
                  description: developped for European genetic studies projects
                  licence: CC BY-SA 4.0
                  ontologyDbId: CO_334
                  ontologyName: Wheat ontology
                  version: v1.2
                - authors: J. Doe
                  copyright: 2017, IRRI
                  description: developped for IRRI and amended with partners needs
                  licence: CC BY-SA 4.0
                  ontologyDbId: CO_335
                  ontologyName: Rice ontology
                  version: v2
          headers: {}
          schema:
            type: object
            properties:
              metadata:
                $ref: '#/definitions/metadata'
              result:
                $ref: '#/definitions/ontologiesResponse_result'
            title: ontologiesResponse
  /phenotypes:
    post:
      tags:
      - Phenotypes
      - Observations
      summary: Save Observation Unit Phenotypes
      description: "Scope: PHENOTYPING. \n\nNotes: \nAlong with the study specific\
        \ phenotype saving calls (in the observationUnit and table formats), this\
        \ call allows phenotypes to be saved and images to optionally be transferred\
        \ as well.\n      \nCall to invoke for saving the measurements (observations)\
        \ collected\nfrom field for all the observation units.\nObservation timestamp\
        \ should be ISO 8601 https://www.w3.org/TR/NOTE-datetime\nIn case where JSON\
        \ data is zipped for faster transfer speed (as in the case\nof the IRRI handheld\
        \ implementation), the zipped JSON file will be listed\nin datafiles. The\
        \ zipped file contains a JSON file with the same structure\nas the BrAPI call.\
        \ In this case a format parameter should be passed as well.\nImages can be\
        \ optionally be uploaded using this call by providing a zipfile\nof all images\
        \ in the datafiles, along with the actual zipfile in multi-part\nform data."
      produces:
      - application/json
      parameters:
      - name: format
        in: query
        description: In case where JSON data is zipped for faster transfer speed (as in the case of the IRRI handheld implementation), the zipped JSON file will be listed in datafiles. The zipped file contains a JSON file with the same structure as the BrAPI call.
        required: false
        type: string
        enum:
        - json
        - zip
      - in: body
        name: body
        required: false
        schema:
          $ref: '#/definitions/phenotypesRequest'
      responses:
        200:
          description: OK
          examples:
            metadata:
              datafiles: []
              pagination:
                currentPage: 0
                pageSize: 0
                totalCount: 0
                totalPages: 0
              status: []
            result:
              observations:
              - observationDbId: "153453453"
                observationUnitDbId: "333888"
                observationVariableDbId: "18020"
              - observationDbId: "23456"
                observationUnitDbId: "333888"
                observationVariableDbId: "18021"
              - observationDbId: "34567"
                observationUnitDbId: "333888"
                observationVariableDbId: "18022"
          headers: {}
          schema:
            type: object
            properties:
              metadata:
                $ref: '#/definitions/metadata'
              result:
                $ref: '#/definitions/newObservationDbIds'
            title: newObservationDbIdsResponse
        400:
          description: Bad Request
          examples: {}
          headers: {}
  /phenotypes-search:
    get:
      tags:
      - Phenotypes
      - Search Services
      summary: Phenotype Search
      description: "Scope: PHENOTYPING.\nStatus: ACCEPTED.\n\nReturns a list of observationUnit\
        \ with the observed Phenotypes.\n\nSee <a href=\"#introduction/search-services\"\
        >Search Services</a> for additional implementation details.\n\nImplemented\
        \ for GnpIS and PHIS data (https://urgi.versailles.inra.fr/ws/webresources/brapi/v1/phenotypes).\
        \ \nUse case: this section allows to get a dataset from multiple studies.\
        \ It allows to integrate data from several databases.\nRefactor note : This\
        \ call allows to get and integrate portions of multiple phenotyping data matrixes.\
        \ A proposed evolution allowed to get a list of single observations, this\
        \ functionality is still possible with this call by specifybing the observation\
        \ variable, see below.\nExample Use cases:\n- Study a panel of germplasm accross\
        \ multiple studies, search parameters : {\"germplasmDbIds\" : [ \"Syrah\"\
        , \"34Mtp362\" ]}\n- Get all data for a specific study : {\"studyDbIds\" :\
        \ [ \"383\" ]}\n- Get simple atomic phenotyping values : {\"germplasmDbIds\"\
        \ : [ \"Syrah\", \"34Mtp362\" ], \"observationVariableDbIds\" : [ \"CO_345:0000043\"\
        ]}\n- Study Locations for adaptation to climat change : {\"locationDbIds\"\
        \ : [ \"383838\", \"MONTPELLIER\" ], \"germplasmDbIds\" : [ \"all ids for\
        \ a given species\"]}\n- Find phenotypes that are from after a certain timestamp\n\
        \nobservationTimeStamp : Iso Standard 8601.\n\nobservationValue data type\
        \ inferred from the ontology"
      produces:
      - application/json
      parameters:
      - name: germplasmDbId
        in: query
        description: The name or synonym of external genebank accession identifiers
        required: false
        type: string
      - name: observationVariableDbId
        in: query
        description: The ID of traits, could be ontology ID, database ID or PUI
        required: false
        type: string
      - name: studyDbId
        in: query
        description: The database ID / PK of the studies search parameter
        required: false
        type: string
      - name: locationDbId
        in: query
        description: locations these traits were collected
        required: false
        type: string
      - name: trialDbId
        in: query
        description: trial to search across
        required: false
        type: string
      - name: programDbId
        in: query
        description: program that have phenotyped this trait
        required: false
        type: string
      - name: seasonDbId
        in: query
        description: The year or Phenotyping campaign of a multi-annual study (trees, grape, ...)
        required: false
        type: string
      - name: observationLevel
        in: query
        description: The type of the observationUnit. Returns only the observation unit of the specified type; the parent levels ID can be accessed through observationUnitStructure.
        required: false
        type: string
      - name: observationTimeStampRangeStart
        in: query
        description: Timestamp range start
        required: false
        type: string
        format: date-time
      - name: observationTimeStampRangeEnd
        in: query
        description: Timestamp range end
        required: false
        type: string
        format: date-time
      - name: pageSize
        in: query
        description: The size of the pages to be returned. Default is 1000.
        required: false
        type: integer
      - name: page
        in: query
        description: Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is 0.
        required: false
        type: integer
      responses:
        200:
          description: OK
          examples:
            application/json:
              metadata:
                datafiles: []
                pagination:
                  currentPage: 0
                  pageSize: 100
                  totalCount: 2
                  totalPages: 1
                status: []
              result:
                data:
                - X: "5"
                  Y: "15"
                  blockNumber: "2"
                  entryNumber: "4"
                  entryType: check
                  germplasmDbId: doi:10.155454/12349537E12
                  germplasmName: IR-8
                  observationLevel: plot
                  observationLevels: bloc:2,subBloc:1,plot:2016-Maugio-34-575-abc-123
                  observationUnitDbId: 2016-Maugio-34-575-abc-123
                  observationUnitName: 2016-Maugio-34-575
                  observationUnitXref:
                  - id: SAMEA179865230
                    source: biosampleEBI
                  - id: INRA:CoeSt6 _SMH03
                    source: gnpis.lot
                  - id: "239865"
                    source: kernelDB
                  observations:
                  - collector: Mr. Technician
                    observationDbId: "153453453"
                    observationTimeStamp: 2015-06-16T08:53:26.000Z
                    observationVariableDbId: CO_321:0000045
                    observationVariableName: Plant_height
                    season: "2015"
                    value: "45"
                  - collector: Mr. Technician
                    observationDbId: "23453454345"
                    observationTimeStamp: 2015-06-16T08:53:26.000Z
                    observationVariableDbId: CO_321:0000996
                    observationVariableName: GW100_g
                    season: "2015"
                    value: "3"
                  plantNumber: "0"
                  plotNumber: 2016-Maugio-34-575-abc-123
                  programName: Whealbi
                  replicate: "0"
                  studyDbId: YieldStudy2015-5
                  studyLocation: Montpellier
                  studyLocationDbId: mtp-north-32
                  studyName: Yield wheat 2015
                  treatments:
                  - factor: water regimen
                    modality: water deficit
                - X: "6"
                  Y: "15"
                  blockNumber: "3"
                  entryNumber: "7"
                  entryType: test
                  germplasmDbId: doi:10.155499/12349537E00
                  germplasmName: ZE-45
                  observationLevel: plant
                  observationLevels: bloc:2,subBloc:1,plot:2016-Maugio-34-575-abc-123
                  observationUnitDbId: "45204"
                  observationUnitName: 2010-Cornell-37-99
                  observations:
                  - collector: Mr. Technician
                    observationDbId: "153453453"
                    observationTimeStamp: 2010-06-16T08:53:26.000Z
                    observationVariableDbId: CO_321:0000045
                    observationVariableName: Plant_height
                    season: "2010"
                    value: "45"
                  - collector: Mr. Technician
                    observationDbId: "23453454345"
                    observationTimeStamp: 2010-06-16T08:53:26.000Z
                    observationVariableDbId: CO_321:0000996
                    observationVariableName: GW100_g
                    season: "2010"
                    value: "3"
                  plantNumber: "45204"
                  plotNumber: 2016-Maugio-34-575-abc-123
                  programName: Wheat for futur
                  replicate: "2"
                  studyDbId: YieldStudy2010-5
                  studyLocation: Cornell
                  studyLocationDbId: "88484"
                  studyName: Yield wheat 2010
                  treatments: []
          headers: {}
          schema:
            type: object
            properties:
              metadata:
                $ref: '#/definitions/metadata'
              result:
                $ref: '#/definitions/observationUnitsResponse_result'
            title: observationUnitsResponse
    post:
      tags:
      - Phenotypes
      - Search Services
      summary: Phenotype Search
      description: "Scope: PHENOTYPING.\nStatus: ACCEPTED.\n\nReturns a list of observationUnit\
        \ with the observed Phenotypes.\n\nSee <a href=\"#introduction/search-services\"\
        >Search Services</a> for additional implementation details.\n\nImplemented\
        \ for GnpIS and PHIS data (https://urgi.versailles.inra.fr/ws/webresources/brapi/v1/phenotypes).\
        \ \nUse case: this section allows to get a dataset from multiple studies.\
        \ It allows to integrate data from several databases.\nRefactor note : This\
        \ call allows to get and integrate portions of multiple phenotyping data matrixes.\
        \ A proposed evolution allowed to get a list of single observations, this\
        \ functionality is still possible with this call by specifybing the observation\
        \ variable, see below.\nExample Use cases:\n- Study a panel of germplasm accross\
        \ multiple studies, search parameters : {\"germplasmDbIds\" : [ \"Syrah\"\
        , \"34Mtp362\" ]}\n- Get all data for a specific study : {\"studyDbIds\" :\
        \ [ \"383\" ]}\n- Get simple atomic phenotyping values : {\"germplasmDbIds\"\
        \ : [ \"Syrah\", \"34Mtp362\" ], \"observationVariableDbIds\" : [ \"CO_345:0000043\"\
        ]}\n- Study Locations for adaptation to climat change : {\"locationDbIds\"\
        \ : [ \"383838\", \"MONTPELLIER\" ], \"germplasmDbIds\" : [ \"all ids for\
        \ a given species\"]}\n- Find phenotypes that are from after a certain timestamp\n\
        \nobservationTimeStamp : Iso Standard 8601.\n\nobservationValue data type\
        \ inferred from the ontology"
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        required: false
        schema:
          $ref: '#/definitions/phenotypesSearchRequest'
      responses:
        200:
          description: OK
          examples:
            application/json:
              metadata:
                datafiles: []
                pagination:
                  currentPage: 0
                  pageSize: 100
                  totalCount: 2
                  totalPages: 1
                status: []
              result:
                data:
                - X: "5"
                  Y: "15"
                  blockNumber: "2"
                  entryNumber: "4"
                  entryType: check
                  germplasmDbId: doi:10.155454/12349537E12
                  germplasmName: IR-8
                  observationLevel: plot
                  observationLevels: bloc:2,subBloc:1,plot:2016-Maugio-34-575-abc-123
                  observationUnitDbId: 2016-Maugio-34-575-abc-123
                  observationUnitName: 2016-Maugio-34-575
                  observationUnitXref:
                  - id: SAMEA179865230
                    source: biosampleEBI
                  - id: INRA:CoeSt6 _SMH03
                    source: gnpis.lot
                  - id: "239865"
                    source: kernelDB
                  observations:
                  - collector: Mr. Technician
                    observationDbId: "153453453"
                    observationTimeStamp: 2015-06-16T08:53:26.000Z
                    observationVariableDbId: CO_321:0000045
                    observationVariableName: Plant_height
                    season: "2015"
                    value: "45"
                  - collector: Mr. Technician
                    observationDbId: "23453454345"
                    observationTimeStamp: 2015-06-16T08:53:26.000Z
                    observationVariableDbId: CO_321:0000996
                    observationVariableName: GW100_g
                    season: "2015"
                    value: "3"
                  plantNumber: "0"
                  plotNumber: 2016-Maugio-34-575-abc-123
                  programName: Whealbi
                  replicate: "0"
                  studyDbId: YieldStudy2015-5
                  studyLocation: Montpellier
                  studyLocationDbId: mtp-north-32
                  studyName: Yield wheat 2015
                  treatments:
                  - factor: water regimen
                    modality: water deficit
                - X: "6"
                  Y: "15"
                  blockNumber: "3"
                  entryNumber: "7"
                  entryType: test
                  germplasmDbId: doi:10.155499/12349537E00
                  germplasmName: ZE-45
                  observationLevel: plant
                  observationLevels: bloc:2,subBloc:1,plot:2016-Maugio-34-575-abc-123
                  observationUnitDbId: "45204"
                  observationUnitName: 2010-Cornell-37-99
                  observations:
                  - collector: Mr. Technician
                    observationDbId: "153453453"
                    observationTimeStamp: 2010-06-16T08:53:26.000Z
                    observationVariableDbId: CO_321:0000045
                    observationVariableName: Plant_height
                    season: "2010"
                    value: "45"
                  - collector: Mr. Technician
                    observationDbId: "23453454345"
                    observationTimeStamp: 2010-06-16T08:53:26.000Z
                    observationVariableDbId: CO_321:0000996
                    observationVariableName: GW100_g
                    season: "2010"
                    value: "3"
                  plantNumber: "45204"
                  plotNumber: 2016-Maugio-34-575-abc-123
                  programName: Wheat for futur
                  replicate: "2"
                  studyDbId: YieldStudy2010-5
                  studyLocation: Cornell
                  studyLocationDbId: "88484"
                  studyName: Yield wheat 2010
                  treatments: []
          headers: {}
          schema:
            type: object
            properties:
              metadata:
                $ref: '#/definitions/metadata'
              result:
                $ref: '#/definitions/observationUnitsResponse_result'
            title: observationUnitsResponse
  /phenotypes-search/csv:
    post:
      tags:
      - Phenotypes
      - Search Services
      summary: Phenotype Search CSV
      description: "Scope: PHENOTYPING.\nStatus: ACCEPTED.\n\nReturns a list of observationUnit\
        \ with the observed Phenotypes.\n      \nobservationTimeStamp : Iso Standard\
        \ 8601.\n\nobservationValue data type inferred from the ontology"
      produces:
      - text/csv
      parameters:
      - in: body
        name: body
        required: false
        schema:
          $ref: '#/definitions/phenotypesSearchRequest'
      responses:
        200:
          description: OK
          examples:
            text/csv: |-
              "year","studyDbId","studyName","locationDbId","locationName","germplasmDbId","germplasmName","observationUnitDbId","plotNumber","replicate","blockNumber", "entryType", "X", "Y", "variableDbId1", "variableDbId2", "variableDbId3"
              "2015", "YieldStudy2015-5", "Yield wheat 2015", "mtp-north-32", "Montpellier", "doi:10.155454/12349537E12", "IR-8", "2016-Maugio-34-575-abc-123", "120", "", "2", "", "5", "15", "45", "3", "10"
              "2016", "YieldStudy2016-5", "Yield wheat 2016", "mtp-north-32", "Montpellier", "doi:10.155454/12349537E13", "IR-8", "2016-Maugio-34-575-abc-124", "120", "", "2", "", "5", "15", "47", "4", "11"
          headers: {}
          schema:
            type: string
  /phenotypes-search/table:
    post:
      tags:
      - Phenotypes
      - Search Services
      summary: Phenotype Search Table
      description: "Scope: PHENOTYPING.\nStatus: ACCEPTED.\n\nReturns a list of observationUnit\
        \ with the observed Phenotypes.\n      \nobservationTimeStamp : Iso Standard\
        \ 8601.\n\nobservationValue data type inferred from the ontology"
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        required: false
        schema:
          $ref: '#/definitions/phenotypesSearchRequest'
      responses:
        200:
          description: OK
          examples:
            application/json:
              metadata:
                datafiles: []
                pagination:
                  currentPage: 0
                  pageSize: 1000
                  totalCount: 2
                  totalPages: 1
                status: []
              result:
                data:
                - - "2017"
                  - stu1
                  - Study Name
                  - loc1
                  - Location Name
                  - CIP1
                  - CIP Name
                  - abc123
                  - 1
                  - 1
                  - 1
                  - 2017-06-16T00:53:26Z
                  - Test Entry
                  - "1"
                  - "2"
                  - "25.3"
                  - "103.4"
                  - "50.75"
                - - "2017"
                  - stu1
                  - Study Name
                  - loc1
                  - Location Name
                  - CIP1
                  - CIP Name
                  - abc124
                  - 1
                  - 1
                  - 1
                  - 2017-06-16T00:54:57Z
                  - Test Entry
                  - "2"
                  - "2"
                  - "27.9"
                  - "98.65"
                  - "45.345"
                headerRow:
                - year
                - studyDbId
                - studyName
                - locationDbId
                - locationName
                - germplasmDbId
                - germplasmName
                - observationUnitDbId
                - plotNumber
                - replicate
                - blockNumber
                - observationTimestamp
                - entryType
                - X
                - Y
                observationVariableDbIds:
                - variable1DbId
                - variable2DbId
                - variable3DbId
                observationVariableNames:
                - plant height
                - fruit weight
                - root weight
          headers: {}
          schema:
            type: object
            properties:
              metadata:
                $ref: '#/definitions/metadata'
              result:
                $ref: '#/definitions/observationUnitsTableResponse'
            title: observationUnitsTableResponse
  /phenotypes-search/tsv:
    post:
      tags:
      - Phenotypes
      - Search Services
      summary: Phenotype Search TSV
      description: "Scope: PHENOTYPING.\nStatus: ACCEPTED.\n\nReturns a list of observationUnit\
        \ with the observed Phenotypes.\n      \nobservationTimeStamp : Iso Standard\
        \ 8601.\n\nobservationValue data type inferred from the ontology"
      produces:
      - text/csv
      parameters:
      - in: body
        name: body
        required: false
        schema:
          $ref: '#/definitions/phenotypesSearchRequest'
      responses:
        200:
          description: OK
          examples:
            text/csv: |-
              "year"    "studyDbId"    "studyName"    "locationDbId"    "locationName"    "germplasmDbId"    "germplasmName"    "observationUnitDbId"    "plotNumber"    "replicate"    "blockNumber"    "entryType"    "X"    "Y"     "variableDbId1"    "variableDbId2"    "variableDbId3"
              "2015"    "YieldStudy2015-5"    "Yield wheat 2015"    "mtp-north-32"    "Montpellier"    "doi:10.155454/12349537E12"    "IR-8"    "2016-Maugio-34-575-abc-123"    "120"    ""    "2"    ""    "5"    "15"    "45"    "3"    "10"
              "2016"    "YieldStudy2016-5"    "Yield wheat 2016"    "mtp-north-32"    "Montpellier"    "doi:10.155454/12349537E13"    "IR-8"    "2016-Maugio-34-575-abc-124"    "120"    ""    "2"    ""    "5"    "15"    "47"    "4"    "11"
          headers: {}
          schema:
            type: string
  /programs:
    get:
      tags:
      - Programs
      summary: List programs
      description: |2-
         Call to retrieve a list of programs.
        Status: ACCEPTED Implemented By:
        <a href="https://test-server.brapi.org/brapi/v1/programs"> test-server.brapi.org/brapi/v1/programs</a>
      produces:
      - application/json
      parameters:
      - name: programName
        in: query
        description: Filter by program name. Exact match.
        required: false
        type: string
      - name: abbreviation
        in: query
        description: Filter by program abbreviation. Exact match.
        required: false
        type: string
      - name: pageSize
        in: query
        description: The size of the pages to be returned. Default is `1000`.
        required: false
        type: integer
      - name: page
        in: query
        description: Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.
        required: false
        type: integer
      responses:
        200:
          description: OK
          examples:
            application/json:
              metadata:
                datafiles: []
                pagination:
                  currentPage: 0
                  pageSize: 1000
                  totalCount: 2
                  totalPages: 1
                status: []
              result:
                data:
                - abbreviation: DRP1
                  leadPerson: Dr. Henry Beachell
                  name: Wheat Resistance Program
                  objective: Disease resistance
                  programDbId: "123"
                - abbreviation: DRP2
                  leadPerson: Dr. Norman Borlaug
                  name: Wheat Improvement Program
                  objective: Yield improvement
                  programDbId: "456"
          headers: {}
          schema:
            type: object
            properties:
              metadata:
                $ref: '#/definitions/metadata'
              result:
                $ref: '#/definitions/programsResponse_result'
            title: programsResponse
  /programs-search:
    post:
      tags:
      - Programs
      - Search Services
      summary: Search Programs
      description: |2
         Advanced searching for the programs resource.
        Status: ACCEPTED.
        See <a href="#introduction/search-services">Search Services</a> for additional implementation details.
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        required: false
        schema:
          $ref: '#/definitions/programsSearchRequest'
      responses:
        200:
          description: OK
          examples:
            application/json:
              metadata:
                datafiles: []
                pagination:
                  currentPage: 0
                  pageSize: 1000
                  totalCount: 2
                  totalPages: 1
                status: []
              result:
                data:
                - abbreviation: DRP1
                  leadPerson: Dr. Henry Beachell
                  name: Wheat Resistance Program
                  objective: Disease resistance
                  programDbId: "123"
                - abbreviation: DRP2
                  leadPerson: Dr. Norman Borlaug
                  name: Wheat Improvement Program
                  objective: Yield improvement
                  programDbId: "456"
          headers: {}
          schema:
            type: object
            properties:
              metadata:
                $ref: '#/definitions/metadata'
              result:
                $ref: '#/definitions/programsResponse_result'
            title: programsResponse
  /samples:
    put:
      tags:
      - Samples
      summary: Add a sample
      description: |
        Call to register the event of a sample being taken. Sample ID is assigned as a result of the operation and returned in response.
      parameters:
      - in: body
        name: sample
        required: false
        schema:
          $ref: '#/definitions/sample'
      responses:
        200:
          description: OK
          examples:
            application/json:
              result:
                sampleDbId: Unique-Plant-SampleID
          headers: {}
          schema:
            $ref: '#/definitions/newSampleDbId'
  /samples-search:
    get:
      tags:
      - Samples
      - Search Services
      summary: Get Sample Search
      description: |2-
         Used to retrieve list of Samples from a Sample Tracking system based on some search criteria.
        <a href="https://test-server.brapi.org/brapi/v1/samples"> test-server.brapi.org/brapi/v1/samples-search</a>
      produces:
      - application/json
      parameters:
      - name: sampleDbId
        in: query
        description: the internal DB id for a sample
        required: false
        type: string
      - name: observationUnitDbId
        in: query
        description: the internal DB id for an observation unit where a sample was taken from
        required: false
        type: string
      - name: plateDbId
        in: query
        description: the internal DB id for a plate of samples
        required: false
        type: string
      - name: germplasmDbId
        in: query
        description: the internal DB id for a germplasm
        required: false
        type: string
      - name: pageSize
        in: query
        description: The size of the pages to be returned. Default is 1000.
        required: false
        type: integer
      - name: page
        in: query
        description: Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is 0.
        required: false
        type: integer
      responses:
        200:
          description: OK
          examples:
            application/json:
              metadata:
                datafiles: []
                pagination:
                  currentPage: 0
                  pageSize: 1000
                  totalCount: 2
                  totalPages: 1
                status: []
              result:
                data:
                - germplasmDbId: def456
                  notes: Cut from infected leaf
                  observationUnitDbId: abc123
                  plantDbId: PlantID-123
                  plateDbId: PlateID-123
                  plateIndex: 0
                  plotDbId: PlotId-123
                  sampleDbId: Unique-Plant-SampleID-1
                  sampleTimestamp: 2016-07-27T13:43:22.000Z
                  sampleType: TypeOfSample
                  studyDbId: StudyId-123
                  takenBy: Mr. Technician
                  tissueType: TypeOfTissue
                - germplasmDbId: def456
                  notes: Cut from infected leaf
                  observationUnitDbId: a1b2c3
                  plantDbId: PlantID-123
                  plateDbId: PlateID-123
                  plateIndex: 0
                  plotDbId: PlotId-123
                  sampleDbId: Unique-Plant-SampleID-2
                  sampleTimestamp: 2016-07-27T13:43:22.000Z
                  sampleType: TypeOfSample
                  studyDbId: StudyId-123
                  takenBy: Mr. Technician
                  tissueType: TypeOfTissue
          headers: {}
          schema:
            type: object
            properties:
              metadata:
                $ref: '#/definitions/metadata'
              result:
                $ref: '#/definitions/samplesResponse_result'
            title: samplesResponse
    post:
      tags:
      - Samples
      - Search Services
      summary: Post Sample Search
      description: |2-
         Used to retrieve list of Samples from a Sample Tracking system based on some search criteria.
        <a href="https://test-server.brapi.org/brapi/v1/samples"> test-server.brapi.org/brapi/v1/samples-search</a>
      produces:
      - application/json
      parameters:
      - in: body
        name: sampleSearch
        required: false
        schema:
          $ref: '#/definitions/sampleSearchRequest'
      responses:
        200:
          description: OK
          examples:
            application/json:
              metadata:
                datafiles: []
                pagination:
                  currentPage: 0
                  pageSize: 1000
                  totalCount: 2
                  totalPages: 1
                status: []
              result:
                data:
                - germplasmDbId: def456
                  notes: Cut from infected leaf
                  observationUnitDbId: abc123
                  plantDbId: PlantID-123
                  plateDbId: PlateID-123
                  plateIndex: 0
                  plotDbId: PlotId-123
                  sampleDbId: Unique-Plant-SampleID-1
                  sampleTimestamp: 2016-07-27T13:43:22.000Z
                  sampleType: TypeOfSample
                  studyDbId: StudyId-123
                  takenBy: Mr. Technician
                  tissueType: TypeOfTissue
                - germplasmDbId: def456
                  notes: Cut from infected leaf
                  observationUnitDbId: a1b2c3
                  plantDbId: PlantID-123
                  plateDbId: PlateID-123
                  plateIndex: 0
                  plotDbId: PlotId-123
                  sampleDbId: Unique-Plant-SampleID-2
                  sampleTimestamp: 2016-07-27T13:43:22.000Z
                  sampleType: TypeOfSample
                  studyDbId: StudyId-123
                  takenBy: Mr. Technician
                  tissueType: TypeOfTissue
          headers: {}
          schema:
            type: object
            properties:
              metadata:
                $ref: '#/definitions/metadata'
              result:
                $ref: '#/definitions/samplesResponse_result'
            title: samplesResponse
  /samples/{sampleDbId}:
    get:
      tags:
      - Samples
      summary: Get Sample
      description: |2-
         Used to retrieve the details of a single Sample from a Sample Tracking system.
        <a href="https://test-server.brapi.org/brapi/v1/samples"> test-server.brapi.org/brapi/v1/samples/{sampleDbId}</a>
      parameters:
      - name: sampleDbId
        in: path
        description: the internal DB id for a sample
        required: true
        type: string
      responses:
        200:
          description: OK
          examples:
            application/json:
              metadata:
                datafiles: []
                pagination:
                  currentPage: 0
                  pageSize: 0
                  totalCount: 0
                  totalPages: 0
                status: []
              result:
                germplasmDbId: def456
                notes: Cut from infected leaf
                observationUnitDbId: abc123
                plantDbId: PlantID-123
                plateDbId: PlateID-123
                plateIndex: 0
                plotDbId: PlotId-123
                sampleDbId: Unique-Plant-SampleID-1
                sampleTimestamp: 2016-07-27T14:43:22+01:00
                sampleType: TypeOfSample
                studyDbId: StudyId-123
                takenBy: Mr. Technician
                tissueType: TypeOfTissue
          headers: {}
          schema:
            type: object
            properties:
              metadata:
                $ref: '#/definitions/metadata'
              result:
                $ref: '#/definitions/sample'
            title: sampleResponse
  /seasons:
    get:
      tags:
      - Studies
      summary: List seasons or years
      description: |2-
         Call to retrive all seasons (or years) in the database. (Added by Jan-Erik and Lukas 5/26/2016) Scope: PHENOTYPING.
        <a href="https://test-server.brapi.org/brapi/v1/seasons"> test-server.brapi.org/brapi/v1/seasons</a>
      produces:
      - application/json
      parameters:
      - name: year
        in: query
        description: ""
        required: false
        type: string
      - name: pageSize
        in: query
        description: The size of the pages to be returned. Default is `1000`.
        required: false
        type: integer
      - name: page
        in: query
        description: Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.
        required: false
        type: integer
      responses:
        200:
          description: OK
          examples:
            application/json:
              metadata:
                datafiles: []
                pagination:
                  currentPage: 0
                  pageSize: 1000
                  totalCount: 2
                  totalPages: 1
                status: []
              result:
                data:
                - season: Fall
                  seasonDbId: "237"
                  year: "2015"
                - season: Spring
                  seasonDbId: "238"
                  year: "2016"
          headers: {}
          schema:
            type: object
            properties:
              metadata:
                $ref: '#/definitions/metadata'
              result:
                $ref: '#/definitions/seasonsResponse_result'
            title: seasonsResponse
  /studies-search:
    get:
      tags:
      - Studies
      - Search Services
      summary: Search Studies (GET)
      description: |2-
         Scope: PHENOTYPING. Status: ACCEPTED. Implementation target date: PAG2016.
        Implemented by: Germinate
        Used by: Flapjack, Cassavabase
        See <a href="#introduction/search-services">Search Services</a> for additional implementation details.
        Get list of studies
        StartDate and endDate should be ISO8601 format for dates: YYYY-MM-DD
        <a href="https://test-server.brapi.org/brapi/v1/studies"> test-server.brapi.org/brapi/v1/studies-search</a>
      produces:
      - application/json
      parameters:
      - name: studyType
        in: query
        description: Filter based on study type e.g. Nursery, Trial or Genotype.
        required: false
        type: string
      - name: programDbId
        in: query
        description: Program filter to only return studies associated with given program id.
        required: false
        type: string
      - name: locationDbId
        in: query
        description: Filter by location
        required: false
        type: string
      - name: seasonDbId
        in: query
        description: Filter by season or year
        required: false
        type: string
      - name: trialDbId
        in: query
        description: Filter by trial
        required: false
        type: string
      - name: studyDbId
        in: query
        description: Filter by study DbId
        required: false
        type: string
      - name: germplasmDbIds
        in: query
        description: Filter studies where specified germplasm have been used/tested
        required: false
        type: array
        items:
          type: string
        collectionFormat: multi
      - name: observationVariableDbIds
        in: query
        description: Filter studies where specified observation variables have been measured
        required: false
        type: array
        items:
          type: string
        collectionFormat: multi
      - name: pageSize
        in: query
        description: The size of the pages to be returned. Default is `1000`.
        required: false
        type: integer
      - name: page
        in: query
        description: Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.
        required: false
        type: integer
      - name: active
        in: query
        description: Filter active status true/false.
        required: false
        type: boolean
      - name: sortBy
        in: query
        description: Sort order. Name of the field to sort by.
        required: false
        type: string
      - name: sortOrder
        in: query
        description: Sort order direction. Ascending/Descending.
        required: false
        type: string
      responses:
        200:
          description: OK
          examples:
            application/json:
              metadata:
                datafiles: []
                pagination:
                  currentPage: 0
                  pageSize: 1000
                  totalCount: 2
                  totalPages: 1
                status: []
              result:
                data:
                - active: "true"
                  additionalInfo:
                    property1Name: property1Value
                    property2Name: property2Value
                    property3Name: property3Value
                  endDate: 2008-12-31
                  locationDbId: "23"
                  locationName: Kenya
                  name: Earlygenerationtesting
                  programDbId: "27"
                  programName: Drought Resistance Program A
                  seasons:
                  - 2007 Spring
                  - 2008 Fall
                  startDate: 2007-06-01
                  studyDbId: "35"
                  studyType: Trial
                  trialDbId: "7"
                  trialName: InternationalTrialA
                - active: "true"
                  additionalInfo:
                    property1Name: property1Value
                    property2Name: property2Value
                    property3Name: property3Value
                  endDate: 2008-12-31
                  locationDbId: "33"
                  locationName: Zimbabwe
                  name: Earlygenerationtesting
                  programDbId: "58"
                  programName: Drought Resistance Program B
                  seasons:
                  - 2007 Spring
                  - 2008 Fall
                  startDate: 2005-06-01
                  studyDbId: "345"
                  studyType: Trial
                  trialDbId: "7"
                  trialName: InternationalTrialA
          headers: {}
          schema:
            type: object
            properties:
              metadata:
                $ref: '#/definitions/metadata'
              result:
                $ref: '#/definitions/studiesResponse_result'
            title: studiesResponse
    post:
      tags:
      - Studies
      - Search Services
      summary: Search Studies (GET)
      description: |2-
         Scope: PHENOTYPING. Status: ACCEPTED. Implementation target date: PAG2016.
        Implemented by: Germinate
        Used by: Flapjack, Cassavabase
        See <a href="#introduction/search-services">Search Services</a> for additional implementation details.
        Get list of studies
        StartDate and endDate should be ISO8601 format for dates: YYYY-MM-DD
        <a href="https://test-server.brapi.org/brapi/v1/studies"> test-server.brapi.org/brapi/v1/studies-search</a>
      produces:
      - application/json
      parameters:
      - in: body
        name: studySearchRequest
        description: Study Search request
        required: false
        schema:
          $ref: '#/definitions/studySearchRequest'
      responses:
        200:
          description: OK
          examples:
            application/json:
              metadata:
                datafiles: []
                pagination:
                  currentPage: 0
                  pageSize: 1000
                  totalCount: 2
                  totalPages: 1
                status: []
              result:
                data:
                - active: "true"
                  additionalInfo:
                    property1Name: property1Value
                    property2Name: property2Value
                    property3Name: property3Value
                  endDate: 2008-12-31
                  locationDbId: "23"
                  locationName: Kenya
                  name: Earlygenerationtesting
                  programDbId: "27"
                  programName: Drought Resistance Program A
                  seasons:
                  - 2007 Spring
                  - 2008 Fall
                  startDate: 2007-06-01
                  studyDbId: "35"
                  studyType: Trial
                  trialDbId: "7"
                  trialName: InternationalTrialA
                - active: "true"
                  additionalInfo:
                    property1Name: property1Value
                    property2Name: property2Value
                    property3Name: property3Value
                  endDate: 2008-12-31
                  locationDbId: "33"
                  locationName: Zimbabwe
                  name: Earlygenerationtesting
                  programDbId: "58"
                  programName: Drought Resistance Program B
                  seasons:
                  - 2007 Spring
                  - 2008 Fall
                  startDate: 2005-06-01
                  studyDbId: "345"
                  studyType: Trial
                  trialDbId: "7"
                  trialName: InternationalTrialA
          headers: {}
          schema:
            type: object
            properties:
              metadata:
                $ref: '#/definitions/metadata'
              result:
                $ref: '#/definitions/studiesResponse_result'
            title: studiesResponse
  /studies/{studyDbId}:
    get:
      tags:
      - Studies
      summary: Retrieve study details
      description: |2-
         Scope: PHENOTYPING. Status: ACCEPTED. Implemented by: Germinate, GnpIS
        Notes: an additionalInfo field was added to provide a controlled vocabulary for less common data fields.
        Retrieve the information of the study required for field data collection
        More linked data: * observation variables: ```/brapi/v1/studies/{studyDbId}/observationVariables``` * germplasm: ```/brapi/v1/studies/{studyDbId}/germplasm``` * observation units: ```/brapi/v1/studies/{studyDbId}/observationUnits``` * layout: ```brapi/v1/studies/{studyDbId}/layout```
        <a href="https://test-server.brapi.org/brapi/v1/studies"> test-server.brapi.org/brapi/v1/studies/{studyDbId}</a>
      parameters:
      - name: studyDbId
        in: path
        description: Identifier of the study. Usually a number, could be alphanumeric.
        required: true
        type: string
      responses:
        200:
          description: OK
          examples:
            application/json:
              metadata:
                datafiles: []
                pagination:
                  currentPage: 0
                  pageSize: 0
                  totalCount: 0
                  totalPages: 0
                status: []
              result:
                active: "true"
                additionalInfo:
                  principalInvestigator: Dr. Breeder
                  property1Name: property1Value
                  property2Name: property2Value
                  publications: pmid:24039865287545
                  studyObjective: Increase yield
                contacts:
                - contactDbId: C025
                  email: j.doe@mail.com
                  instituteName: IRRI
                  name: John Doe
                  orcid: 0000-0002-0607-8728
                  type: Scientist
                - contactDbId: C026
                  instituteName: IRRI
                  name: Dave Peters
                dataLinks:
                - name: image-archive12.zip
                  type: Image archive
                  url: http://data.inra.fr/archive/multi-spect-flowering.zip
                endDate: 2008-12-31
                lastUpdate:
                  timestamp: 2015-06-16T00:53:26Z
                  version: "1.1"
                license: https://creativecommons.org/licenses/by/4.0
                location:
                  abbreviation: IB
                  additionalInfo:
                    AnnualMeanRain: value
                    SoilDescription: "23"
                    property1Name: property1Value
                    property2Name: property2Value
                  altitude: 12
                  countryCode: NGA
                  countryName: Nigeria
                  instituteAddress: route foo, Clermont Ferrand, France
                  instituteName: INRA - GDEC
                  latitude: -21.5
                  locationDbId: "1"
                  longitude: 165.5
                  name: Ibadan
                seasons:
                - 2005 Winter
                - 2008 Summer
                startDate: 2005-06-01
                studyDbId: "35"
                studyDescription: some free text description that could include scientific goal, some tracability and whatever makes sense
                studyName: Earlygenerationtesting
                studyType: Yield study
                trialDbId: "57"
                trialName: International Yield Trial
          headers: {}
          schema:
            type: object
            properties:
              metadata:
                $ref: '#/definitions/metadata'
              result:
                $ref: '#/definitions/study'
            title: studyResponse
  /studies/{studyDbId}/germplasm:
    get:
      tags:
      - Studies
      - Germplasm
      summary: Study Germplasm Details
      description: |2-
         Scope: PHENOTYPING
        <a href="https://test-server.brapi.org/brapi/v1/studies"> test-server.brapi.org/brapi/v1/studies/{studyDbId}/germplasm</a>
      parameters:
      - name: studyDbId
        in: path
        description: Identifier of the study. Usually a number, could be alphanumeric.
        required: true
        type: string
      - name: pageSize
        in: query
        description: The size of the pages to be returned. Default is `1000`.
        required: false
        type: integer
      - name: page
        in: query
        description: Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.
        required: false
        type: integer
      responses:
        200:
          description: OK
          examples:
            application/json:
              metadata:
                datafiles: []
                pagination:
                  currentPage: 0
                  pageSize: 1000
                  totalCount: 2
                  totalPages: 1
                status: []
              result:
                data:
                - accessionNumber: ITC0609
                  entryNumber: "1"
                  germplasmDbId: "382"
                  germplasmName: Pahang
                  germplasmPUI: http://www.crop-diversity.org/mgis/accession/01BEL084609
                  pedigree: TOBA97/SW90.1057
                  seedSource: SS1
                  synonyms:
                  - 01BEL084609
                - accessionNumber: ITC0727
                  entryNumber: "2"
                  germplasmDbId: "394"
                  germplasmName: Pahang
                  germplasmPUI: http://www.crop-diversity.org/mgis/accession/01BEL084727
                  pedigree: TOBA97/SW90.1057
                  seedSource: SS2
                  synonyms:
                  - 01BEL084727
                studyDbId: "35"
                trialName: myBestTrial
          headers: {}
          schema:
            type: object
            properties:
              metadata:
                $ref: '#/definitions/metadata'
              result:
                $ref: '#/definitions/germplasmSummaryList'
            title: germplasmSummaryListResponse
  /studies/{studyDbId}/layout:
    get:
      tags:
      - Studies
      summary: Retrieve plot layout details
      description: " Retrive the layout details for a study. Returns an array of observation\
        \ unit position data which describes where each unit and germplasm is located\
        \ within the study layout\nRetrieve the plot layout of the study with id {id}.\n\
        For each observationUnit within a study, return the `block`, `replicate`,\
        \ and `entryType` values as well as the `X` and `Y` coordinates. `entryType`\
        \ can be \"check\", \"test\", or \"filler\".\nAlso return some human readable\
        \ meta data about the observationUnit and germplasm.\n<a href=\"https://test-server.brapi.org/brapi/v1/studies\"\
        > test-server.brapi.org/brapi/v1/studies/{studyDbId}/layout</a> "
      produces:
      - application/json
      parameters:
      - name: studyDbId
        in: path
        description: Identifier of the study. Usually a number, could be alphanumeric.
        required: true
        type: string
      - name: pageSize
        in: query
        description: The size of the pages to be returned. Default is `1000`.
        required: false
        type: integer
      - name: page
        in: query
        description: Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.
        required: false
        type: integer
      responses:
        200:
          description: OK
          examples:
            application/json:
              metadata:
                datafiles: []
                pagination:
                  currentPage: 0
                  pageSize: 1000
                  totalCount: 4
                  totalPages: 1
                status: []
              result:
                data:
                - X: 1
                  Y: 1
                  additionalInfo: {}
                  blockNumber: 1
                  entryType: check/test/filler
                  germplasmDbId: "143"
                  germplasmName: ZIPA_68
                  observationLevel: plot
                  observationUnitDbId: "11"
                  observationUnitName: ZIPA_68_Ibadan_2014
                  replicate: 1
                  studyDbId: "35"
                - X: 1
                  Y: 2
                  additionalInfo: {}
                  blockNumber: 1
                  entryType: check/test/filler
                  germplasmDbId: "144"
                  germplasmName: ZIPA_69
                  observationLevel: plot
                  observationUnitDbId: "12"
                  observationUnitName: ZIPA_69_Ibadan_2014
                  replicate: 1
                  studyDbId: "35"
                - X: 1
                  Y: 3
                  additionalInfo: {}
                  blockNumber: 1
                  entryType: check/test/filler
                  germplasmDbId: "145"
                  germplasmName: ZIPA_70
                  observationLevel: plot
                  observationUnitDbId: "13"
                  observationUnitName: ZIPA_70_Ibadan_2014
                  replicate: 1
                  studyDbId: "35"
                - X: 2
                  Y: 1
                  additionalInfo: {}
                  blockNumber: 2
                  entryType: check/test/filler
                  germplasmDbId: "143"
                  germplasmName: ZIPA_68
                  observationLevel: plot
                  observationUnitDbId: "11"
                  observationUnitName: ZIPA_68_Ibadan_2014
                  replicate: 2
                  studyDbId: "35"
          headers: {}
          schema:
            type: object
            properties:
              metadata:
                $ref: '#/definitions/metadata'
              result:
                $ref: '#/definitions/observationUnitPositionsResponse_result'
            title: observationUnitPositionsResponse
    put:
      tags:
      - Studies
      summary: Retrieve plot layout details
      description: " Modify a study layout\nUpdate the layout data for a set of observation\
        \ units within a study. Each layout object is a subset of fields within an\
        \ observationUnit, so it doesnt make sense to create a new layout object by\
        \ itself.\nImplementation Notes:\n+ If any of the fields in the request object\
        \ is missing, that piece of data will not be updated. + If an observationUnitDbId\
        \ can not be found within the given study, an error will be returned. + `entryType`\
        \ can have the values \"check\", \"test\", or \"filler\". + The response should\
        \ match the structure of the response from `GET studies/{studyDbId}/layout`,\
        \ but it should only contain the layout objects which have been updated by\
        \ the PUT request. Also, pagination is not available in the response.\n<a\
        \ href=\"https://test-server.brapi.org/brapi/v1/studies\"> test-server.brapi.org/brapi/v1/studies/{studyDbId}/layout</a> "
      produces:
      - application/json
      parameters:
      - name: studyDbId
        in: path
        description: Identifier of the study. Usually a number, could be alphanumeric.
        required: true
        type: string
      - in: body
        name: studyLayoutRequest
        description: The request body for updateing a study layout
        required: false
        schema:
          $ref: '#/definitions/studyLayoutRequest'
      responses:
        200:
          description: OK
          examples:
            application/json:
              metadata:
                datafiles: []
                pagination:
                  currentPage: 0
                  pageSize: 1000
                  totalCount: 4
                  totalPages: 1
                status: []
              result:
                data:
                - X: 1
                  Y: 1
                  additionalInfo: {}
                  blockNumber: 1
                  entryType: check/test/filler
                  germplasmDbId: "143"
                  germplasmName: ZIPA_68
                  observationLevel: plot
                  observationUnitDbId: "11"
                  observationUnitName: ZIPA_68_Ibadan_2014
                  replicate: 1
                  studyDbId: "1"
                - X: 1
                  Y: 2
                  additionalInfo: {}
                  blockNumber: 1
                  entryType: check/test/filler
                  germplasmDbId: "144"
                  germplasmName: ZIPA_69
                  observationLevel: plot
                  observationUnitDbId: "12"
                  observationUnitName: ZIPA_69_Ibadan_2014
                  replicate: 1
                  studyDbId: "1"
                - X: 1
                  Y: 3
                  additionalInfo: {}
                  blockNumber: 1
                  entryType: check/test/filler
                  germplasmDbId: "145"
                  germplasmName: ZIPA_70
                  observationLevel: plot
                  observationUnitDbId: "13"
                  observationUnitName: ZIPA_70_Ibadan_2014
                  replicate: 1
                  studyDbId: "1"
                - X: 2
                  Y: 1
                  additionalInfo: {}
                  blockNumber: 2
                  entryType: check/test/filler
                  germplasmDbId: "143"
                  germplasmName: ZIPA_68
                  observationLevel: plot
                  observationUnitDbId: "11"
                  observationUnitName: ZIPA_68_Ibadan_2014
                  replicate: 2
                  studyDbId: "1"
          headers: {}
          schema:
            type: object
            properties:
              metadata:
                $ref: '#/definitions/metadata'
              result:
                $ref: '#/definitions/observationUnitPositionsResponse_result'
            title: observationUnitPositionsResponse
  /studies/{studyDbId}/observationVariables:
    get:
      tags:
      - Studies
      - Observation Variables
      - Deprecated
      summary: <strong>Deprecated</strong> Retrieve study observation variables
      description: |2-


        <a href="https://test-server.brapi.org/brapi/v1/studies"> test-server.brapi.org/brapi/v1/studies/{studyDbId}/observationVariables</a>
      produces:
      - application/json
      parameters:
      - name: studyDbId
        in: path
        description: string database unique identifier
        required: true
        type: string
      responses:
        200:
          description: OK
          examples:
            application/json:
              metadata:
                datafiles: []
                pagination:
                  currentPage: 0
                  pageSize: 0
                  totalCount: 0
                  totalPages: 0
                status: []
              result:
                data:
                - name: CT_M_C
                  observationVariableDbId: CO_334:0100632
                  ontologyDbId: CO_334
                  ontologyName: Cassava
                  trait:
                    name: Canopy temperature
                    traitDbId: CO_334:0100630
                - contextOfUse:
                  - Trial evaluation
                  - Nursery evaluation
                  crop: Cassava
                  date: 2016-05-13
                  growthStage: mature
                  institution: ""
                  language: EN
                  method:
                    class: Estimation
                    description: Assessment of the level of yellowness in cassava storage root pulp using the tc chart
                    methodDbId: CO_334:0010320
                    name: Visual Rating:total carotenoid by chart_method
                  name: caro_spectro
                  observationVariableDbId: CO_334:0100622
                  ontologyDbId: CO_334
                  ontologyName: Cassava
                  scale:
                    datatype: Numeric
                    decimalPlaces: 2
                    name: ug/g
                    scaleDbId: CO_334:0100526
                    validValues:
                      categories:
                      - 1=low
                      - 2=medium
                      - 3=high
                      max: 3
                      min: 1
                  scientist: ""
                  status: recommended
                  synonyms:
                  - Carotenoid content by spectro
                  trait:
                    alternativeAbbreviations:
                    - CCS
                    attribute: carotenoid
                    class: physiological trait
                    description: Cassava storage root pulp carotenoid content
                    entity: root
                    mainAbbreviation: CC
                    name: Carotenoid content
                    status: recommended
                    synonyms:
                    - carotenoid content measure
                    traitDbId: CO_334:0100620
                    xref: TL_455:0003023
                  xref: TL_455:0003001
                studyDbId: "123"
                trialName: myBestTrial
          headers: {}
          schema:
            type: object
            properties:
              metadata:
                $ref: '#/definitions/metadata'
              result:
                $ref: '#/definitions/studyObservationVariablesResponse_result'
            title: studyObservationVariablesResponse
      deprecated: true
  /studies/{studyDbId}/observations:
    get:
      tags:
      - Studies
      - Observations
      summary: Get Observation Units by observation variable ids
      description: |2-

        Retrieve all observations where there are measurements for the given observation variables.
        observationTimestamp should be ISO8601 format with timezone: YYYY-MM-DDThh:mm:ss+hhmm
        <a href="https://test-server.brapi.org/brapi/v1/studies"> test-server.brapi.org/brapi/v1/studies/{studyDbId}/observations</a>
      parameters:
      - name: studyDbId
        in: path
        description: Identifier of the study. Usually a number, could be alphanumeric.
        required: true
        type: string
      - name: observationVariableDbIds
        in: query
        description: Numeric `id` of that variable (combination of trait, unit and method)
        required: false
        type: array
        items:
          type: string
        collectionFormat: multi
      - name: pageSize
        in: query
        description: The size of the pages to be returned. Default is `1000`.
        required: false
        type: integer
      - name: page
        in: query
        description: Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.
        required: false
        type: integer
      responses:
        200:
          description: OK
          examples:
            application/json:
              metadata:
                datafiles: []
                pagination:
                  currentPage: 0
                  pageSize: 1000
                  totalCount: 2
                  totalPages: 1
                status: []
              result:
                data:
                - germplasmDbId: "8383"
                  germplasmName: Pahang
                  observationDbId: "12345"
                  observationLevel: plot
                  observationTimeStamp: 2015-11-05T15:12:56+01:00
                  observationUnitDbId: "11"
                  observationUnitName: ZIPA_68_Ibadan_2014
                  observationVariableDbId: CO_334:0100632
                  observationVariableName: Yield
                  operator: Jane Doe
                  studyDbId: "35"
                  uploadedBy: dbUserId
                  value: "5"
                - germplasmDbId: "8383"
                  germplasmName: Pahang
                  observationDbId: "23456"
                  observationLevel: plot
                  observationTimeStamp: 2015-11-05T15:13:56+01:00
                  observationUnitDbId: "11"
                  observationUnitName: ZIPA_68_Ibadan_2014
                  observationVariableDbId: CO_334:0100632
                  observationVariableName: Dry Weight
                  operator: Jane Doe
                  studyDbId: "35"
                  uploadedBy: dbUserId
                  value: "22.3"
          headers: {}
          schema:
            type: object
            properties:
              metadata:
                $ref: '#/definitions/metadata'
              result:
                $ref: '#/definitions/observationsResponse_result'
            title: observationsResponse
    put:
      tags:
      - Studies
      - Observations
      summary: Get Observation Units by observation variable ids
      description: |2-
         Implementation Guidelines: + If an `observationDbId` is "null" or an empty string in the request, a NEW observation should be created for the given study and observationUnit + If an `observationDbId` is populated but not found in the database, a NEW observation should be created for the given study and observationUnit AND an NEW `observationDbId` should be assigned to it. A warning should be returned to the client. + If an `observationDbId` is populated and found in the database, but the existing entry is not associated with the given study or observationUnit, a NEW observation should be created for the given study and observationUnit AND an NEW `observationDbId` should be assigned to it. A warning should be returned to the client. + If an `observationDbId` is populated and found in the database and is associated with the given study and observationUnit, then it should be updated with the new data given.
        <a href="https://test-server.brapi.org/brapi/v1/studies"> test-server.brapi.org/brapi/v1/studies/{studyDbId}/observations</a>
      parameters:
      - name: studyDbId
        in: path
        description: Identifier of the study. Usually a number, could be alphanumeric.
        required: true
        type: string
      - in: body
        name: newObservations
        required: false
        schema:
          $ref: '#/definitions/newObservationsRequest'
      responses:
        200:
          description: OK
          examples:
            application/json:
              metadata:
                datafiles: []
                pagination:
                  currentPage: 0
                  pageSize: 1000
                  totalCount: 2
                  totalPages: 1
                status: []
              result:
                data:
                - germplasmDbId: "8383"
                  germplasmName: Pahang
                  observationDbId: "12345"
                  observationLevel: plot
                  observationTimestamp: 2015-11-05T15:12:56+01:00
                  observationUnitDbId: "11"
                  observationUnitName: ZIPA_68_Ibadan_2014
                  observationVariableDbId: CO_334:0100632
                  observationVariableName: Yield
                  operator: Jane Doe
                  studyDbId: "35"
                  uploadedBy: dbUserId
                  value: "5"
                - germplasmDbId: "8383"
                  germplasmName: Pahang
                  observationDbId: "23456"
                  observationLevel: plot
                  observationTimestamp: 2015-11-05T15:13:56+01:00
                  observationUnitDbId: "11"
                  observationUnitName: ZIPA_68_Ibadan_2014
                  observationVariableDbId: CO_334:0100632
                  observationVariableName: Dry Weight
                  operator: Jane Doe
                  studyDbId: "35"
                  uploadedBy: dbUserId
                  value: "22.3"
          headers: {}
          schema:
            type: object
            properties:
              metadata:
                $ref: '#/definitions/metadata'
              result:
                $ref: '#/definitions/newObservationDbIds'
            title: newObservationDbIdsResponse
  /studies/{studyDbId}/observationunits:
    get:
      tags:
      - Studies
      - Observations
      summary: Get all observation units
      description: |2-
         The main API call for field data collection, to retrieve all the observation units within a study.
        Scope: PHENOTYPING
        <a href="https://test-server.brapi.org/brapi/v1/studies"> test-server.brapi.org/brapi/v1/studies/{studyDbId}/observationunits</a>
      produces:
      - application/json
      parameters:
      - name: studyDbId
        in: path
        description: The study these observation units are related to.
        required: true
        type: string
      - name: observationLevel
        in: query
        description: The granularity level of observation units. Either `plotNumber` or `plantNumber` fields will be relavant depending on whether granularity is plot or plant respectively.
        required: false
        type: string
      - name: pageSize
        in: query
        description: The size of the pages to be returned. Default is `1000`.
        required: false
        type: integer
      - name: page
        in: query
        description: Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.
        required: false
        type: integer
      responses:
        200:
          description: OK
          examples:
            application/json:
              metadata:
                datafiles: []
                pagination:
                  currentPage: 0
                  pageSize: 1000
                  totalCount: 2
                  totalPages: 1
                status: []
              result:
                data:
                - X: "1"
                  Y: "1"
                  blockNumber: "1"
                  entryNumber: "1"
                  entryType: Test entry
                  germplasmDbId: "1"
                  germplasmName: IR-8
                  observationLevel: plot
                  observationUnitDbId: abc-123
                  observationUnitName: Test-2016-location-34-575
                  observationUnitXref:
                  - id: SAMEA179865230
                    source: biosampleEBI
                  - id: INRA:CoeSt6 _SMH03
                    source: gnpis.lot
                  - id: "239865"
                    source: kernelDB
                  observations:
                  - collector: Mr. Technician
                    observationDbId: "153453453"
                    observationTimeStamp: 2015-06-16T00:53:26Z
                    observationVariableDbId: "18020"
                    observationVariableName: Plant_height
                    value: "25.63"
                  - collector: Mr. Technician
                    observationDbId: "23453454345"
                    observationTimeStamp: 2015-06-16T00:53:26Z
                    observationVariableDbId: "51496"
                    observationVariableName: GW100_g
                    value: Light Green
                  pedigree: IR-8-FP/IR-8-MP
                  plantNumber: "0"
                  plotNumber: "1"
                  replicate: "1"
                - X: "1"
                  Y: "2"
                  blockNumber: "2"
                  enrtyNumber: "2"
                  entryType: Check entry
                  germplasmDbId: "2"
                  germplasmName: IR-9
                  observatioUnitDbId: abc-456
                  observationLevel: plot
                  observationUnitName: Test-2016-location-34-456
                  observations:
                  - collector: Mr. Technician
                    observationDbId: "3"
                    observationTimeStamp: 2015-06-16T00:53:26Z
                    observationVariableDbId: "18020"
                    observationVariableName: Plant_height
                    value: "34.95"
                  - collector: Mr. Technician
                    observationDbId: "4"
                    observationTimeStamp: 2015-06-16T00:53:26Z
                    observationVariableDbId: "51496"
                    observationVariableName: GW100_g
                    value: Blue
                  pedigree: IR-9-FP/IR-9-MP
                  plantNumber: "0"
                  plotNumber: "2"
                  replicate: "1"
          headers: {}
          schema:
            type: object
            properties:
              metadata:
                $ref: '#/definitions/metadata'
              result:
                $ref: '#/definitions/observationUnitsResponse_1_result'
            title: observationUnitsResponse
    post:
      tags:
      - Studies
      - Observations
      - Deprecated
      summary: <strong>Deprecated</strong> Save Observation Unit Phenotypes
      description: 'This call has been deprecated in V1.1. Use instead: "PUT /studies/{studyDbId}/observationunits"
        and "PUT /studies/{studyDbId}/observationunits/zip"'
      produces:
      - application/json
      parameters:
      - name: studyDbId
        in: path
        description: The study these observation units are related to.
        required: true
        type: string
      - name: format
        in: query
        description: (default is JSON, but can be zip) In case where JSON data is zipped for faster transfer speed (as in the case of the IRRI handheld implementation), the zipped JSON file will be listed in datafiles. The zipped file contains a JSON file with the same structure as the BrAPI call.
        required: true
        type: string
      - in: body
        name: body
        required: false
        schema:
          $ref: '#/definitions/newObservationsRequestWrapperDeprecated'
      responses:
        200:
          description: OK
          examples: {}
          headers: {}
        400:
          description: Bad Request
          examples:
            application/json:
              metadata:
                status:
                - code: "42"
                  message: Could not update values for Observation Units
          headers: {}
      deprecated: true
    put:
      tags:
      - Studies
      - Observations
      summary: Save Observation Unit Phenotypes
      description: |-
        Use this call for uploading new Observations as JSON to a system.

        Note: If 'observationUnitDbId' or 'observationDbId' is populated, they should be considered updates to existing records. If an existing record of that DbId is not found, the document should be treated as new records and assigned new DbIds. If 'observationUnitDbId' or 'observationDbId' is un-populated (empty string or null) the document should be treated as new records and assigned new DbIds.
      produces:
      - application/json
      parameters:
      - name: studyDbId
        in: path
        description: The study these observation units are related to.
        required: true
        type: string
      - in: body
        name: newObservationUnitRequest
        required: false
        schema:
          title: newObservationUnitRequestList
          type: array
          items:
            $ref: '#/definitions/newObservationUnitRequest'
      responses:
        200:
          description: OK
          examples:
            application/json:
              metadata:
                status:
                - code: "1"
                  message: Upload Successful
              results:
                observationUnitDbIds:
                - 123abc
                - 456def
          headers: {}
          schema:
            type: object
            properties:
              metadata:
                $ref: '#/definitions/metadata'
              result:
                $ref: '#/definitions/newObservationUnitDbIds'
            title: newObservationUnitDbIdsResponse
        400:
          description: Bad Request
          examples:
            application/json:
              metadata:
                status:
                - code: Error
                  message: Could not update values for Observation Units
          headers: {}
  /studies/{studyDbId}/observationunits/zip:
    post:
      tags:
      - Observations
      - Studies
      summary: Use this call for uploading new Observations as a Batched Zip File to a system.
      description: 'Note: If ''observationUnitDbId'' or ''observationDbId'' is populated,
        they should be considered updates to existing records. If an existing record
        of that DbId is not found, the document should be treated as new records and
        assigned new DbIds. If ''observationUnitDbId'' or ''observationDbId'' is un-populated
        (empty string or null) the document should be treated as new records and assigned
        new DbIds.'
      consumes:
      - application/zip
      produces:
      - application/json
      parameters:
      - name: studyDbId
        in: path
        description: The study these observation units are related to.
        required: true
        type: string
      - in: body
        name: zipRequest
        required: false
        schema:
          type: string
          format: binary
      responses:
        200:
          description: OK
          examples:
            application/json:
              metadata:
                status:
                - code: "1"
                  message: Upload Successful
              results:
                observationUnitDbIds:
                - 123abc
                - 456def
          headers: {}
          schema:
            type: object
            properties:
              metadata:
                $ref: '#/definitions/metadata'
              result:
                $ref: '#/definitions/newObservationUnitDbIds'
            title: newObservationUnitDbIdsResponse
        400:
          description: Bad Request
          examples:
            application/json:
              metadata:
                status:
                - code: Error
                  message: Could not update values for Observation Units
  /studies/{studyDbId}/observationvariables:
    get:
      tags:
      - Studies
      - Observation Variables
      summary: Get Observation Variables By Study
      description: |2-
         Scope: PHENOTYPING
        List all the observation variables measured in the study.
        Refer to the data type definition of variables in `/Specification/ObservationVariables/README.md`.
        <a href="https://test-server.brapi.org/brapi/v1/studies"> test-server.brapi.org/brapi/v1/studies/{studyDbId}/observationvariables</a>
      produces:
      - application/json
      parameters:
      - name: studyDbId
        in: path
        description: string database unique identifier
        required: true
        type: string
      - name: pageSize
        in: query
        description: The size of the pages to be returned. Default is `1000`.
        required: false
        type: integer
      - name: page
        in: query
        description: Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.
        required: false
        type: integer
      responses:
        200:
          description: OK
          examples:
            application/json:
              metadata:
                datafiles: []
                pagination:
                  currentPage: 0
                  pageSize: 0
                  totalCount: 0
                  totalPages: 0
                status: []
              result:
                data:
                - defaultValue: "0"
                  method:
                    class: Estimation
                    description: Assessment of the level of yellowness in cassava storage root pulp using the tc chart
                    methodDbId: CO_334:0010320
                    name: Visual Rating:total carotenoid by chart_method
                  name: CT_M_C
                  observationVariableDbId: CO_334:0100632
                  ontologyDbId: CO_334
                  ontologyName: Cassava
                  scale:
                    datatype: Numeric
                    decimalPlaces: 2
                    name: ug/g
                    scaleDbId: CO_334:0100526
                    validValues:
                      categories:
                      - 1=low
                      - 2=medium
                      - 3=high
                      max: 3
                      min: 1
                  trait:
                    name: Canopy temperature
                    traitDbId: CO_334:0100630
                - contextOfUse:
                  - Trial evaluation
                  - Nursery evaluation
                  crop: Cassava
                  date: 2016-05-13
                  defaultValue: "0"
                  growthStage: mature
                  institution: ""
                  language: EN
                  method:
                    class: Estimation
                    description: Assessment of the level of yellowness in cassava storage root pulp using the tc chart
                    methodDbId: CO_334:0010320
                    name: Visual Rating:total carotenoid by chart_method
                  name: caro_spectro
                  observationVariableDbId: CO_334:0100622
                  ontologyDbId: CO_334
                  ontologyName: Cassava
                  scale:
                    datatype: Numeric
                    decimalPlaces: 2
                    name: ug/g
                    scaleDbId: CO_334:0100526
                    validValues:
                      categories:
                      - 1=low
                      - 2=medium
                      - 3=high
                      max: 3
                      min: 1
                  scientist: ""
                  status: recommended
                  synonyms:
                  - Carotenoid content by spectro
                  trait:
                    alternativeAbbreviations:
                    - CCS
                    attribute: carotenoid
                    class: physiological trait
                    description: Cassava storage root pulp carotenoid content
                    entity: root
                    mainAbbreviation: CC
                    name: Carotenoid content
                    status: recommended
                    synonyms:
                    - carotenoid content measure
                    traitDbId: CO_334:0100620
                    xref: TL_455:0003023
                  xref: TL_455:0003001
                studyDbId: "35"
                trialName: myBestTrial
          headers: {}
          schema:
            type: object
            properties:
              metadata:
                $ref: '#/definitions/metadata'
              result:
                $ref: '#/definitions/studyObservationVariablesResponse_result'
            title: studyObservationVariablesResponse
  /studies/{studyDbId}/table:
    get:
      tags:
      - Studies
      - Observations
      summary: Retrieve study Observation Units as table
      description: |2-
         Scope: PHENOTYPING. Status: ACCEPTED. Implemented in Cassavabase, HIDAP and Germinate. Notes: Implementation target date: after PAG2016 Retrieve the details of the study required for field data collection. Includes actual trait data.
        <a href="https://test-server.brapi.org/brapi/v1/studies"> test-server.brapi.org/brapi/v1/studies/{studyDbId}/table</a>
      produces:
      - application/json
      - application/csv
      - application/tsv
      parameters:
      - name: studyDbId
        in: path
        description: Identifier of the study. Usually a number, could be alphanumeric.
        required: true
        type: string
      - name: format
        in: query
        description: The format parameter will cause the data to be dumped to a file in the specified format. Currently, tsv and csv are supported.
        required: false
        type: string
      responses:
        200:
          description: OK
          examples:
            application/csv: "year,studyDbId,studyName,locationDbId,locationName,germplasmDbId,germplasmName,observationUnitDbId,plotNumber,replicate,blockNumber,observationTimestamp,entryType,X,Y,variable1DbId,variable2DbId,variable3DbId\n\
              2017,stu1,Study Name,loc1,Location Name,CIP1,CIP Name,abc123,1,1,1,2017-06-16T00:53:26Z,Test\
              \ Entry,1,2,25.3,103.4,50.75 \n2017,stu1,Study Name,loc1,Location Name,CIP1,CIP\
              \ Name,abc124,1,1,1,2017-06-16T00:54:57Z,Test Entry,2,2,27.9,98.65,45.345\n"
            application/json:
              metadata:
                datafiles: []
                pagination:
                  currentPage: 0
                  pageSize: 0
                  totalCount: 0
                  totalPages: 0
                status: []
              result:
                data:
                - - "2017"
                  - stu1
                  - Study Name
                  - loc1
                  - Location Name
                  - CIP1
                  - CIP Name
                  - abc123
                  - 1
                  - 1
                  - 1
                  - 2017-06-16T00:53:26Z
                  - Test Entry
                  - "1"
                  - "2"
                  - "25.3"
                  - "103.4"
                  - "50.75"
                - - "2017"
                  - stu1
                  - Study Name
                  - loc1
                  - Location Name
                  - CIP1
                  - CIP Name
                  - abc124
                  - 1
                  - 1
                  - 1
                  - 2017-06-16T00:54:57Z
                  - Test Entry
                  - "2"
                  - "2"
                  - "27.9"
                  - "98.65"
                  - "45.345"
                headerRow:
                - year
                - studyDbId
                - studyName
                - locationDbId
                - locationName
                - germplasmDbId
                - germplasmName
                - observationUnitDbId
                - plotNumber
                - replicate
                - blockNumber
                - observationTimestamp
                - entryType
                - X
                - Y
                observationVariableDbIds:
                - variable1DbId
                - variable2DbId
                - variable3DbId
                observationVariableNames:
                - plant height
                - fruit weight
                - root weight
            application/tsv: "year\tstudyDbId\tstudyName\tlocationDbId\tlocationName\t\
              germplasmDbId\tgermplasmName\tobservationUnitDbId\tplotNumber\treplicate\t\
              blockNumber\tobservationTimestamp\tentryType\tX\tY\tvariable1DbId\t\
              variable2DbId\tvariable3DbId\n 2017\tstu1\tStudy Name\tloc1\tLocation\
              \ Name\tCIP1\tCIP Name\tabc123\t1\t1\t1\t2017-06-16T00:53:26Z\tTest\
              \ Entry\t1\t2\t25.3\t103.4\t50.75\n 2017\tstu1\tStudy Name\tloc1\tLocation\
              \ Name\tCIP1\tCIP Name\tabc124\t1\t1\t1\t2017-06-16T00:54:57Z\tTest\
              \ Entry\t2\t2\t27.9\t98.65\t45.345\n"
          headers: {}
          schema:
            type: object
            properties:
              metadata:
                $ref: '#/definitions/metadata'
              result:
                $ref: '#/definitions/observationsTable'
            title: studyobservationsTableResponse
    post:
      tags:
      - Studies
      - Observations
      summary: Save study Observation Units as table
      description: " This call can be used to create new observations in bulk.\nNote:\
        \ If you need to update any existing observation, please use `PUT /studies/{studyDbId}/observations`.\
        \ This call should only be used to create NEW observations.\nImplementation\
        \ Guidelines:\n+ All observations submitted through this call should create\
        \ NEW observation records in the database under the given observation unit.\
        \ + Each \"observationUnitDbId\" listed should already exist in the database.\
        \ If the server can not find a given \"observationUnitDbId\", it should report\
        \ an error. (see Error Handling) + The response of this call should be the\
        \ set of \"observationDbIds\" created from this call, along with the associated\
        \ \"observationUnitDbId\" and \"observationVariableDbId\" that each observation\
        \ is associated with.\nImages can optionally be saved using this call by providing\
        \ a zipped file of all images in the datafiles. The physical zipped file should\
        \ be transferred as well in the mulit-part form data.\nScope: PHENOTYPING "
      parameters:
      - name: studyDbId
        in: path
        description: Identifier of the study. Usually a number, could be alphanumeric.
        required: true
        type: string
      - in: body
        name: newObservationsTableRequest
        required: false
        schema:
          $ref: '#/definitions/newObservationsTableRequest'
      responses:
        200:
          description: OK
          examples:
            application/json:
              metadata:
                datafiles: []
                pagination:
                  currentPage: 0
                  pageSize: 0
                  totalCount: 0
                  totalPages: 0
                status: []
              result:
                observations:
                - observationDbId: "12345"
                  observationUnitDbId: "1"
                  observationVariableDbId: variable1DbId
                - observationDbId: "23456"
                  observationUnitDbId: "1"
                  observationVariableDbId: variable2DbId
                - observationDbId: "34567"
                  observationUnitDbId: "1"
                  observationVariableDbId: variable3DbId
                - observationDbId: "45678"
                  observationUnitDbId: "1"
                  observationVariableDbId: imagevariable1DbId
                - observationDbId: "56789"
                  observationUnitDbId: "2"
                  observationVariableDbId: variable1DbId
                - observationDbId: "67890"
                  observationUnitDbId: "2"
                  observationVariableDbId: variable2DbId
                - observationDbId: "78901"
                  observationUnitDbId: "2"
                  observationVariableDbId: variable3DbId
                - observationDbId: "89012"
                  observationUnitDbId: "2"
                  observationVariableDbId: imagevariable1DbId
          headers: {}
          schema:
            type: object
            properties:
              metadata:
                $ref: '#/definitions/metadata'
              result:
                $ref: '#/definitions/newObservationDbIds'
            title: newObservationDbIdsResponse
  /studyTypes:
    get:
      tags:
      - Studies
      - Deprecated
      summary: <strong>Deprecated</strong> List study types
      description: " Call to retrieve the list of study types.\nScope: PHENOTYPING.\
        \ Implementation target date: PAG2016 "
      produces:
      - application/json
      parameters:
      - name: pageSize
        in: query
        description: The size of the pages to be returned. Default is `1000`.
        required: false
        type: integer
      - name: page
        in: query
        description: Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.
        required: false
        type: integer
      responses:
        200:
          description: OK
          examples:
            application/json:
              metadata:
                datafiles: []
                pagination:
                  currentPage: 0
                  pageSize: 1000
                  totalCount: 3
                  totalPages: 1
                status: []
              result:
                data:
                - description: Description for Nursery study type
                  name: Crossing Nursery
                - description: Description for Trial study type
                  name: Yield Trial
                - description: Description for Genotyping study type
                  name: Genotype
          headers: {}
          schema:
            type: object
            properties:
              metadata:
                $ref: '#/definitions/metadata'
              result:
                $ref: '#/definitions/studyTypesResponse_result'
            title: studyTypesResponse
      deprecated: true
  /studytypes:
    get:
      tags:
      - Studies
      summary: List study types
      description: |2-
         Call to retrieve the list of study types.
        Scope: PHENOTYPING. Implementation target date: PAG2016
        <a href="https://test-server.brapi.org/brapi/v1/studytypes"> test-server.brapi.org/brapi/v1/studytypes</a>
      produces:
      - application/json
      parameters:
      - name: pageSize
        in: query
        description: The size of the pages to be returned. Default is `1000`.
        required: false
        type: integer
      - name: page
        in: query
        description: Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.
        required: false
        type: integer
      responses:
        200:
          description: OK
          examples:
            application/json:
              metadata:
                datafiles: []
                pagination:
                  currentPage: 0
                  pageSize: 1000
                  totalCount: 3
                  totalPages: 1
                status: []
              result:
                data:
                - description: Description for Nursery study type
                  name: Crossing Nursery
                - description: Description for Trial study type
                  name: Yield Trial
                - description: Description for Genotyping study type
                  name: Genotype
          headers: {}
          schema:
            type: object
            properties:
              metadata:
                $ref: '#/definitions/metadata'
              result:
                $ref: '#/definitions/studyTypesResponse_result'
            title: studyTypesResponse
  /token:
    post:
      tags:
      - Authentication
      - Deprecated
      summary: Login
      description: ""
      produces:
      - application/json
      parameters: []
      responses:
        201:
          description: Created
          examples:
            application/json:
              access_token: R6gKDBRxM4HLj6eGi4u5HkQjYoIBTPfvtZzUD8TUzg4
              expires_in: The lifetime in seconds of the access token
              metadata:
                datafiles: []
                pagination:
                  currentPage: 0
                  pageSize: 0
                  totalCount: 0
                  totalPages: 0
                status: []
              userDisplayName: John Smith
          headers: {}
      deprecated: true
    delete:
      tags:
      - Authentication
      - Deprecated
      summary: Logout
      description: ""
      parameters: []
      responses:
        201:
          description: Created
          examples: {}
          headers: {}
      deprecated: true
  /traits:
    get:
      tags:
      - Observation Variables
      summary: List all traits
      description: |2-
         Scope: CORE. Status: ACCEPTED.
        Implemented by: Germinate, Cassavabase
        Call to retrieve a list of traits available in the system and their associated variables.
        <a href="https://test-server.brapi.org/brapi/v1/traits"> test-server.brapi.org/brapi/v1/traits</a>
      produces:
      - application/json
      parameters:
      - name: pageSize
        in: query
        description: The size of the pages to be returned. Default is `1000`.
        required: false
        type: integer
      - name: page
        in: query
        description: Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.
        required: false
        type: integer
      responses:
        200:
          description: OK
          examples:
            application/json:
              metadata:
                datafiles: []
                pagination:
                  currentPage: 0
                  pageSize: 1000
                  totalCount: 2
                  totalPages: 1
                status: []
              result:
                data:
                - description: Description of Plant Height
                  name: Plant Height
                  observationVariables:
                  - CO_334:0100121
                  - CO_334:0100122
                  - CO_334:0100123
                  traitDbId: "123"
                  traitId: CO:123000007
                - description: Cassava storage root pulp carotenoid content
                  name: Carotenoid content
                  observationVariables:
                  - CO_334:0100621
                  - CO_334:0100622
                  - CO_334:0100623
                  traitDbId: "123"
                  traitId: CO_334:0100620
          headers: {}
          schema:
            type: object
            properties:
              metadata:
                $ref: '#/definitions/metadata'
              result:
                $ref: '#/definitions/traitsResponse_result'
            title: traitsResponse
  /traits/{traitDbId}:
    get:
      tags:
      - Observation Variables
      summary: Retrieve trait details by id
      description: |2-
         Scope: CORE. Status: ACCEPTED.
        Implemented by: Germinate
        Retrieve the variables associated to a trait
        <a href="https://test-server.brapi.org/brapi/v1/traits"> test-server.brapi.org/brapi/v1/traits/{traitDbId}</a>
      produces:
      - application/json
      parameters:
      - name: traitDbId
        in: path
        description: Id of the trait to retrieve details of.
        required: true
        type: string
      responses:
        200:
          description: OK
          examples:
            application/json:
              metadata:
                datafiles: []
                pagination:
                  currentPage: 0
                  pageSize: 0
                  totalCount: 0
                  totalPages: 0
                status: []
              result:
                description: Description of Plant Height
                name: Plant Height
                observationVariables:
                - CO_334:0100121
                - CO_334:0100122
                - CO_334:0100123
                traitDbId: "123"
                traitId: CO:123000007
          headers: {}
          schema:
            type: object
            properties:
              metadata:
                $ref: '#/definitions/metadata'
              result:
                $ref: '#/definitions/traitSummary'
            title: traitResponse
  /trials:
    get:
      tags:
      - Trials
      summary: List of trial summaries
      description: |2-
         Scope: PHENOTYPING. Status: ACCEPTED. Implementation target date: PAG2016.
        <a href="https://test-server.brapi.org/brapi/v1/trials"> test-server.brapi.org/brapi/v1/trials</a>
      produces:
      - application/json
      parameters:
      - name: programDbId
        in: query
        description: Program filter to only return trials associated with given program id.
        required: false
        type: string
      - name: locationDbId
        in: query
        description: Filter by location
        required: false
        type: string
      - name: pageSize
        in: query
        description: The size of the pages to be returned. Default is `1000`.
        required: false
        type: integer
      - name: page
        in: query
        description: Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.
        required: false
        type: integer
      - name: active
        in: query
        description: Filter active status true/false.
        required: false
        type: boolean
      - name: sortBy
        in: query
        description: Sort order. Name of the field to sorty by.
        required: false
        type: string
      - name: sortOrder
        in: query
        description: 'Sort order direction: asc/desc'
        required: false
        type: string
      responses:
        200:
          description: OK
          examples:
            application/json:
              metadata:
                datafiles: []
                pagination:
                  currentPage: 0
                  pageSize: 1000
                  totalCount: 2
                  totalPages: 1
                status: []
              result:
                data:
                - active: "false"
                  additionalInfo:
                    property1Name: property1Value
                    property2Name: property2Value
                    property3Name: property3Value
                  endDate: 2008-12-31
                  programDbId: "27"
                  programName: International Yield Trial
                  startDate: 2007-06-01
                  studies:
                  - locationName: Zimbabwe
                    studyDbId: "1"
                    studyName: Zimbabwe Yield Trial
                  - locationName: Kenya
                    studyDbId: "2"
                    studyName: Kenya Yield Trial
                  trialDbId: "1"
                  trialName: InternationalTrialA
                - active: "true"
                  additionalInfo:
                    property1Name: property1Value
                    property2Name: property2Value
                    property3Name: property3Value
                  endDate: 2009-12-31
                  programDbId: "35"
                  programName: 'International Yield Trial 2: Return of the Trial'
                  startDate: 2008-06-01
                  studies:
                  - locationName: Zimbabwe
                    studyDbId: "3"
                    studyName: Zimbabwe Yield Trial
                  - locationName: Kenya
                    studyDbId: "4"
                    studyName: Kenya Yield Trial
                  trialDbId: "2"
                  trialName: InternationalTrialB
          headers: {}
          schema:
            type: object
            properties:
              metadata:
                $ref: '#/definitions/metadata'
              result:
                $ref: '#/definitions/trialsResponse_result'
            title: trialsResponse
  /trials/{trialDbId}:
    get:
      tags:
      - Trials
      summary: Get trial by Id
      description: |2-
         Scope: PHENOTYPING. Status: ACCEPTED. Implementation target date: PAG2016.
        Get trial by id.
        <a href="https://test-server.brapi.org/brapi/v1/trials"> test-server.brapi.org/brapi/v1/trials/{trialDbId}</a>
      produces:
      - application/json
      parameters:
      - name: trialDbId
        in: path
        description: The internal trialDbId
        required: true
        type: string
      responses:
        200:
          description: OK
          examples:
            application/json:
              metadata:
                datafiles: []
                pagination:
                  currentPage: 0
                  pageSize: 0
                  totalCount: 0
                  totalPages: 0
                status: []
              result:
                active: "true"
                additionalInfo:
                  property2Name: property2Value
                  property3Name: property3Value
                  publications: pmid:239823988, doi:10.2345/GEZG3T23535
                contacts:
                - contactDbId: C025
                  email: j.doe@mail.com
                  instituteName: IRRI
                  name: John Doe
                  orcid: 0000-0002-0607-8728
                  type: Scientist
                - contactDbId: C026
                  instituteName: IRRI
                  name: Dave Peters
                datasetAuthorship:
                  datasetPUI: doi:10.15454/312953986E3
                  license: https://creativecommons.org/licenses/by/4.0
                endDate: 2008-12-31
                programDbId: 27
                programName: International Yield Trial
                startDate: 2007-06-01
                studies:
                - locationDbId: z-2
                  locationName: Zimbabwe
                  studyDbId: 1
                  studyName: Zimbabwe Yield Trial
                - locationDbId: k-1
                  locationName: Kenya
                  studyDbId: 2
                  studyName: Kenya Yield Trial
                trialDbId: 1
                trialName: InternationalTrialA
          headers: {}
          schema:
            type: object
            properties:
              metadata:
                $ref: '#/definitions/metadata'
              result:
                $ref: '#/definitions/trial'
            title: trialResponse
  /variables:
    get:
      tags:
      - Observation Variables
      summary: Variable list
      description: |-
        Call to retrieve a list of observationVariables available in the system. <br>
        <strong>Scope:</strong> CORE.
        <strong>Status:</strong> ACCEPTED.
      produces:
      - application/json
      parameters:
      - name: pageSize
        in: query
        description: The size of the pages to be returned. Default is `1000`.
        required: false
        type: integer
      - name: page
        in: query
        description: Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.
        required: false
        type: integer
      - name: traitClass
        in: query
        description: Variable's trait class (phenological, physiological, morphological, etc.)
        required: false
        type: string
      responses:
        200:
          description: OK
          examples:
            application/json:
              metadata:
                datafiles: []
                pagination:
                  currentPage: 0
                  pageSize: 1000
                  totalCount: 2
                  totalPages: 1
                status: []
              result:
                data:
                - method:
                    class: Estimation
                    methodDbId: CO_334:0010320
                    name: Visual Rating:total carotenoid by chart_method
                  name: CT_M_C
                  observationVariableDbId: CO_334:0100632
                  ontologyDbId: CO_334
                  ontologyName: Cassava
                  scale:
                    dataType: Numeric
                    decimalPlaces: 2
                    name: ug/g
                    scaleDbId: CO_334:0100526
                    validValues:
                      categories:
                      - 1=low
                      - 2=medium
                      - 3=high
                      max: 3
                      min: 1
                  trait:
                    class: physiological trait
                    name: Canopy temperature
                    traitDbId: CO_334:0100630
                - contextOfUse:
                  - Trial evaluation
                  - Nursery evaluation
                  crop: Cassava
                  growthStage: mature
                  institution: ""
                  language: EN
                  method:
                    class: Estimation
                    description: Assessment of the level of yellowness in cassava storage root pulp using the tc chart
                    methodDbId: CO_334:0010320
                    name: Visual Rating:total carotenoid by chart_method
                  name: caro_spectro
                  observationVariableDbId: CO_334:0100622
                  ontologyDbId: CO_334
                  ontologyName: Cassava
                  scale:
                    dataType: Numeric
                    decimalPlaces: 2
                    name: ug/g
                    scaleDbId: CO_334:0100526
                    validValues:
                      categories:
                      - 1=low
                      - 2=medium
                      - 3=high
                      max: 3
                      min: 1
                  scientist: ""
                  status: recommended
                  submissionTimestamp: 2016-05-13T17:43:11+01:00
                  synonyms:
                  - Carotenoid content by spectro
                  trait:
                    alternativeAbbreviations:
                    - CCS
                    attribute: carotenoid
                    class: physiological trait
                    description: Cassava storage root pulp carotenoid content
                    entity: root
                    mainAbbreviation: CC
                    name: Carotenoid content
                    status: recommended
                    synonyms:
                    - carotenoid content measure
                    traitDbId: CO_334:0100620
                    xref: TL_455:0003023
                  xref: TL_455:0003001
          headers: {}
          schema:
            type: object
            properties:
              metadata:
                $ref: '#/definitions/metadata'
              result:
                $ref: '#/definitions/observationVariablesResponse_result'
            title: observationVariablesResponse
  /variables-search:
    post:
      tags:
      - Observation Variables
      summary: Variable search
      description: |-
        Search observation variables.
        See <a href="https://brapi.docs.apiary.io/#introduction/search-services">Search Services</a> for additional implementation details. <br>
        <strong>Scope:</strong> CORE.
        <strong>Status:</strong> ACCEPTED.
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        required: false
        schema:
          $ref: '#/definitions/observationVariableSearchRequest'
      responses:
        200:
          description: OK
          examples:
            application/json:
              metadata:
                datafiles: []
                pagination:
                  currentPage: 0
                  pageSize: 2
                  totalCount: 300
                  totalPages: 150
                status: []
              result:
                data:
                - name: CT_M_C
                  observationVariableDbId: CO_334:0100632
                  ontologyDbId: CO_334
                  ontologyName: Cassava
                  trait:
                    name: Canopy temperature
                    traitDbId: CO_334:0100630
                - contextOfUse:
                  - Trial evaluation
                  - Nursery evaluation
                  crop: Cassava
                  growthStage: mature
                  institution: ""
                  language: EN
                  method:
                    class: Estimation
                    description: Assessment of the level of yellowness in cassava storage root pulp using the tc chart
                    methodDbId: CO_334:0010320
                    name: Visual Rating:total carotenoid by chart_method
                  name: caro_spectro
                  observationVariableDbId: CO_334:0100622
                  ontologyDbId: CO_334
                  ontologyName: Cassava
                  scale:
                    dataType: Numeric
                    decimalPlaces: 2
                    name: ug/g
                    scaleDbId: CO_334:0100526
                    validValues:
                      categories:
                      - 1=low
                      - 2=medium
                      - 3=high
                      max: 3
                      min: 1
                  scientist: ""
                  status: recommended
                  submissionTimestamp: 2016-05-13T23:21:56+01:00
                  synonyms:
                  - Carotenoid content by spectro
                  trait:
                    alternativeAbbreviations:
                    - CCS
                    attribute: carotenoid
                    class: physiological trait
                    description: Cassava storage root pulp carotenoid content
                    entity: root
                    mainAbbreviation: CC
                    name: Carotenoid content
                    status: recommended
                    synonyms:
                    - carotenoid content measure
                    traitDbId: CO_334:0100620
                    xref: TL_455:0003023
                  xref: TL_455:0003001
          headers: {}
          schema:
            properties:
              metadata:
                $ref: '#/definitions/metadata'
              result:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/definitions/observationVariable'
            title: observationVariablesResponse
  /variables/datatypes:
    get:
      tags:
      - Observation Variables
      summary: Variable data type list
      description: Call to retrieve a list of data types the variable can have.
      produces:
      - application/json
      parameters:
      - name: pageSize
        in: query
        description: The size of the pages to be returned. Default is `1000`.
        required: false
        type: integer
      - name: page
        in: query
        description: Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.
        required: false
        type: integer
      responses:
        200:
          description: OK
          examples:
            application/json:
              metadata:
                datafiles: []
                pagination:
                  currentPage: 0
                  pageSize: 1000
                  totalCount: 6
                  totalPages: 1
                status: []
              result:
                data:
                - Numeric
                - Categorical
                - Date
                - Text
                - Picture
                - Boolean
          headers: {}
          schema:
            properties:
              metadata:
                $ref: '#/definitions/metadata'
              result:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: string
            title: dataTypesResponse
  /variables/{observationVariableDbId}:
    get:
      tags:
      - Observation Variables
      summary: Variable details by id
      description: |-
        Retrieve variable details <br>
        <strong>Scope:</strong> CORE
        <strong>Status:</strong> ACCEPTED
      produces:
      - application/json
      parameters:
      - name: observationVariableDbId
        in: path
        description: string id of the variable
        required: true
        type: string
      responses:
        200:
          description: OK
          examples:
            application/json:
              metadata:
                datafiles: []
                pagination:
                  currentPage: 0
                  pageSize: 0
                  totalCount: 0
                  totalPages: 0
                status: []
              result:
                contextOfUse:
                - Trial evaluation
                - Nursery evaluation
                crop: Cassava
                growthStage: mature
                institution: ""
                language: EN
                method:
                  class: Estimation
                  description: Assessment of the level of yellowness in cassava storage root pulp using the tc chart
                  methodDbId: CO_334:0010320
                  name: Visual Rating:total carotenoid by chart_method
                name: caro_spectro
                observationVariableDbId: CO_334:0100632
                ontologyDbId: CO_334
                ontologyName: Cassava
                scale:
                  dataType: Numeric
                  decimalPlaces: 2
                  name: ug/g
                  scaleDbId: CO_334:0100526
                  validValues:
                    categories:
                    - 1=low
                    - 2=medium
                    - 3=high
                    max: 3
                    min: 1
                scientist: ""
                status: recommended
                submissionTimestamp: 2016-05-13T15:43:41+01:00
                synonyms:
                - Carotenoid content by spectro
                trait:
                  alternativeAbbreviations:
                  - CCS
                  attribute: carotenoid
                  class: physiological trait
                  description: Cassava storage root pulp carotenoid content
                  entity: root
                  mainAbbreviation: CC
                  name: Carotenoid content
                  status: recommended
                  synonyms:
                  - carotenoid content measure
                  traitDbId: CO_334:0100620
                  xref: TL_455:0003023
                xref: TL_455:0003001
          headers: {}
          schema:
            type: object
            properties:
              metadata:
                $ref: '#/definitions/metadata'
              result:
                $ref: '#/definitions/observationVariable'
            title: observationVariableResponse
  /vendor/plates:
    post:
      tags:
      - Vendor Samples
      summary: Register plates
      description: |-
        Note: if the samples array is empty, plate ID will be returned.
        Samples can be updated later.
      parameters:
      - in: body
        name: body
        required: false
        schema:
          $ref: '#/definitions/vendorPlateRequest'
      responses:
        200:
          description: OK
          examples: {}
          headers: {}
          schema:
            type: object
            properties:
              metadata:
                $ref: '#/definitions/metadata'
              result:
                $ref: '#/definitions/vendorPlatesResponse_result'
            title: vendorPlatesResponse
  /vendor/plates-search:
    get:
      tags:
      - Vendor Samples
      - Search Services
      summary: Search for plates
      description: |-
        Search for plates in the database.

        <a href="https://test-server.brapi.org/brapi/v1/vendor/plates-search"> test-server.brapi.org/brapi/v1/vendor/plates-search</a>
      parameters:
      - name: vendorProjectDbId
        in: query
        description: ""
        required: false
        type: string
      - name: vendorPlateDbId
        in: query
        description: ""
        required: false
        type: string
      - name: clientPlateDbId
        in: query
        description: ""
        required: false
        type: string
      - name: sampleInfo
        in: query
        description: ""
        required: false
        type: boolean
      - name: pageSize
        in: query
        description: The size of the pages to be returned. Default is `1000`.
        required: false
        type: integer
      - name: page
        in: query
        description: Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.
        required: false
        type: integer
      responses:
        200:
          description: OK
          examples: {}
          headers: {}
          schema:
            type: object
            properties:
              metadata:
                $ref: '#/definitions/metadata'
              result:
                $ref: '#/definitions/vendorPlatesResponse_result'
            title: vendorPlatesResponse
    post:
      tags:
      - Vendor Samples
      - Search Services
      summary: Search for plates
      description: |-
        Search for plates in the database.

        <a href="https://test-server.brapi.org/brapi/v1/vendor"> test-server.brapi.org/brapi/v1/vendor/plate-search</a>
      parameters:
      - in: body
        name: body
        required: false
        schema:
          $ref: '#/definitions/vendorPlateSearchRequest'
      responses:
        200:
          description: OK
          examples: {}
          headers: {}
          schema:
            type: object
            properties:
              metadata:
                $ref: '#/definitions/metadata'
              result:
                $ref: '#/definitions/vendorPlatesResponse_result'
            title: vendorPlatesResponse
  /vendor/plates/{vendorPlateDbId}:
    get:
      tags:
      - Vendor Samples
      summary: Plate Details by vendorPlateId
      description: " Response data types \n <table> <thead> <tr> <th>Variable</th>\
        \ <th>Datatype</th> <th>Description</th> <th>Required</th> </tr> </thead>\
        \ <tbody> <tr> <td>metadata</td> <td>object</td> <td>pagination, status</td>\
        \ <td>Y</td> </tr> <tr> <td>pagination</td> <td>object</td> <td>pageSize,\
        \ currentPage, totalCount, totalPages</td> <td>Y</td> </tr> <tr> <td>status</td>\
        \ <td>list</td> <td>code, message</td> <td>Y</td> </tr> <tr> <td>result</td>\
        \ <td>Object</td> <td>Object containing MCPD data</td> <td>Y</td> </tr> <tr>\
        \ <td>vendorProjectDbId</td> <td>string</td> <td>the name or identifier given\
        \ to a project by the vendor</td> <td>Y</td> </tr> <tr> <td>vendorPlateDbId</td>\
        \ <td>string</td> <td>the name or identifier of the plate, given by the vendor</td>\
        \ <td>Y</td> </tr> <tr> <td>clientPlateDbId</td> <td>string</td> <td>the name\
        \ of the plate, given by the client</td> <td>Y</td> </tr> <tr> <td>barcode</td>\
        \ <td>string</td> <td>a string that can be represented as a barcode, identifying\
        \ this plate</td> <td>N</td> </tr> <tr> <td>plateFormat</td> <td>string</td>\
        \ <td>defines that plate format, usually Plate_96 or tubes for plateless format</td>\
        \ <td>Y</td> </tr> <tr> <td>sampleType</td> <td>string</td> <td>DNA or RNA\
        \ or Tissue, etc.</td> <td>Y</td> </tr> <tr> <td>status</td> <td>string</td>\
        \ <td>The status of the plate in the processing pipeline. Typically,  &quot;Received&quot;,\
        \ &quot;Processing&quot;, &quot;QC_passed&quot;, QC_failed&quot;, &quot;Completed&quot;\
        \ (as per vendor-requirements call)</td> <td>Y</td> </tr> <tr> <td>samples</td>\
        \ <td>Array</td> <td>list of samples in the plate</td> <td>Y</td> </tr> </tbody>\
        \ </table>\n <a href=\"https://test-server.brapi.org/brapi/v1/vendor\"> test-server.brapi.org/brapi/v1/vendor/plate/{vendorPlateDbId}</a>"
      produces:
      - application/json
      parameters:
      - name: vendorPlateDbId
        in: path
        description: The plate ID defined by the vendor
        required: true
        type: string
      responses:
        200:
          description: OK
          examples:
            application/json:
              metadata:
                datafiles: []
                pagination:
                  currentPage: 0
                  pageSize: 0
                  totalCount: 0
                  totalPages: 0
                status: []
              result:
                clientPlateDbId: def456
                plateFormat: Plate_96
                sampleType: DNA
                samples:
                - column: (optional)
                  concentration: (ng/ul)
                  row: (optional)
                  sampleDbId: sample_name
                  taxonId:
                    sourceName: ncbiTaxon
                    taxonId: http://purl.obolibrary.org/obo/NCBITaxon_4641
                  tissueType: ""
                  volume: (ul)
                  well: (optional)
                status: (not null)
                statusTimeStamp: 2017-06-01 01:57 GMT
                vendorBarcode: ""
                vendorBarcodeImageURL: ""
                vendorPlateDbId: "8338"
                vendorProjectDbId: abc123
          headers: {}
          schema:
            type: object
            properties:
              metadata:
                $ref: '#/definitions/metadata'
              result:
                $ref: '#/definitions/vendorPlate'
            title: vendorPlateResponse
  /vendor/specifications:
    get:
      tags:
      - Vendor Samples
      summary: Vendor specification
      description: |2-
         Defines the plate format specification for the vendor.
        <a href="https://test-server.brapi.org/brapi/v1/vendor"> test-server.brapi.org/brapi/v1/vendor/specifications</a>
      produces:
      - application/json
      parameters: []
      responses:
        200:
          description: OK
          examples:
            application/json:
              metadata:
                datafiles: []
                pagination:
                  currentPage: 0
                  pageSize: 0
                  totalCount: 0
                  totalPages: 0
                status: []
              result:
                additionalInfo: {}
                contactName: John Doe
                platforms:
                - contactEmail: ""
                  contactName: ""
                  contactPhone: ""
                  deliverables:
                  - description: ""
                    format: ""
                    name: ""
                  platformDescription: ""
                  platformName: GBS
                  platformURL: ""
                  shippingAddress: ""
                  specificRequirements: {}
                  standardRequirements:
                    blankWellPosition:
                      numberOfBlanksPerPlate: ""
                      positions:
                      - random
                      - A01
                      - H12
                    inputFormatDetails: https://...
                    inputFormats:
                    - Plate_96
                    - Tubes
                    maxConcentration: ""
                    maxVolume: ""
                    minConcentration: ""
                    minSampleNumber: ""
                    minVolume: ""
                    plateOrientation: rowFirst|columnFirst
                    sampleTypeDetails: https://...
                    sampleTypes:
                    - ""
                    - ""
                  statuses:
                  - statusDescription: Platesarereceivedbyvendor.
                    statusName: received
                  - statusDescription: Resultfilesareready.
                    statusName: completed
                  - statusDescription: Platesarerejectedbyvendor
                    statusName: rejected
                  taxonomyIdSystem:
                    URI: https://...
                    name: NCBITaxonomyId
                  tissueIdSystem:
                    URI: https://...
                    name: DArT
                vendorAddress: 123 Lane St
                vendorCity: Metropolis
                vendorCountry: USA
                vendorDescription: Gene Sequencing Vendor
                vendorEmail: jdoe@example.org
                vendorName: Gene Sequencing Vendor
                vendorPhone: 1-234-567-8910
                vendorURL: www.example.org
          headers: {}
          schema:
            type: object
            properties:
              metadata:
                $ref: '#/definitions/metadata'
              result:
                $ref: '#/definitions/vendorSpecification'
            title: vendorSpecificationResponse
definitions:
  alleleMatrixDetails:
    type: object
    properties:
      description:
        type: string
        description: How the matrix was generated
      lastUpdated:
        type: string
        format: date-time
        description: A date format
      matrixDbId:
        type: string
        description: ID of the matrix
      name:
        type: string
        description: Name of the matrix
      studyDbId:
        type: string
        description: Link to the study where the matrix was produced
  alleleMatrixSearchRequest:
    properties:
      expandHomozygotes:
        type: boolean
        description: Should homozygotes be expanded (true) or collapsed into a single occurence (false)
      format:
        type: string
        description: The data format of the response data. ie "json", "tsv", etc
      markerDbId:
        type: array
        description: An ID which uniquely identifies a Marker
        items:
          type: string
      markerprofileDbId:
        type: array
        description: An ID which uniquely identifies a Marker Profile
        items:
          type: string
      matrixDbId:
        type: array
        description: An ID which uniquely identifies an Allele Matrix
        items:
          type: string
      page:
        type: integer
        description: Which page of the "data" array to return. The page indexing starts at 0 (page=0 will return the first page). Default is 0.
      pageSize:
        type: integer
        description: The maximum number of items to return per page of the "data" array. Default is 1000.
      sepPhased:
        type: string
        description: The string to use as a separator for phased allele calls.
      sepUnphased:
        type: string
        description: The string to use as a separator for unphased allele calls.
      unknownString:
        type: string
        description: The string to use as a representation for missing data.
  alleleMatrixValues:
    type: object
    properties:
      data:
        type: array
        description: 'Is an array of arrays; each inner array has three entries: ```markerDbId```,
          ```markerprofileDbId```, ```alleleCall```. Scores have to be represented
          as described further up. e.g. unknown data as "N", etc. Missing data can
          be skipped.'
        items:
          type: array
          items:
            type: string
  breedingMethod:
    type: object
    required:
    - breedingMethodDbId
    properties:
      abbreviation:
        type: string
        description: an abbreviation for the name of this breeding method
      breedingMethodDbId:
        type: string
        description: the unique identifier for this breeding method
      description:
        type: string
        description: human readable description of the breeding method
      name:
        type: string
        description: human readable name of the breeding method
  call:
    type: object
    required:
    - call
    - datatypes
    - methods
    properties:
      call:
        type: string
        description: The name of the available call as recorded in the documentation
      datatypes:
        type: array
        description: The possible data formats returned by the available call
        items:
          type: string
      methods:
        type: array
        description: The possible HTTP Methods to be used with the available call
        items:
          type: string
      versions:
        type: array
        description: The supported versions of a particular call
        items:
          type: string
          enum:
          - "1.0"
          - "1.1"
          - "1.2"
          - "1.3"
  contact:
    properties:
      contactDbId:
        type: string
        description: The ID which uniquely identifies this contact
      email:
        type: string
        description: 'The contacts email address '
      instituteName:
        type: string
        description: The name of the institution which this contact is part of
      name:
        type: string
        description: The full name of this contact person
      orcid:
        type: string
        description: The Open Researcher and Contributor ID for this contact person (orcid.org)
      type:
        type: string
        description: 'The type of person this contact represents (ex: Coordinator,
          Scientist, PI, etc.)'
  dataLink:
    properties:
      name:
        type: string
        description: The name of the external data link
      type:
        type: string
        description: The type of external data link
      url:
        type: string
        description: The URL which links to external data
  genomeMap:
    type: object
    properties:
      comments:
        type: string
        description: Additional comments
      linkageGroupCount:
        type: integer
        format: int32
        description: The number of linkage groups present in this genome map
      mapDbId:
        type: string
        description: The ID which uniquely identifies this genome map
      markerCount:
        type: integer
        format: int32
        description: The number of markers present in this genome map
      name:
        type: string
        description: A human readable name for this genome map
      publishedDate:
        type: string
        format: date
        description: The date this genome was published
      species:
        type: string
        description: 'The name of the species '
      type:
        type: string
        description: The type of map this represents, ussually "Genetic"
      unit:
        type: string
        description: The units used to describe the data in this map
  germplasm:
    properties:
      accessionNumber:
        type: string
        description: This is the unique identifier for accessions within a genebank, and is assigned when a sample is entered into the genebank collection
      acquisitionDate:
        type: string
        format: date
        description: The date this germplasm was aquired by the genebank (MCPD)
      biologicalStatusOfAccessionCode:
        type: integer
        description: The 3 digit code representing the biological status of the accession (MCPD)
      breedingMethodDbId:
        type: string
        description: The unique identifier for the breeding method used to create this germplasm
      commonCropName:
        type: string
        description: Common name for the crop (MCPD)
      countryOfOriginCode:
        type: string
        description: 3-letter ISO 3166-1 code of the country in which the sample was originally collected (MCPD)
      defaultDisplayName:
        type: string
        description: Human readable name used for display purposes
      donors:
        type: array
        description: List of donor institutes (MCPD)
        items:
          $ref: '#/definitions/germplasm_donors'
      genus:
        type: string
        description: Genus name for taxon. Initial uppercase letter required. (MCPD)
      germplasmDbId:
        type: string
        description: The ID which uniquely identifies a germplasm within the given database server
      germplasmName:
        type: string
        description: Name of the germplasm. It can be the prefered name and does not have to be unique.
      germplasmPUI:
        type: string
        description: The Permanent Unique Identifier which represents a germplasm
      instituteCode:
        type: string
        description: The code for the Institute that has bred the material. (MCPD)
      instituteName:
        type: string
        description: The name of the institution which bred the material (MCPD)
      pedigree:
        type: string
        description: The cross name and optional selection history.
      seedSource:
        type: string
        description: 'The source of the seed '
      species:
        type: string
        description: Specific epithet portion of the scientific name in lowercase letters. (MCPD)
      speciesAuthority:
        type: string
        description: The authority organization responsible for tracking and maintaining the species name (MCPD)
      subtaxa:
        type: string
        description: Subtaxon can be used to store any additional taxonomic identifier. (MCPD)
      subtaxaAuthority:
        type: string
        description: ' The authority organization responsible for tracking and maintaining
          the subtaxon information (MCPD)'
      synonyms:
        type: array
        description: List of alternative names or IDs used to reference this germplasm
        items:
          type: string
      taxonIds:
        type: array
        description: The list of IDs for this SPECIES from different sources. If present, NCBI Taxon should be always listed as "ncbiTaxon" preferably with a purl. The rank of this ID should be species.
        items:
          $ref: '#/definitions/taxonID'
      typeOfGermplasmStorageCode:
        type: array
        description: The 2 digit code representing the type of storage this germplasm is kept in at a genebank. (MCPD)
        items:
          type: string
  germplasmAttribute:
    properties:
      attributeCode:
        type: string
        description: Short abbreviation which represents this attribute
      attributeDbId:
        type: string
        description: The ID which uniquely identifies this attribute within the given database server
      attributeName:
        type: string
        description: The human readable name of this attribute
      determinedDate:
        type: string
        format: date
        description: The date the value of this attribute was determined for a given germplasm
      value:
        type: string
        description: The value of this attribute for a given germplasm
  germplasmAttributeCategory:
    properties:
      attributeCategoryDbId:
        type: string
        description: The ID which uniquely identifies this attribute category within the given database server
      name:
        type: string
        description: A human readable name for this attribute category
  germplasmAttributeDef:
    properties:
      attributeCategoryDbId:
        type: string
        description: The ID which uniquely identifies this attribute category within the given database server
      attributeDbId:
        type: string
        description: The ID which uniquely identifies this attribute within the given database server
      code:
        type: string
        description: Short abbreviation which represents this attribute
      datatype:
        type: string
        description: The type of data represented by this attribute
      description:
        type: string
        description: A human readable description of this attribute
      name:
        type: string
        description: A human readable name for this attribute
      uri:
        type: string
        description: The URI reference some external documentation or ontology for this attribute
      values:
        type: array
        description: List of acceptable values for this attribute
        items:
          type: string
  germplasmAttributeList:
    properties:
      data:
        type: array
        description: List of attributes associated with the given germplasm
        items:
          $ref: '#/definitions/germplasmAttribute'
      germplasmDbId:
        type: string
        description: The ID which uniquely identifies a germplasm within the given database server
  germplasmMarkerprofilesList:
    properties:
      germplasmDbId:
        type: string
        description: The ID which uniquely identifies a germplasm within the given database server
      markerprofileDbIds:
        type: array
        description: The ID which uniquely identifies a marker profile within the given database server
        items:
          type: string
  germplasmSearchRequest:
    properties:
      accessionNumbers:
        type: array
        description: List unique identifiers for accessions within a genebank
        items:
          type: string
      commonCropNames:
        type: array
        description: List crops to search by
        items:
          type: string
      germplasmDbIds:
        type: array
        description: List of IDs which uniquely identify germplasm
        items:
          type: string
      germplasmGenus:
        type: array
        description: List of Genus names to identify germplasm
        items:
          type: string
      germplasmNames:
        type: array
        description: List of human readable names to identify germplasm
        items:
          type: string
      germplasmPUIs:
        type: array
        description: List of Permanent Unique Identifiers to identify germplasm
        items:
          type: string
      germplasmSpecies:
        type: array
        description: List of Species names to identify germplasm
        items:
          type: string
      page:
        type: integer
        description: Which page of the "data" array to return. The page indexing starts at 0 (page=0 will return the first page). Default is 0.
      pageSize:
        type: integer
        description: The maximum number of items to return per page of the "data" array. Default is 1000.
  germplasmSummary:
    properties:
      accessionNumber:
        type: string
        description: This is the unique identifier for accessions within a genebank, and is assigned when a sample is entered into the genebank collection
      entryNumber:
        type: string
        description: The entry number for this germplasm
      germplasmDbId:
        type: string
        description: The ID which uniquely identifies a germplasm within the given database server
      germplasmName:
        type: string
        description: Name of the germplasm. It can be the prefered name and does not have to be unique.
      germplasmPUI:
        type: string
        description: The Permanent Unique Identifier which represents a germplasm
      pedigree:
        type: string
        description: The cross name and optional selection history.
      seedSource:
        type: string
        description: 'The source of the seed '
      synonyms:
        type: array
        description: List of alternative names or IDs used to reference this germplasm
        items:
          type: string
  germplasmSummaryList:
    properties:
      data:
        type: array
        description: List of germplasm associated with a given trial and study
        items:
          $ref: '#/definitions/germplasmSummary'
      studyDbId:
        type: string
        description: The ID which uniquely identifies a study within the given database server
      trialName:
        type: string
        description: The human readable name of a trial
  linkageGroup:
    type: object
    properties:
      linkageGroupName:
        type: string
        description: The Uniquely Identifiable name of this linkage group
      markerCount:
        type: integer
        description: The number of markers associated with this linkage group
      maxPosition:
        type: integer
        description: The maximum position of a marker within this linkage group
  location:
    type: object
    properties:
      abbreviation:
        type: string
        description: An abbreviation which represents this location
      abreviation:
        type: string
        description: 'Deprecated  <strong>Use abbreviation</strong> '
      additionalInfo:
        type: object
        description: Additional arbitrary info
        additionalProperties:
          type: string
      altitude:
        type: number
        description: The altitude of this location
      countryCode:
        type: string
        description: '[ISO_3166-1_alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3)
          spec'
      countryName:
        type: string
        description: The full name of the country where this location is
      instituteAddress:
        type: string
        description: The street address of the institute representing this location
      instituteAdress:
        type: string
        description: 'Deprecated  <strong>Use instituteAddress</strong> '
      instituteName:
        type: string
        description: each institute/laboratory can have several experimental field
      latitude:
        type: number
        description: The latitude of this location
      locationDbId:
        type: string
        description: string identifier
      locationType:
        type: string
        description: The type of location this represents (ex. Breeding Location, Storage Location, etc)
      longitude:
        type: number
        description: the longitude of this location
      name:
        type: string
        description: A human readable name for this location
  mapDetails:
    type: object
    properties:
      data:
        type: array
        description: List of linkage group details associated with a given map
        items:
          $ref: '#/definitions/linkageGroup'
      linkageGroups:
        type: array
        description: '**Deprecated** Use "data"'
        items:
          $ref: '#/definitions/linkageGroup'
      mapDbId:
        type: string
        description: The ID which uniquely identifies this genome map
      name:
        type: string
        description: A human readable name for this map
      type:
        type: string
        description: The type of map this represents, ussually "Genetic"
      unit:
        type: string
        description: The units used to describe the data in this map
  marker:
    properties:
      analysisMethods:
        type: array
        description: List of the genotyping platforms used to interrogate the marker
        items:
          type: string
      defaultDisplayName:
        type: string
        description: A string representing the marker that will be meaningful to the user
      markerDbId:
        type: string
        description: Internal db identifier
      refAlt:
        type: array
        description: List of the reference (as the first item) and alternatives (the remaining items)
        items:
          type: string
      synonyms:
        type: array
        description: List of other names for this marker
        items:
          type: string
      type:
        type: string
        description: The type of marker, e.g. SNP
  markerProfile:
    properties:
      analysisMethod:
        type: string
        description: The type of analysis performed to determine a set of marker data
      data:
        type: array
        description: |-
          <strong>Required</strong>
          array of marker-name/score pairs
        items:
          type: object
          additionalProperties:
            type: string
      extractDbId:
        type: string
        description: <strong>Required</strong>
      germplasmDbId:
        type: string
        description: <strong>Required</strong>
      markerprofileDbId:
        type: string
        description: Unique in the database. Can be a catenation of unique IDs for germplasm and extract. <strong>Required</strong>
      uniqueDisplayName:
        type: string
        description: Human readable display name for this marker profile
  markerProfileDescription:
    type: object
    properties:
      analysisMethod:
        type: string
        description: The type of analysis performed to determine a set of marker data
      extractDbId:
        type: string
        description: ' The ID which uniquely identifies this data extract'
      germplasmDbId:
        type: string
        description: ' The ID which uniquely identifies a germplasm'
      markerprofileDbId:
        type: string
        description: Unique in the database. Can be a catenation of unique IDs for germplasm and extract. <strong>Required</strong>
      resultCount:
        type: integer
        description: Number of markers present in the marker profile
      sampleDbId:
        type: string
        description: The ID which uniquely identifies a sample
      uniqueDisplayName:
        type: string
        description: Human readable display name for this marker profile
  markerSummaryLinkageGroup:
    properties:
      location:
        type: string
        description: The position of a marker within a linkage group
      markerDbId:
        type: string
        description: Internal db identifier
      markerName:
        type: string
        description: The human readable name for a marker
  markerSummaryMap:
    properties:
      linkageGroupName:
        type: string
        description: The Uniquely Identifiable name of this linkage group
      location:
        type: string
        description: The position of a marker within a linkage group
      markerDbId:
        type: string
        description: Internal db identifier
      markerName:
        type: string
        description: The human readable name for a marker
  markersSearchRequest:
    properties:
      includeSynonyms:
        type: boolean
        description: Should an array of synonyms be included in the response
      markerDbIds:
        type: array
        description: 'List of IDs which uniquely identify markers '
        items:
          type: string
      matchMethod:
        type: string
        description: How to perform string matching during search. 'exact' will search for exact, case sensitive matches only. 'case_insensitive' will search for exact matches, but case insensitive. 'wildcard' will allow the special characters '*' (star) and '%' (percent) to represent variable length arbitrary strings, and the special character '?' (question) to represent one arbitrary character.
        enum:
        - exact
        - case_insensitive
        - wildcard
      name:
        type: string
        description: The search pattern for the marker name or synonym.
      page:
        type: integer
        description: Which page of the "data" array to return. The page indexing starts at 0 (page=0 will return the first page). Default is 0.
      pageSize:
        type: integer
        description: The maximum number of items to return per page of the "data" array. Default is 1000.
      type:
        type: string
        description: The type of marker, e.g. SNP
  metadata:
    type: object
    properties:
      datafiles:
        type: array
        description: The datafiles key contains a list of file paths, which can be relative or complete URLs. These files contain additional information related to the returned object and can be retrieved by a subsequent call. The empty list should be returned if no additional data files are present.
        items:
          type: string
      pagination:
        $ref: '#/definitions/metadata_pagination'
      status:
        type: array
        description: The status field contains a list of informational status messages from the server. If no status is reported, an empty list should be returned. See Error Reporting for more information.
        items:
          $ref: '#/definitions/status'
  method:
    type: object
    properties:
      class:
        type: string
        description: 'Method class (examples: "Measurement", "Counting", "Estimation",
          "Computation", etc.'
      description:
        type: string
        description: Method description.
      formula:
        type: string
        description: For computational methods i.e., when the method consists in assessing the trait by computing measurements, write the generic formula used for the calculation
      methodDbId:
        type: string
        description: Method unique identifier
      name:
        type: string
        description: Method name (usually a short name)
      reference:
        type: string
        description: Bibliographical reference describing the method.
    description: Method metadata
  newObservationDbIds:
    properties:
      observations:
        type: array
        description: List of observation references which have been created or updated
        items:
          $ref: '#/definitions/newObservationDbIds_observations'
  newObservationUnitDbIds:
    properties:
      observationUnitDbIds:
        type: array
        description: List of observation unit references which have been created or updated
        items:
          type: string
  newObservationUnitRequest:
    properties:
      X:
        type: string
        description: The X position coordinate for an observation unit. Different systems may use different coordinate systems.
      Y:
        type: string
        description: The Y position coordinate for an observation unit. Different systems may use different coordinate systems.
      blockNumber:
        type: string
        description: The block number for an observation unit. Different systems may use different block designs.
      entryNumber:
        type: string
        description: The entry number for an observation unit. Different systems may use different entry systems.
      entryType:
        type: string
        description: The type of entry for this observation unit. ex. "check", "test", "filler"
      germplasmDbId:
        type: string
        description: ' The ID which uniquely identifies a germplasm'
      observationLevel:
        type: string
        description: The level of an observation unit. ex. "plot", "plant"
      observationUnitDbId:
        type: string
        description: The ID which uniquely identifies an observation unit
      observationUnitName:
        type: string
        description: A human readable name for an observation unit
      observationUnitXref:
        type: array
        description: A list of external references to this observation unit
        items:
          $ref: '#/definitions/observationUnitXref'
      observations:
        type: array
        description: List of observations associated with this observation unit
        items:
          $ref: '#/definitions/observation'
      plantNumber:
        type: string
        description: 'The plant number in a field. Applicable for observationLevel:
          "plant"'
      plotNumber:
        type: string
        description: 'The plot number in a field. Applicable for observationLevel:
          "plot"'
      replicate:
        type: string
        description: The replicate number of an observation unit. May be the same as blockNumber.
      studyDbId:
        type: string
        description: The ID which uniquely identifies a study within the given database server
      treatments:
        type: array
        description: List of treatments applied to an observation unit.
        items:
          $ref: '#/definitions/observationTreatment'
  newObservationsRequest:
    properties:
      observations:
        type: array
        description: List of observation references to be created or updated
        items:
          $ref: '#/definitions/newObservationsRequest_observations'
  newObservationsRequestDeprecated:
    properties:
      commit:
        type: string
        description: Should these changes be commited
      data:
        type: array
        description: |-
          <strong>Required</strong>
          array of marker-name/score pairs
        items:
          $ref: '#/definitions/newObservationsRequestDeprecated_data'
      transactionDbId:
        type: string
        description: The ID representing this transaction
  newObservationsTableRequest:
    properties:
      data:
        type: array
        description: Matrix of observation data recorded for different observation variables across different observation units
        items:
          type: array
          items:
            type: string
      headerRow:
        type: array
        description: The header row describing the data matrix. Append 'observationVariableDbIds' for complete header row.
        items:
          type: string
      metadata:
        type: string
        description: DEPRECATED
      observationVariableDbIds:
        type: array
        description: The list of observation variables which have values recorded for them in the data matrix. Append to the 'headerRow' for comlete header row.
        items:
          type: string
      result:
        type: string
        description: DEPRECATED
  newSampleDbId:
    properties:
      metadata:
        description: Metadata of this response
        $ref: '#/definitions/metadata'
      result:
        $ref: '#/definitions/newSampleDbId_result'
  observation:
    properties:
      germplasmDbId:
        type: string
        description: ' The ID which uniquely identifies a germplasm'
      germplasmName:
        type: string
        description: Name of the germplasm. It can be the prefered name and does not have to be unique.
      observationDbId:
        type: string
        description: The ID which uniquely identifies an observation
      observationLevel:
        type: string
        description: The level of an observation unit. ex. "plot", "plant"
      observationTimeStamp:
        type: string
        format: date-time
        description: 'The date and time  when this observation was made '
      observationUnitDbId:
        type: string
        description: The ID which uniquely identifies an observation unit
      observationUnitName:
        type: string
        description: A human readable name for an observation unit
      observationVariableDbId:
        type: string
        description: The ID which uniquely identifies an observation variable
      observationVariableName:
        type: string
        description: A human readable name for an observation variable
      operator:
        type: string
        description: The name or identifier of the entity which collected the observation
      studyDbId:
        type: string
        description: The ID which uniquely identifies a study within the given database server
      uploadedBy:
        type: string
        description: The name or id of the user who uploaded the observation to the database system
      value:
        type: string
        description: The value of the data collected as an observation
  observationSummary:
    properties:
      collector:
        type: string
        description: The name or identifier of the entity which collected the observation
      observationDbId:
        type: string
        description: The ID which uniquely identifies an observation
      observationTimeStamp:
        type: string
        format: date-time
        description: 'The date and time  when this observation was made '
      observationVariableDbId:
        type: string
        description: The ID which uniquely identifies an observation variable
      observationVariableName:
        type: string
        description: A human readable name for an observation variable
      value:
        type: string
        description: The value of the data collected as an observation
  observationSummaryPhenotype:
    properties:
      collector:
        type: string
        description: The name or identifier of the entity which collected the observation
      observationDbId:
        type: string
        description: The ID which uniquely identifies an observation
      observationTimeStamp:
        type: string
        format: date-time
        description: 'The date and time  when this observation was made '
      observationVariableDbId:
        type: string
        description: The ID which uniquely identifies an observation variable
      observationVariableName:
        type: string
        description: A human readable name for an observation variable
      season:
        type: string
        description: The season when the observation data was collected
      value:
        type: string
        description: The value of the data collected as an observation
  observationTreatment:
    properties:
      factor:
        type: string
        description: The type of treatment/factor. ex. 'fertilizer', 'inoculation', 'irrigation', etc
      modality:
        type: string
        description: The treatment/factor descritpion. ex. 'low fertilizer', 'yellow rust inoculation', 'high water', etc
  observationUnit:
    properties:
      X:
        type: string
        description: The X position coordinate for an observation unit. Different systems may use different coordinate systems.
        title: xCoordinate
      Y:
        type: string
        description: The Y position coordinate for an observation unit. Different systems may use different coordinate systems.
        title: yCoordinate
      blockNumber:
        type: string
        description: The block number for an observation unit. Different systems may use different block designs.
      entryNumber:
        type: string
        description: The entry number for an observation unit. Different systems may use different entry systems.
      entryType:
        type: string
        description: The type of entry for this observation unit. ex. "check", "test", "filler"
      germplasmDbId:
        type: string
        description: ' The ID which uniquely identifies a germplasm'
      germplasmName:
        type: string
        description: Name of the germplasm. It can be the prefered name and does not have to be unique.
      observationLevel:
        type: string
        description: The level of an observation unit. ex. "plot", "plant"
      observationLevels:
        type: string
        description: Concatenation of the levels of this observationUnit. Used to handle non canonical level structures. Format levelType:levelID,levelType:levelID
      observationUnitDbId:
        type: string
        description: The ID which uniquely identifies an observation unit
      observationUnitName:
        type: string
        description: A human readable name for an observation unit
      observationUnitXref:
        type: array
        description: A list of external references to this observation unit
        items:
          $ref: '#/definitions/observationUnitXref'
      observations:
        type: array
        description: List of observations associated with this observation unit
        items:
          $ref: '#/definitions/observation'
      plantNumber:
        type: string
        description: 'The plant number in a field. Applicable for observationLevel:
          "plant"'
      plotNumber:
        type: string
        description: 'The plot number in a field. Applicable for observationLevel:
          "plot"'
      programName:
        type: string
        description: The human readable name of a program
      replicate:
        type: string
        description: The replicate number of an observation unit. May be the same as blockNumber.
      studyDbId:
        type: string
        description: The ID which uniquely identifies a study within the given database server
      studyLocation:
        type: string
        description: The human readable name of a location associated with this study
      studyLocationDbId:
        type: string
        description: The ID which uniquely identifies a location, associated with this study
      studyName:
        type: string
        description: The human readable name for a study
      treatments:
        type: array
        description: List of treatments applied to an observation unit.
        items:
          $ref: '#/definitions/observationTreatment'
  observationUnitPhenotype:
    properties:
      X:
        type: string
        description: The X position coordinate for an observation unit. Different systems may use different coordinate systems.
        title: xCoordinate
      Y:
        type: string
        description: The Y position coordinate for an observation unit. Different systems may use different coordinate systems.
        title: yCoordinate
      blockNumber:
        type: string
        description: The block number for an observation unit. Different systems may use different block designs.
      entryNumber:
        type: string
        description: The entry number for an observation unit. Different systems may use different entry systems.
      entryType:
        type: string
        description: The type of entry for this observation unit. ex. "check", "test", "filler"
      germplasmDbId:
        type: string
        description: ' The ID which uniquely identifies a germplasm'
      germplasmName:
        type: string
        description: Name of the germplasm. It can be the prefered name and does not have to be unique.
      observationLevel:
        type: string
        description: The level of an observation unit. ex. "plot", "plant"
      observationLevels:
        type: string
        description: Concatenation of the levels of this observationUnit. Used to handle non canonical level structures. Format levelType:levelID,levelType:levelID
      observationUnitDbId:
        type: string
        description: The ID which uniquely identifies an observation unit
      observationUnitName:
        type: string
        description: A human readable name for an observation unit
      observationUnitXref:
        type: array
        description: A list of external references to this observation unit
        items:
          $ref: '#/definitions/observationUnitXref'
      observations:
        type: array
        description: List of observations associated with this observation unit
        items:
          $ref: '#/definitions/observationSummaryPhenotype'
      plantNumber:
        type: string
        description: 'The plant number in a field. Applicable for observationLevel:
          "plant"'
      plotNumber:
        type: string
        description: 'The plot number in a field. Applicable for observationLevel:
          "plot"'
      programName:
        type: string
        description: The human readable name of a program
      replicate:
        type: string
        description: The replicate number of an observation unit. May be the same as blockNumber.
      studyDbId:
        type: string
        description: The ID which uniquely identifies a study within the given database server
      studyLocation:
        type: string
        description: The human readable name of a location associated with this study
      studyLocationDbId:
        type: string
        description: The ID which uniquely identifies a location, associated with this study
      studyName:
        type: string
        description: The human readable name for a study
      treatments:
        type: array
        description: List of treatments applied to an observation unit.
        items:
          $ref: '#/definitions/observationTreatment'
  observationUnitPosition:
    properties:
      X:
        type: string
        description: The X position coordinate for an observation unit. Different systems may use different coordinate systems.
      Y:
        type: string
        description: The Y position coordinate for an observation unit. Different systems may use different coordinate systems.
      additionalInfo:
        type: object
        description: Additional arbitrary info
        additionalProperties:
          type: string
      blockNumber:
        type: string
        description: The block number for an observation unit. Different systems may use different block designs.
      entryType:
        type: string
        description: The type of entry for this observation unit. ex. "check", "test", "filler"
        enum:
        - CHECK
        - TEST
        - FILLER
      germplasmDbId:
        type: string
        description: ' The ID which uniquely identifies a germplasm'
      germplasmName:
        type: string
        description: Name of the germplasm. It can be the prefered name and does not have to be unique.
      observationLevel:
        type: string
        description: The level of an observation unit. ex. "plot", "plant"
      observationUnitDbId:
        type: string
        description: The ID which uniquely identifies an observation unit
      observationUnitName:
        type: string
        description: A human readable name for an observation unit
      replicate:
        type: string
        description: The replicate number of an observation unit. May be the same as blockNumber.
      studyDbId:
        type: string
        description: The ID which uniquely identifies a study within the given database server
  observationUnitStudy:
    properties:
      X:
        type: string
        description: The X position coordinate for an observation unit. Different systems may use different coordinate systems.
        title: xCoordinate
      Y:
        type: string
        description: The Y position coordinate for an observation unit. Different systems may use different coordinate systems.
        title: yCoordinate
      blockNumber:
        type: string
        description: The block number for an observation unit. Different systems may use different block designs.
      entryNumber:
        type: string
        description: The entry number for an observation unit. Different systems may use different entry systems.
      entryType:
        type: string
        description: The type of entry for this observation unit. ex. "check", "test", "filler"
      germplasmDbId:
        type: string
        description: ' The ID which uniquely identifies a germplasm'
      germplasmName:
        type: string
        description: Name of the germplasm. It can be the prefered name and does not have to be unique.
      observationUnitDbId:
        type: string
        description: The ID which uniquely identifies an observation unit
      observationUnitName:
        type: string
        description: A human readable name for an observation unit
      observationUnitXref:
        type: array
        description: A list of external references to this observation unit
        items:
          $ref: '#/definitions/observationUnitXref'
      observations:
        type: array
        description: List of observations associated with this observation unit
        items:
          $ref: '#/definitions/observationSummary'
      pedigree:
        type: string
        description: The string representation of the pedigree of this observation unit
      plantNumber:
        type: string
        description: 'The plant number in a field. Applicable for observationLevel:
          "plant"'
      plotNumber:
        type: string
        description: 'The plot number in a field. Applicable for observationLevel:
          "plot"'
      replicate:
        type: string
        description: The replicate number of an observation unit. May be the same as blockNumber.
  observationUnitXref:
    properties:
      id:
        type: string
        description: The unique ID in the external reference 'source' system
      source:
        type: string
        description: The system identifier (name, URL, etc) which has an external reference to the observation unit
  observationUnitsTableResponse:
    properties:
      data:
        type: array
        description: Matrix of observation meta-data and recorded values. Each inner array represents 1 row of data.
        items:
          type: array
          items:
            type: string
      headerRow:
        type: array
        description: Names of the columns included in the data matrix. Any or All of [ "year","studyDbId","studyName","locationDbId","locationName","germplasmDbId","germplasmName","observationUnitDbId","plotNumber","replicate","blockNumber", "observationTimestamp", "entryType", "X", "Y"]
        items:
          type: string
      observationVariableDbIds:
        type: array
        description: Array of observation variable DbIds for the collected data. This array is appended to the "headerRow" to get the complete header of the data matrix
        items:
          type: string
      observationVariableNames:
        type: array
        description: Human readable names of the observation variables for the collected data. This array should match 1 to 1 with the "observationVariableDbIds" array.
        items:
          type: string
  observationVariable:
    type: object
    required:
    - defaultValue
    - method
    - name
    - observationVariableDbId
    - ontologyDbId
    - ontologyName
    - scale
    - trait
    properties:
      contextOfUse:
        type: array
        description: 'Indication of how trait is routinely used. (examples: ["Trial
          evaluation", "Nursery evaluation"])'
        items:
          type: string
      crop:
        type: string
        description: 'Crop name (examples: "Maize", "Wheat")'
      date:
        type: string
        description: Date of submission of the variable (ISO 8601).
      defaultValue:
        type: string
        description: 'Variable default value. (examples: "red", "2.3", etc.)'
      growthStage:
        type: string
        description: 'Growth stage at which measurement is made (examples: "flowering")'
      institution:
        type: string
        description: Name of institution submitting the variable
      language:
        type: string
        description: 2 letter ISO code for the language of submission of the variable.
      method:
        description: The description of the method used to collect data for this variable
        $ref: '#/definitions/method'
      name:
        type: string
        description: Variable name (usually a short name)
      observationVariableDbId:
        type: string
        description: Variable unique identifier
      ontologyDbId:
        type: string
        description: Variable ontology unique identifier
      ontologyName:
        type: string
        description: Variable ontology name (usually a short name)
      scale:
        description: The description of the reference scale and units used on the collected data for this variable
        $ref: '#/definitions/scale'
      scientist:
        type: string
        description: Name of scientist submitting the variable.
      status:
        type: string
        description: 'Variable status. (examples: "recommended", "obsolete", "legacy",
          etc.)'
      submissionTimestamp:
        type: string
        format: date-time
        description: Timestamp when the Variable was added
      synonyms:
        type: array
        description: Other variable names
        items:
          type: string
      trait:
        description: The description of the trait which is being examined for this variable
        $ref: '#/definitions/trait'
      xref:
        type: string
        description: Cross reference of the variable term to a term from an external ontology or to a database of a major system.
  observationVariableSearchRequest:
    properties:
      datatypes:
        type: array
        description: List of scale data types to filter search results
        items:
          type: string
      methodDbIds:
        type: array
        description: List of methods to filter search results
        items:
          type: string
      names:
        type: array
        description: List of human readable observation variable names to search for
        items:
          type: string
      observationVariableDbIds:
        type: array
        description: List of observation variable IDs to search for
        items:
          type: string
      ontologyDbIds:
        type: array
        description: List of ontology IDs to search for
        items:
          type: string
      ontologyXrefs:
        type: array
        description: List of ontology IDs to search for
        items:
          type: string
      page:
        type: integer
        description: Which page of the "data" array to return. The page indexing starts at 0 (page=0 will return the first page). Default is 0.
      pageSize:
        type: integer
        description: The maximum number of items to return per page of the "data" array. Default is 1000.
      scaleDbIds:
        type: array
        description: List of scales to filter search results
        items:
          type: string
      traitClasses:
        type: array
        description: List of trait classes to filter search results
        items:
          type: string
  observationsTable:
    properties:
      data:
        type: array
        description: Matrix of observation data recorded for different observation variables across different observation units
        items:
          type: array
          items:
            type: string
      headerRow:
        type: array
        description: The header row describing the data matrix. Append 'observationVariableDbIds' for complete header row.
        items:
          type: string
      observationVariableDbIds:
        type: array
        description: The list of observation variables which have values recorded for them in the data matrix. Append to the 'headerRow' for comlete header row.
        items:
          type: string
      observationVariableNames:
        type: array
        description: The list of observation variable names which have values recorded for them in the data matrix. Order should match 'observationVariableDbIds'.
        items:
          type: string
  ontology:
    type: object
    required:
    - ontologyDbId
    - ontologyName
    properties:
      authors:
        type: string
        description: Ontology's list of authors (no specific format)
      copyright:
        type: string
        description: Ontology copyright
      description:
        type: string
        description: Human readable description of Ontology
      licence:
        type: string
        description: Ontology licence
      ontologyDbId:
        type: string
        description: Ontology database unique identifier
      ontologyName:
        type: string
        description: Ontology name
      version:
        type: string
        description: Ontology version (no specific format)
  pedigree:
    properties:
      crossingPlan:
        type: string
        description: The crossing strategy used to generate this germplasm
      crossingYear:
        type: string
        description: The year the parents were originally crossed
      defaultDisplayName:
        type: string
        description: A human readable name for a germplasm
      familyCode:
        type: string
        description: The code representing the family
      germplasmDbId:
        type: string
        description: ' The ID which uniquely identifies a germplasm'
      parent1DbId:
        type: string
        description: The germplasm DbId of the first parent of this germplasm
      parent1Id:
        type: string
        description: '**Deprecated** use parent1DbId'
      parent1Name:
        type: string
        description: the human readable name of the first parent of this germplasm
      parent1Type:
        type: string
        description: The type of parent the first parent is. ex. 'MALE', 'FEMALE', 'SELF', 'POPULATION', etc.
        enum:
        - MALE
        - FEMALE
        - SELF
        - POPULATION
      parent2DbId:
        type: string
        description: The germplasm DbId of the second parent of this germplasm
      parent2Id:
        type: string
        description: '**Deprecated** use parent2DbId'
      parent2Name:
        type: string
        description: The human readable name of the second parent of this germplasm
      parent2Type:
        type: string
        description: The type of parent the second parent is. ex. 'MALE', 'FEMALE', 'SELF', 'POPULATION', etc.
        enum:
        - MALE
        - FEMALE
        - SELF
        - POPULATION
      pedigree:
        type: string
        description: The string representation of the pedigree.
      siblings:
        type: array
        description: 'List of sibling germplasm '
        items:
          $ref: '#/definitions/pedigree_siblings'
  phenotypesRequest:
    properties:
      data:
        type: array
        description: Matrix of observation data recorded for different observation variables across different observation units
        items:
          $ref: '#/definitions/phenotypesRequest_data'
  phenotypesRequestObservation:
    required:
    - collector
    - observationTimeStamp
    - observationVariableDbId
    - observationVariableName
    - value
    properties:
      collector:
        type: string
        description: The name or identifier of the entity which collected the observation
      observationDbId:
        type: string
        description: The ID which uniquely identifies an observation
      observationTimeStamp:
        type: string
        format: date-time
        description: 'The date and time  when this observation was made '
      observationVariableDbId:
        type: string
        description: Variable unique identifier
      observationVariableName:
        type: string
        description: A human readable name for an observation variable
      season:
        type: string
        description: The season when the observation data was collected
      value:
        type: string
        description: The value of the data collected as an observation
  phenotypesSearchRequest:
    properties:
      germplasmDbIds:
        type: array
        description: The name or synonym of external genebank accession identifiers
        items:
          type: string
      locationDbIds:
        type: array
        description: locations these traits were collected
        items:
          type: string
      observationLevel:
        type: string
        description: The type of the observationUnit. Returns only the observation unit of the specified type; the parent levels ID can be accessed through observationUnit Structure.
      observationTimeStampRangeEnd:
        type: string
        format: date-time
        description: Timestamp range end
      observationTimeStampRangeStart:
        type: string
        format: date-time
        description: Timestamp range start
      observationVariableDbIds:
        type: array
        description: The IDs of traits, could be ontology ID, database ID or PUI
        items:
          type: string
      page:
        type: integer
        description: Which page of the "data" array to return. The page indexing starts at 0 (page=0 will return the first page). Default is 0.
      pageSize:
        type: integer
        description: The maximum number of items to return per page of the "data" array. Default is 1000.
      programDbIds:
        type: array
        description: list of programs to search across
        items:
          type: string
      seasonDbIds:
        type: array
        description: The year or Phenotyping campaign of a multi-annual study (trees, grape, ...)
        items:
          type: string
      studyDbIds:
        type: array
        description: The database ID / PK of the studies search parameter
        items:
          type: string
      trialDbIds:
        type: array
        description: list of trials to search across
        items:
          type: string
  progeny:
    properties:
      defaultDisplayName:
        type: string
        description: A human readable name for a germplasm
      germplasmDbId:
        type: string
        description: ' The ID which uniquely identifies a germplasm'
      progeny:
        type: array
        description: List of germplasm entities which are direct children of this germplasm
        items:
          $ref: '#/definitions/progeny_progeny'
  program:
    properties:
      abbreviation:
        type: string
        description: An abbreviation which represnts this program
      leadPerson:
        type: string
        description: The name or identifier of the program leader
      name:
        type: string
        description: Human readable name of the program
      objective:
        type: string
        description: The primary objective of the program
      programDbId:
        type: string
        description: The ID which uniquely identifies the program
  programsSearchRequest:
    properties:
      abbreviation:
        type: string
        description: An abbreviation of a program to search for
      leadPerson:
        type: string
        description: The name or identifier of the program leader to search for
      name:
        type: string
        description: A name of a program to search for
      objective:
        type: string
        description: A program objective to search for
      page:
        type: integer
        description: Which page of the "data" array to return. The page indexing starts at 0 (page=0 will return the first page). Default is 0.
      pageSize:
        type: integer
        description: The maximum number of items to return per page of the "data" array. Default is 1000.
      programDbId:
        type: string
        description: A program identifier to search for
  sample:
    properties:
      germplasmDbId:
        type: string
        description: ' The ID which uniquely identifies a germplasm'
      notes:
        type: string
        description: Additional notes about a samle
      observationUnitDbId:
        type: string
        description: The ID which uniquely identifies an observation unit
      plantDbId:
        type: string
        description: The ID which uniquely identifies a plant. Usually 'plantNumber'
      plateDbId:
        type: string
        description: The ID which uniquely identifies a plate of samples
      plateIndex:
        type: integer
        description: The index number of this sample on a plate
      plotDbId:
        type: string
        description: ' The ID which uniquely identifies a plot. Usually ''plotNumber'''
      sampleDbId:
        type: string
        description: The ID which uniquely identifies a sample
      sampleTimestamp:
        type: string
        format: date-time
        description: The date and time a sample was collected from the field
      sampleType:
        type: string
        description: 'The type of sample taken. ex. ''DNA'', ''RNA'', ''Tissue'',
          etc '
      studyDbId:
        type: string
        description: The ID which uniquely identifies a study within the given database server
      takenBy:
        type: string
        description: The name or identifier of the entity which took the sample from the field
      tissueType:
        type: string
        description: The type of tissue sampled. ex. 'Leaf', 'Root', etc.
  sampleSearchRequest:
    properties:
      germplasmDbId:
        type: array
        description: ' The ID which uniquely identifies a germplasm'
        items:
          type: string
      observationUnitDbId:
        type: array
        description: The ID which uniquely identifies an observation unit
        items:
          type: string
      page:
        type: integer
        description: Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is 0.
      pageSize:
        type: integer
        description: The size of the pages to be returned. Default is 1000.
      plateDbId:
        type: array
        description: The ID which uniquely identifies a plate of samples
        items:
          type: string
      sampleDbId:
        type: array
        description: The ID which uniquely identifies a sample
        items:
          type: string
  scale:
    type: object
    properties:
      dataType:
        type: string
        description: Class of the scale, entries can be "Numerical", "Nominal", "Ordinal", "Text", "Code", "Time", "Duration"
      decimalPlaces:
        type: integer
        description: For numerical, number of decimal places to be reported
      name:
        type: string
        description: Name of the scale
      scaleDbId:
        type: string
        description: Unique identifier of the scale. If left blank, the upload system will automatically generate a scale ID.
      validValues:
        description: List of valid values expected for non-numeric data
        $ref: '#/definitions/validValues'
      xref:
        type: string
        description: Cross reference to the scale, for example to a unit ontology such as UO or to a unit of an external major database
    description: Scale metadata
  season:
    properties:
      season:
        type: string
        description: Name of the season. ex. 'Spring', 'Q2', 'Season A', etc.
      seasonDbId:
        type: string
        description: The ID which uniquely identifies a season
      year:
        type: string
        description: The 4 digit year of the season.
  status:
    type: object
    properties:
      code:
        type: string
        description: Short numeric code to represent the status message
      message:
        type: string
        description: A short message concerning the status of this request/response
  study:
    properties:
      active:
        type: string
        description: Is this study currently active
      additionalInfo:
        type: object
        description: Additional arbitrary info
        additionalProperties:
          type: string
      contacts:
        type: array
        description: List of contact entities associated with this study
        items:
          $ref: '#/definitions/contact'
      dataLinks:
        type: array
        description: List of links to extra data files associated with this study. Extra data could include notes, images, and reference data.
        items:
          $ref: '#/definitions/dataLink'
      endDate:
        type: string
        format: date
        description: The date the study ends
      lastUpdate:
        $ref: '#/definitions/study_lastUpdate'
      license:
        type: string
        description: The usage license associated with the study data
      location:
        description: The location reference where this study is located.
        $ref: '#/definitions/location'
      seasons:
        type: array
        description: List of seasons over which this study was performed.
        items:
          type: string
      startDate:
        type: string
        format: date
        description: The date this study started
      studyDbId:
        type: string
        description: The ID which uniquely identifies a study within the given database server
      studyDescription:
        type: string
        description: The description of this study
      studyName:
        type: string
        description: The human readable name for a study
      studyType:
        type: string
        description: The type of study being performed. ex. "Yeald Trial", etc
      trialDbId:
        type: string
        description: The ID which uniquely identifies a trial
      trialName:
        type: string
        description: The human readable name of a trial
  studyLayoutRequest:
    properties:
      layout:
        type: array
        description: List of observation unit position data entities which need to be updated
        items:
          $ref: '#/definitions/studyLayoutRequest_layout'
  studySearchRequest:
    properties:
      active:
        type: boolean
        description: Is this study currently active
      germplasmDbIds:
        type: array
        description: List of IDs which uniquely identify germplasm
        items:
          type: string
      locationDbIds:
        type: array
        description: List of location identifiers to filter search results
        items:
          type: string
      observationVariableDbIds:
        type: array
        description: List of observation variable IDs to search for
        items:
          type: string
      page:
        type: integer
        description: Which page of the "data" array to return. The page indexing starts at 0 (page=0 will return the first page). Default is 0.
      pageSize:
        type: integer
        description: The maximum number of items to return per page of the "data" array. Default is 1000.
      programDbIds:
        type: array
        description: List of program identifiers to filter search results
        items:
          type: string
      programNames:
        type: array
        description: List of program names to filter search results
        items:
          type: string
      seasonDbId:
        type: array
        description: The ID which uniquely identifies a season
        items:
          type: string
      sortBy:
        type: string
        description: Name of one of the fields within the study object on which results can be sorted
        enum:
        - studyDbId
        - trialDbId
        - programDbId
        - locationDbId
        - seasonDbId
        - studyType
        - studyName
        - studyLocation
        - programName
        - germplasmDbId
        - observationVariableDbId
      sortOrder:
        type: string
        description: Order results should be sorted. ex. "ASC" or "DESC"
        enum:
        - asc
        - desc
      studyDbIds:
        type: array
        description: List of study identifiers to search for
        items:
          type: string
      studyLocations:
        type: array
        description: List of location names to filter search results
        items:
          type: string
      studyNames:
        type: array
        description: List of study names to filter search results
        items:
          type: string
      studyType:
        type: string
        description: The type of study being performed. ex. "Yeald Trial", etc
      trialDbIds:
        type: array
        description: List of trial identifiers to filter search results
        items:
          type: string
  studySummary:
    properties:
      active:
        type: string
        description: Is this study currently active
      additionalInfo:
        type: object
        description: Additional arbitrary info
        additionalProperties:
          type: string
      endDate:
        type: string
        format: date
        description: The date the study ends
      locationDbId:
        type: string
        description: The ID which uniquely identifies a location
      locationName:
        type: string
        description: The human readable name for a location
      name:
        type: string
        description: The humane readable name of a study
      programDbId:
        type: string
        description: The ID which uniquely identifies a program within the given database server
      programName:
        type: string
        description: The humane readable name of a program
      seasons:
        type: array
        description: List of seasons over which this study was performed.
        items:
          type: string
      startDate:
        type: string
        format: date
        description: The date this study started
      studyDbId:
        type: string
        description: The ID which uniquely identifies a study within the given database server
      studyType:
        type: string
        description: The type of study being performed. ex. "Yeald Trial", etc
      trialDbId:
        type: string
        description: The ID which uniquely identifies a trial
      trialName:
        type: string
        description: The human readable name of a trial
  studyType:
    properties:
      description:
        type: string
        description: The description of this study type
      name:
        type: string
        description: The human readable name of a study type
  taxonID:
    properties:
      sourceName:
        type: string
        description: The human readable name of the taxonomy provider
      taxonId:
        type: string
        description: The identifier (name, ID, URI) of a particular taxonomy within the source provider
  trait:
    properties:
      alternativeAbbreviations:
        type: array
        description: Other frequent abbreviations of the trait, if any. These abbreviations do not have to follow a convention
        items:
          type: string
      attribute:
        type: string
        description: A trait can be decomposed as "Trait" = "Entity" + "Attribute", the attribute is the observed feature (or characteristic) of the entity e.g., for "grain colour", attribute = "colour"
      class:
        type: string
        description: 'Trait class. (examples: "morphological trait", "phenological
          trait", "agronomical trait", "physiological trait", "abiotic stress trait",
          "biotic stress trait", "biochemical trait", "quality traits trait", "fertility
          trait", etc.)'
      description:
        type: string
        description: The description of a trait
      entity:
        type: string
        description: A trait can be decomposed as "Trait" = "Entity" + "Attribute", the entity is the part of the plant that the trait refers to e.g., for "grain colour", entity = "grain"
      mainAbbreviation:
        type: string
        description: 'Main abbreviation for trait name. (examples: "Carotenoid content"
          => "CC")'
      name:
        type: string
        description: The human readable name of a trait
      status:
        type: string
        description: 'Trait status (examples: "recommended", "obsolete", "legacy",
          etc.)'
      synonyms:
        type: array
        description: Other trait names
        items:
          type: string
      traitDbId:
        type: string
        description: The ID which uniquely identifies a trait
      xref:
        type: string
        description: Cross reference of the trait to an external ontology or database term e.g., Xref to a trait ontology (TO) term
  traitSummary:
    properties:
      defaultValue:
        type: string
        description: The default value of a trait (if applicable) ex. "0", "", "null"
      description:
        type: string
        description: The description of a trait
      name:
        type: string
        description: The human readable name of a trait
      observationVariables:
        type: array
        description: List of observation variable DbIds which include this trait
        items:
          type: string
      traitDbId:
        type: string
        description: The ID which uniquely identifies a trait
      traitId:
        type: string
        description: <strong>DEPRECATED</strong> The ID which uniquely identifies a trait
  trial:
    properties:
      active:
        type: boolean
        description: Is this trail currently active
      additionalInfo:
        type: object
        description: Additional arbitrary info
        additionalProperties:
          type: string
      contacts:
        type: array
        description: List of contact entities associated with this trial
        items:
          $ref: '#/definitions/contact'
      datasetAuthorship:
        $ref: '#/definitions/trial_datasetAuthorship'
      endDate:
        type: string
        format: date
        description: The date this trial ends
      programDbId:
        type: string
        description: A program identifier to search for
      programName:
        type: string
        description: The human readable name of a program
      startDate:
        type: string
        format: date
        description: The date this trial started
      studies:
        type: array
        description: List of studies inside this trial
        items:
          $ref: '#/definitions/trial_studies'
      trialDbId:
        type: string
        description: The ID which uniquely identifies a trial
      trialName:
        type: string
        description: The human readable name of a trial
  trialSummary:
    properties:
      active:
        type: boolean
        description: Is this trail currently active
      additionalInfo:
        type: object
        description: Additional arbitrary info
        additionalProperties:
          type: string
      endDate:
        type: string
        format: date
        description: The date this trial ends
      programDbId:
        type: string
        description: The ID which uniquely identifies a program
      programName:
        type: string
        description: The human readable name of a program
      startDate:
        type: string
        format: date
        description: The date this trial started
      studies:
        type: array
        description: List of studies inside this trial
        items:
          $ref: '#/definitions/trial_studies'
      trialDbId:
        type: string
        description: The ID which uniquely identifies a trial
      trialName:
        type: string
        description: The human readable name of a trial
  validValues:
    type: object
    properties:
      categories:
        type: array
        description: 'List of possible values and their meaning (examples: ["0=low",
          "1=medium", "2=high"]'
        items:
          type: string
      max:
        type: integer
        description: Maximum value (used for field data capture control).
      min:
        type: integer
        description: Minimum value (used for data capture control) for numerical and date scales
  vendorPlate:
    required:
    - clientPlateDbId
    - samples
    - status
    - statusTimeStamp
    - vendorPlateDbId
    - vendorProjectDbId
    properties:
      clientPlateDbId:
        type: string
        description: The ID which uniquely identifies this plate in the clients database
      files:
        type: array
        description: The array of data files produced by the vendors analysis
        items:
          $ref: '#/definitions/vendorPlateFile'
      plateFormat:
        type: string
        description: Defines the plate layout format, usually "Plate_96" for a 96 well plate or "Tubes" for plateless format
      sampleType:
        type: string
        description: 'The type of sample. ie "DNA", "RNA", "Tissue", etc '
      samples:
        type: array
        description: List of samples in the plate
        items:
          $ref: '#/definitions/vendorSample'
      status:
        type: string
        description: The status of the plate in the processing pipeline. Typically, "Received", "Processing", "QC_passed", QC_failed", "Completed" (as per vendor specifications)
      statusTimeStamp:
        type: string
        format: date-time
        description: The time stamp of the most recent status update
      vendorBarcode:
        type: string
        description: 'A string that can be represented as a barcode, identifying this
          plate '
      vendorBarcodeImageURL:
        type: string
        description: A URL pointing to an image file which has the bar code which identifies this plate
      vendorPlateDbId:
        type: string
        description: The ID which uniquely identifies this plate in the vendors database
      vendorProjectDbId:
        type: string
        description: The ID which uniquely identifies this project in the vendors database
  vendorPlateFile:
    required:
    - URL
    - fileType
    - filename
    - sampleDbIds
    properties:
      URL:
        type: string
        description: The URL to a file with the results of a vendor analysis
      additionalInfo:
        type: object
        description: Additional arbitrary info
        additionalProperties:
          type: string
      fileType:
        type: string
        description: Format of the file
      filename:
        type: string
        description: Name of the file
      md5sum:
        type: string
        description: MD5 Hash Check Sum for the file to confirm download without error
      sampleDbIds:
        type: array
        description: The list of sampleDbIds included in the file
        items:
          type: string
  vendorPlateRequest:
    properties:
      plates:
        type: array
        description: Array of new plates to be submitted to a vendor
        items:
          $ref: '#/definitions/vendorPlateRequest_plates'
  vendorPlateSearchRequest:
    properties:
      clientPlateDbIds:
        type: array
        description: List of plate ids from the client database to filter search
        items:
          type: string
      page:
        type: integer
        description: Which page of the "data" array to return. The page indexing starts at 0 (page=0 will return the first page). Default is 0.
      pageSize:
        type: integer
        description: The maximum number of items to return per page of the "data" array. Default is 1000.
      sampleInfo:
        type: boolean
        description: Include array of sample information or not in response
      vendorPlateDbIds:
        type: array
        description: List of plate ids from the vendors database to filter search
        items:
          type: string
      vendorProjectDbIds:
        type: array
        description: List of project ids from the vendors database to filter search
        items:
          type: string
  vendorSample:
    properties:
      column:
        type: string
        description: The sample column index number in a plate
      concentration:
        type: string
        description: The concentration of a sample in solution
      row:
        type: string
        description: the sample row index number in a plate
      sampleDbId:
        type: string
        description: The ID which uniquely identifies a sample
      taxonId:
        description: The identifier (name, ID, URI) of a particular taxonomy within the source provider
        $ref: '#/definitions/taxonID'
      tissueType:
        type: string
        description: The type of tissue sampled. ex. 'Leaf', 'Root', etc.
      volume:
        type: string
        description: The physical volume of a sample
      well:
        type: string
        description: The plate well number where a sample is located
  vendorSpecification:
    properties:
      additionalInfo:
        type: object
        description: Additional arbitrary info
        additionalProperties:
          type: string
      contactName:
        type: string
        description: The name or identifier of the primary vendor contact
      platforms:
        type: array
        description: List of platform specifications available at the vendor
        items:
          $ref: '#/definitions/vendorSpecificationPlatform'
      vendorAddress:
        type: string
        description: The street address of the vendor
      vendorCity:
        type: string
        description: The name of the city where the vendor is located
      vendorCountry:
        type: string
        description: The name of the country where the vendor is located
      vendorDescription:
        type: string
        description: A description of the vendor
      vendorEmail:
        type: string
        description: The primary email address used to contact the vendor
      vendorName:
        type: string
        description: The human readable name of the vendor
      vendorPhone:
        type: string
        description: The primary phone number used to contact the vendor
      vendorURL:
        type: string
        description: The primary URL for the vendor
  vendorSpecificationPlatform:
    properties:
      contactEmail:
        type: string
        description: The primary email address to contact a particular vendor platform
      contactName:
        type: string
        description: The name or identifier of the primary vendor platfrom contact
      contactPhone:
        type: string
        description: The phone number used to contact the vendor about a particular platform
      deliverables:
        type: array
        description: List of specific deliverables provided by the vendor platform
        items:
          $ref: '#/definitions/vendorSpecificationPlatform_deliverables'
      platformDescription:
        type: string
        description: Description of the vendor platform
      platformName:
        type: string
        description: The human readable name of a platform
      platformURL:
        type: string
        description: The URL for a vendor platform
      shippingAddress:
        type: string
        description: The street address for a vendor platform
      specificRequirements:
        type: object
        description: Additional arbitrary requirements for a particular platform
        properties: {}
      standardRequirements:
        description: Set of standard requirements for a vendor platform
        $ref: '#/definitions/vendorSpecificationStandardRequirement'
      statuses:
        type: array
        description: List of possible status messages for a vendor platform
        items:
          $ref: '#/definitions/vendorSpecificationPlatform_statuses'
      taxonomyIdSystem:
        description: Details about the systems used to track taxonomies
        $ref: '#/definitions/vendorSpecificationReferenceSystem'
      tissueIdSystem:
        description: Details about the systems used to track sample IDs
        $ref: '#/definitions/vendorSpecificationReferenceSystem'
  vendorSpecificationReferenceSystem:
    properties:
      URI:
        type: string
        description: The primary URI for this reference system
      name:
        type: string
        description: The human readable name for this reference system
  vendorSpecificationStandardRequirement:
    properties:
      blankWellPosition:
        $ref: '#/definitions/vendorSpecificationStandardRequirement_blankWellPosition'
      inputFormatDetails:
        type: string
        description: Human readable details about the accepted input formats
      inputFormats:
        type: array
        description: List of accepted data formats
        items:
          type: string
      maxConcentration:
        type: string
        description: The maximum allowed concentration
      maxVolume:
        type: string
        description: The minimum allowed volume of a sample
      minConcentration:
        type: string
        description: the minimum allowed concentration of a sample
      minSampleNumber:
        type: string
        description: 'The first sample number '
      minVolume:
        type: string
        description: The minimum allowed volume of a sample
      plateOrientation:
        type: string
        description: The orientation of a plate
      sampleTypeDetails:
        type: string
        description: Human readable details about the allowed sample types
      sampleTypes:
        type: array
        description: List of allowed sample types
        items:
          type: string
  alleleMatrixDetailsResponse:
    properties:
      metadata:
        $ref: '#/definitions/metadata'
      result:
        type: array
        items:
          $ref: '#/definitions/alleleMatrixDetails'
  alleleMatrixValuesResponse:
    properties:
      metadata:
        $ref: '#/definitions/metadata'
      result:
        $ref: '#/definitions/alleleMatrixValues'
  germplasmAttributeDefsResponse_result:
    properties:
      data:
        type: array
        items:
          $ref: '#/definitions/germplasmAttributeDef'
  germplasmAttributeDefsResponse:
    properties:
      metadata:
        $ref: '#/definitions/metadata'
      result:
        $ref: '#/definitions/germplasmAttributeDefsResponse_result'
  germplasmAttributeCategoriesResponse_result:
    properties:
      data:
        type: array
        items:
          $ref: '#/definitions/germplasmAttributeCategory'
  germplasmAttributeCategoriesResponse:
    properties:
      metadata:
        $ref: '#/definitions/metadata'
      result:
        $ref: '#/definitions/germplasmAttributeCategoriesResponse_result'
  breedingMethodsResponse_result:
    properties:
      data:
        type: array
        items:
          $ref: '#/definitions/breedingMethod'
  breedingMethodsResponse:
    properties:
      metadata:
        $ref: '#/definitions/metadata'
      result:
        $ref: '#/definitions/breedingMethodsResponse_result'
  breedingMethodResponse:
    properties:
      metadata:
        $ref: '#/definitions/metadata'
      result:
        $ref: '#/definitions/breedingMethod'
  callsResponse_result:
    properties:
      data:
        type: array
        description: Array of availible calls on this server
        items:
          $ref: '#/definitions/call'
  callsResponse:
    properties:
      metadata:
        $ref: '#/definitions/metadata'
      result:
        $ref: '#/definitions/callsResponse_result'
  commonCropNamesResponse_result:
    properties:
      data:
        type: array
        description: array of crop names availible on the server
        items:
          type: string
          description: supported crop name
  commonCropNamesResponse:
    properties:
      metadata:
        $ref: '#/definitions/metadata'
      result:
        $ref: '#/definitions/commonCropNamesResponse_result'
  germplasmResponse_result:
    properties:
      data:
        type: array
        items:
          $ref: '#/definitions/germplasm'
  germplasmResponse:
    properties:
      metadata:
        $ref: '#/definitions/metadata'
      result:
        $ref: '#/definitions/germplasmResponse_result'
  germplasmResponse_1:
    properties:
      metadata:
        $ref: '#/definitions/metadata'
      result:
        $ref: '#/definitions/germplasm'
  germplasmAttributeListResponse:
    properties:
      metadata:
        $ref: '#/definitions/metadata'
      result:
        $ref: '#/definitions/germplasmAttributeList'
  germplasmMarkerprofilesListResponse:
    properties:
      metadata:
        $ref: '#/definitions/metadata'
      result:
        $ref: '#/definitions/germplasmMarkerprofilesList'
  pedigreeResponse:
    properties:
      metadata:
        $ref: '#/definitions/metadata'
      result:
        $ref: '#/definitions/pedigree'
  progenyResponse:
    properties:
      metadata:
        $ref: '#/definitions/metadata'
      result:
        $ref: '#/definitions/progeny'
  locationsResponse_result:
    properties:
      data:
        type: array
        items:
          $ref: '#/definitions/location'
  locationsResponse:
    properties:
      metadata:
        $ref: '#/definitions/metadata'
      result:
        $ref: '#/definitions/locationsResponse_result'
  locationResponse:
    properties:
      metadata:
        $ref: '#/definitions/metadata'
      result:
        $ref: '#/definitions/location'
  genomeMapsResponse_result:
    properties:
      data:
        type: array
        items:
          $ref: '#/definitions/genomeMap'
  genomeMapsResponse:
    properties:
      metadata:
        $ref: '#/definitions/metadata'
      result:
        $ref: '#/definitions/genomeMapsResponse_result'
  mapDetailsResponse:
    properties:
      metadata:
        $ref: '#/definitions/metadata'
      result:
        $ref: '#/definitions/mapDetails'
  markersResponse_result:
    properties:
      data:
        type: array
        items:
          $ref: '#/definitions/markerSummaryMap'
  markersResponse:
    properties:
      metadata:
        $ref: '#/definitions/metadata'
      result:
        $ref: '#/definitions/markersResponse_result'
  markersResponse_1_result:
    properties:
      data:
        type: array
        items:
          $ref: '#/definitions/markerSummaryLinkageGroup'
  markersResponse_1:
    properties:
      metadata:
        $ref: '#/definitions/metadata'
      result:
        $ref: '#/definitions/markersResponse_1_result'
  markerProfileDescriptionsResponse_result:
    properties:
      data:
        type: array
        items:
          $ref: '#/definitions/markerProfileDescription'
  markerProfileDescriptionsResponse:
    properties:
      metadata:
        $ref: '#/definitions/metadata'
      result:
        $ref: '#/definitions/markerProfileDescriptionsResponse_result'
  markerProfilesResponse:
    properties:
      metadata:
        $ref: '#/definitions/metadata'
      result:
        $ref: '#/definitions/markerProfile'
  markersResponse_2_result:
    properties:
      data:
        type: array
        items:
          $ref: '#/definitions/marker'
  markersResponse_2:
    properties:
      metadata:
        $ref: '#/definitions/metadata'
      result:
        $ref: '#/definitions/markersResponse_2_result'
  markerResponse:
    properties:
      metadata:
        $ref: '#/definitions/metadata'
      result:
        $ref: '#/definitions/marker'
  observationLevelsResponse_result:
    properties:
      data:
        type: array
        items:
          type: string
          description: observation levels available in this database
  observationLevelsResponse:
    properties:
      metadata:
        $ref: '#/definitions/metadata'
      result:
        $ref: '#/definitions/observationLevelsResponse_result'
  ontologiesResponse_result:
    properties:
      data:
        type: array
        items:
          $ref: '#/definitions/ontology'
  ontologiesResponse:
    properties:
      metadata:
        $ref: '#/definitions/metadata'
      result:
        $ref: '#/definitions/ontologiesResponse_result'
  newObservationDbIdsResponse:
    properties:
      metadata:
        $ref: '#/definitions/metadata'
      result:
        $ref: '#/definitions/newObservationDbIds'
  observationUnitsResponse_result:
    properties:
      data:
        type: array
        items:
          $ref: '#/definitions/observationUnitPhenotype'
  observationUnitsResponse:
    properties:
      metadata:
        $ref: '#/definitions/metadata'
      result:
        $ref: '#/definitions/observationUnitsResponse_result'
  observationUnitsTableResponse_1:
    properties:
      metadata:
        $ref: '#/definitions/metadata'
      result:
        $ref: '#/definitions/observationUnitsTableResponse'
  programsResponse_result:
    properties:
      data:
        type: array
        items:
          $ref: '#/definitions/program'
  programsResponse:
    properties:
      metadata:
        $ref: '#/definitions/metadata'
      result:
        $ref: '#/definitions/programsResponse_result'
  samplesResponse_result:
    properties:
      data:
        type: array
        items:
          $ref: '#/definitions/sample'
  samplesResponse:
    properties:
      metadata:
        $ref: '#/definitions/metadata'
      result:
        $ref: '#/definitions/samplesResponse_result'
  sampleResponse:
    properties:
      metadata:
        $ref: '#/definitions/metadata'
      result:
        $ref: '#/definitions/sample'
  seasonsResponse_result:
    properties:
      data:
        type: array
        items:
          $ref: '#/definitions/season'
  seasonsResponse:
    properties:
      metadata:
        $ref: '#/definitions/metadata'
      result:
        $ref: '#/definitions/seasonsResponse_result'
  studiesResponse_result:
    properties:
      data:
        type: array
        items:
          $ref: '#/definitions/studySummary'
  studiesResponse:
    properties:
      metadata:
        $ref: '#/definitions/metadata'
      result:
        $ref: '#/definitions/studiesResponse_result'
  studyResponse:
    properties:
      metadata:
        $ref: '#/definitions/metadata'
      result:
        $ref: '#/definitions/study'
  germplasmSummaryListResponse:
    properties:
      metadata:
        $ref: '#/definitions/metadata'
      result:
        $ref: '#/definitions/germplasmSummaryList'
  observationUnitPositionsResponse_result:
    properties:
      data:
        type: array
        items:
          $ref: '#/definitions/observationUnitPosition'
  observationUnitPositionsResponse:
    properties:
      metadata:
        $ref: '#/definitions/metadata'
      result:
        $ref: '#/definitions/observationUnitPositionsResponse_result'
  studyObservationVariablesResponse_result:
    properties:
      data:
        type: array
        items:
          $ref: '#/definitions/observationVariable'
      studyDbId:
        type: string
      trialName:
        type: string
  studyObservationVariablesResponse:
    properties:
      metadata:
        $ref: '#/definitions/metadata'
      result:
        $ref: '#/definitions/studyObservationVariablesResponse_result'
  observationsResponse_result:
    properties:
      data:
        type: array
        items:
          $ref: '#/definitions/observation'
  observationsResponse:
    properties:
      metadata:
        $ref: '#/definitions/metadata'
      result:
        $ref: '#/definitions/observationsResponse_result'
  observationUnitsResponse_1_result:
    properties:
      data:
        type: array
        items:
          $ref: '#/definitions/observationUnitStudy'
  observationUnitsResponse_1:
    properties:
      metadata:
        $ref: '#/definitions/metadata'
      result:
        $ref: '#/definitions/observationUnitsResponse_1_result'
  newObservationUnitDbIdsResponse:
    properties:
      metadata:
        $ref: '#/definitions/metadata'
      result:
        $ref: '#/definitions/newObservationUnitDbIds'
  newObservationsRequestWrapperDeprecated:
    properties:
      metadata:
        $ref: '#/definitions/metadata'
      result:
        $ref: '#/definitions/newObservationsRequestDeprecated'
    title: newObservationsRequestWrapperDeprecated
  studyobservationsTableResponse:
    properties:
      metadata:
        $ref: '#/definitions/metadata'
      result:
        $ref: '#/definitions/observationsTable'
  studyTypesResponse_result:
    properties:
      data:
        type: array
        items:
          $ref: '#/definitions/studyType'
  studyTypesResponse:
    properties:
      metadata:
        $ref: '#/definitions/metadata'
      result:
        $ref: '#/definitions/studyTypesResponse_result'
  traitsResponse_result:
    properties:
      data:
        type: array
        items:
          $ref: '#/definitions/traitSummary'
  traitsResponse:
    properties:
      metadata:
        $ref: '#/definitions/metadata'
      result:
        $ref: '#/definitions/traitsResponse_result'
  traitResponse:
    properties:
      metadata:
        $ref: '#/definitions/metadata'
      result:
        $ref: '#/definitions/traitSummary'
  trialsResponse_result:
    properties:
      data:
        type: array
        items:
          $ref: '#/definitions/trialSummary'
  trialsResponse:
    properties:
      metadata:
        $ref: '#/definitions/metadata'
      result:
        $ref: '#/definitions/trialsResponse_result'
  trialResponse:
    properties:
      metadata:
        $ref: '#/definitions/metadata'
      result:
        $ref: '#/definitions/trial'
  observationVariablesResponse_result:
    properties:
      data:
        type: array
        items:
          $ref: '#/definitions/observationVariable'
  observationVariablesResponse:
    properties:
      metadata:
        $ref: '#/definitions/metadata'
      result:
        $ref: '#/definitions/observationVariablesResponse_result'
  observationVariableResponse:
    properties:
      metadata:
        $ref: '#/definitions/metadata'
      result:
        $ref: '#/definitions/observationVariable'
  vendorPlatesResponse_result:
    properties:
      plates:
        type: array
        items:
          $ref: '#/definitions/vendorPlate'
  vendorPlatesResponse:
    properties:
      metadata:
        $ref: '#/definitions/metadata'
      result:
        $ref: '#/definitions/vendorPlatesResponse_result'
  vendorPlateResponse:
    properties:
      metadata:
        $ref: '#/definitions/metadata'
      result:
        $ref: '#/definitions/vendorPlate'
  vendorSpecificationResponse:
    properties:
      metadata:
        $ref: '#/definitions/metadata'
      result:
        $ref: '#/definitions/vendorSpecification'
  germplasm_donors:
    properties:
      donorAccessionNumber:
        type: string
      donorInstituteCode:
        type: string
      germplasmPUI:
        type: string
  metadata_pagination:
    properties:
      currentPage:
        type: integer
      pageSize:
        type: integer
      totalCount:
        type: integer
      totalPages:
        type: integer
    description: The pagination object is applicable only when the payload contains a "data" key. It describes the pagination of the data contained in the "data" array, as a way to identify which subset of data is being returned. Pages are zero indexed, so the first page will be page 0 (zero).
  newObservationDbIds_observations:
    properties:
      observationDbId:
        type: string
      observationUnitDbId:
        type: string
      observationVariableDbId:
        type: string
  newObservationsRequest_observations:
    properties:
      collector:
        type: string
      observationDbId:
        type: string
      observationTimeStamp:
        type: string
        format: date-time
      observationUnitDbId:
        type: string
      observationVariableDbId:
        type: string
      value:
        type: string
  newObservationsRequestDeprecated_data:
    properties:
      observatioUnitDbId:
        type: string
      observations:
        type: array
        items:
          $ref: '#/definitions/newObservationsRequest_observations'
      studyDbId:
        type: number
  newSampleDbId_result:
    properties:
      sampleDbId:
        type: string
      sampleId:
        type: string
        description: '** Deprecated ** use sampleDbId'
    description: List of sample references which have been created or updated
  pedigree_siblings:
    properties:
      defaultDisplayName:
        type: string
      germplasmDbId:
        type: string
  phenotypesRequest_data:
    required:
    - observatioUnitDbId
    - observations
    - studyDbId
    properties:
      observatioUnitDbId:
        type: string
      observations:
        type: array
        items:
          $ref: '#/definitions/phenotypesRequestObservation'
      studyDbId:
        type: string
    description: new phenotypes
  progeny_progeny:
    properties:
      defaultDisplayName:
        type: string
      germplasmDbId:
        type: string
      parentType:
        type: string
        enum:
        - MALE
        - FEMALE
        - SELF
        - POPULATION
  study_lastUpdate:
    properties:
      timestamp:
        type: string
        format: date-time
      version:
        type: string
    description: The date and time when this study was last modified
  studyLayoutRequest_layout:
    properties:
      X:
        type: integer
      Y:
        type: integer
      blockNumber:
        type: integer
      entryType:
        type: string
        enum:
        - CHECK
        - TEST
        - FILLER
      observationUnitDbId:
        type: string
      replicate:
        type: integer
  trial_datasetAuthorship:
    properties:
      datasetPUI:
        type: string
      license:
        type: string
    description: License and citation information for the data in this trial
  trial_studies:
    properties:
      locationDbId:
        type: string
      locationName:
        type: string
      studyDbId:
        type: string
      studyName:
        type: string
  vendorPlateRequest_samples:
    properties:
      column:
        type: string
      concentration:
        type: string
      row:
        type: string
      sampleDbId:
        type: string
      taxonId:
        $ref: '#/definitions/taxonID'
      tissueType:
        type: string
      volume:
        type: string
      well:
        type: string
  vendorPlateRequest_plates:
    properties:
      clientPlateDbId:
        type: string
        description: The ID which uniquely identifies this plate in the clients database
      plateFormat:
        type: string
        description: Defines the plate layout format, usually "Plate_96" for a 96 well plate or "Tubes" for plateless format
      sampleType:
        type: string
      samples:
        type: array
        items:
          $ref: '#/definitions/vendorPlateRequest_samples'
      vendorProjectDbId:
        type: string
  vendorSpecificationPlatform_deliverables:
    properties:
      description:
        type: string
      format:
        type: string
      name:
        type: string
  vendorSpecificationPlatform_statuses:
    properties:
      statusDescription:
        type: string
      statusName:
        type: string
  vendorSpecificationStandardRequirement_blankWellPosition:
    properties:
      numberOfBlanksPerPlate:
        type: integer
      positions:
        type: array
        items:
          type: string
    description: Position data for reference blank well
